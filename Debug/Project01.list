
Project01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008118  08008118  00018118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001d4  08008758  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08008758  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001418e  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c39  00000000  00000000  000343d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8d  00000000  00000000  00038170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029654  00000000  00000000  00038efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016abd  00000000  00000000  00062551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe321  00000000  00000000  0007900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005798  00000000  00000000  00177330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008100 	.word	0x08008100

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08008100 	.word	0x08008100

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b40      	ldr	r3, [pc, #256]	; (8000704 <MX_GPIO_Init+0x118>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a3f      	ldr	r2, [pc, #252]	; (8000704 <MX_GPIO_Init+0x118>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <MX_GPIO_Init+0x118>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <MX_GPIO_Init+0x118>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <MX_GPIO_Init+0x118>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b37      	ldr	r3, [pc, #220]	; (8000704 <MX_GPIO_Init+0x118>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_GPIO_Init+0x118>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a33      	ldr	r2, [pc, #204]	; (8000704 <MX_GPIO_Init+0x118>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_GPIO_Init+0x118>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_GPIO_Init+0x118>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_GPIO_Init+0x118>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_GPIO_Init+0x118>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_GPIO_Init+0x118>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <MX_GPIO_Init+0x118>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0x118>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_GPIO_Init+0x118>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_GPIO_Init+0x118>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_GPIO_Init+0x118>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <MX_GPIO_Init+0x11c>)
 800069a:	f001 fc01 	bl	8001ea0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	481a      	ldr	r0, [pc, #104]	; (800070c <MX_GPIO_Init+0x120>)
 80006a4:	f001 fbfc 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006a8:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80006ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0x11c>)
 80006c2:	f001 fa29 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x120>)
 80006de:	f001 fa1b 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_GPIO_Init+0x124>)
 80006f8:	f001 fa0e 	bl	8001b18 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40021000 	.word	0x40021000
 800070c:	40020400 	.word	0x40020400
 8000710:	40020800 	.word	0x40020800

08000714 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af02      	add	r7, sp, #8
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	f043 030c 	orr.w	r3, r3, #12
 8000732:	b2db      	uxtb	r3, r3
 8000734:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	b2db      	uxtb	r3, r3
 800073e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	f043 030c 	orr.w	r3, r3, #12
 8000746:	b2db      	uxtb	r3, r3
 8000748:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000754:	f107 0208 	add.w	r2, r7, #8
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2304      	movs	r3, #4
 800075e:	214e      	movs	r1, #78	; 0x4e
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <lcd_send_cmd+0x5c>)
 8000762:	f001 fc53 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001f0 	.word	0x200001f0

08000774 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f043 030d 	orr.w	r3, r3, #13
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f043 0309 	orr.w	r3, r3, #9
 800079c:	b2db      	uxtb	r3, r3
 800079e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	f043 030d 	orr.w	r3, r3, #13
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	f043 0309 	orr.w	r3, r3, #9
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2304      	movs	r3, #4
 80007be:	214e      	movs	r1, #78	; 0x4e
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <lcd_send_data+0x5c>)
 80007c2:	f001 fc23 	bl	800200c <HAL_I2C_Master_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001f0 	.word	0x200001f0

080007d4 <lcd_clear>:

void lcd_clear (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80007da:	2080      	movs	r0, #128	; 0x80
 80007dc:	f7ff ff9a 	bl	8000714 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	e005      	b.n	80007f2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007e6:	2020      	movs	r0, #32
 80007e8:	f7ff ffc4 	bl	8000774 <lcd_send_data>
	for (int i=0; i<70; i++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b45      	cmp	r3, #69	; 0x45
 80007f6:	ddf6      	ble.n	80007e6 <lcd_clear+0x12>
	}
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
    switch (row)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <lcd_put_cur+0x18>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d005      	beq.n	8000824 <lcd_put_cur+0x22>
 8000818:	e009      	b.n	800082e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	603b      	str	r3, [r7, #0]
            break;
 8000822:	e004      	b.n	800082e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800082a:	603b      	str	r3, [r7, #0]
            break;
 800082c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff6e 	bl	8000714 <lcd_send_cmd>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <lcd_init>:


void lcd_init (void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f001 f831 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 800084a:	2030      	movs	r0, #48	; 0x30
 800084c:	f7ff ff62 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000850:	2005      	movs	r0, #5
 8000852:	f001 f82b 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000856:	2030      	movs	r0, #48	; 0x30
 8000858:	f7ff ff5c 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800085c:	2001      	movs	r0, #1
 800085e:	f001 f825 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000862:	2030      	movs	r0, #48	; 0x30
 8000864:	f7ff ff56 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f001 f81f 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800086e:	2020      	movs	r0, #32
 8000870:	f7ff ff50 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(10);
 8000874:	200a      	movs	r0, #10
 8000876:	f001 f819 	bl	80018ac <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800087a:	2028      	movs	r0, #40	; 0x28
 800087c:	f7ff ff4a 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f001 f813 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000886:	2008      	movs	r0, #8
 8000888:	f7ff ff44 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 f80d 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff ff3e 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f001 f807 	bl	80018ac <HAL_Delay>
	HAL_Delay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 f804 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008a4:	2006      	movs	r0, #6
 80008a6:	f7ff ff35 	bl	8000714 <lcd_send_cmd>
	HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fffe 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80008b0:	200c      	movs	r0, #12
 80008b2:	f7ff ff2f 	bl	8000714 <lcd_send_cmd>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008c2:	e006      	b.n	80008d2 <lcd_send_string+0x18>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff51 	bl	8000774 <lcd_send_data>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f4      	bne.n	80008c4 <lcd_send_string+0xa>
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_I2C2_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_I2C2_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_I2C2_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <MX_I2C2_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_I2C2_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <MX_I2C2_Init+0x74>)
 8000920:	f001 fad8 	bl	8001ed4 <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 fc61 	bl	80011f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <MX_I2C2_Init+0x74>)
 8000932:	f001 fe9d 	bl	8002670 <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fc58 	bl	80011f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_I2C2_Init+0x74>)
 8000944:	f001 fedf 	bl	8002706 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fc4f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001f0 	.word	0x200001f0
 800095c:	40005800 	.word	0x40005800
 8000960:	20404768 	.word	0x20404768

08000964 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ae      	sub	sp, #184	; 0xb8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2290      	movs	r2, #144	; 0x90
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f005 fb05 	bl	8005f94 <memset>
  if(i2cHandle->Instance==I2C2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_I2C_MspInit+0xb4>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d13c      	bne.n	8000a0e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000998:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fbe0 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f000 fc1f 	bl	80011f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e4:	2304      	movs	r3, #4
 80009e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009ee:	4619      	mov	r1, r3
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <HAL_I2C_MspInit+0xbc>)
 80009f2:	f001 f891 	bl	8001b18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_I2C_MspInit+0xb8>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	37b8      	adds	r7, #184	; 0xb8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40005800 	.word	0x40005800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400

08000a24 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Ultra Sonic Sensor
void delay(uint16_t time){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <delay+0x30>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<time);
 8000a36:	bf00      	nop
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <delay+0x30>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3f9      	bcc.n	8000a38 <delay+0x14>
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000274 	.word	0x20000274

08000a58 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7f1b      	ldrb	r3, [r3, #28]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d17a      	bne.n	8000b5e <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000a68:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11a      	bne.n	8000aa6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000a70:	2100      	movs	r1, #0
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f003 fc7e 	bl	8004374 <HAL_TIM_ReadCapturedValue>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a7c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a1a      	ldr	r2, [r3, #32]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 020a 	bic.w	r2, r2, #10
 8000a92:	621a      	str	r2, [r3, #32]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6a1a      	ldr	r2, [r3, #32]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0202 	orr.w	r2, r2, #2
 8000aa2:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000aa4:	e05b      	b.n	8000b5e <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d157      	bne.n	8000b5e <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000aae:	2100      	movs	r1, #0
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f003 fc5f 	bl	8004374 <HAL_TIM_ReadCapturedValue>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000aba:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d907      	bls.n	8000ae0 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e00f      	b.n	8000b00 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d909      	bls.n	8000b00 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad2      	subs	r2, r2, r3
 8000af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afa:	4413      	add	r3, r2
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000afe:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b0c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000b68 <HAL_TIM_IC_CaptureCallback+0x110>
 8000b10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b14:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000b18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b20:	edc7 7a00 	vstr	s15, [r7]
 8000b24:	783b      	ldrb	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000b2a:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a1a      	ldr	r2, [r3, #32]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 020a 	bic.w	r2, r2, #10
 8000b40:	621a      	str	r2, [r3, #32]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6a12      	ldr	r2, [r2, #32]
 8000b4c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0202 	bic.w	r2, r2, #2
 8000b5c:	60da      	str	r2, [r3, #12]
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	b020c49c 	.word	0xb020c49c
 8000b6c:	3fa16872 	.word	0x3fa16872
 8000b70:	2000026c 	.word	0x2000026c
 8000b74:	20000260 	.word	0x20000260
 8000b78:	20000264 	.word	0x20000264
 8000b7c:	20000268 	.word	0x20000268
 8000b80:	2000026d 	.word	0x2000026d
 8000b84:	20000274 	.word	0x20000274

08000b88 <HCSR04_Read>:


void HCSR04_Read (void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HCSR04_Read+0x38>)
 8000b94:	f001 f984 	bl	8001ea0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f7ff ff43 	bl	8000a24 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HCSR04_Read+0x38>)
 8000ba6:	f001 f97b 	bl	8001ea0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HCSR04_Read+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HCSR04_Read+0x3c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0202 	orr.w	r2, r2, #2
 8000bb8:	60da      	str	r2, [r3, #12]
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	20000274 	.word	0x20000274

08000bc8 <stepper_set_rpm>:
  __HAL_TIM_SET_COUNTER(&htim2, 0);
  while (__HAL_TIM_GET_COUNTER(&htim2) < us);
}

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000bd0:	f643 1238 	movw	r2, #14648	; 0x3938
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff21 	bl	8000a24 <delay>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	switch (step){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	f200 80bc 	bhi.w	8000d74 <stepper_half_drive+0x188>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <stepper_half_drive+0x18>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c25 	.word	0x08000c25
 8000c08:	08000c4f 	.word	0x08000c4f
 8000c0c:	08000c79 	.word	0x08000c79
 8000c10:	08000ca3 	.word	0x08000ca3
 8000c14:	08000ccd 	.word	0x08000ccd
 8000c18:	08000cf7 	.word	0x08000cf7
 8000c1c:	08000d21 	.word	0x08000d21
 8000c20:	08000d4b 	.word	0x08000d4b
	         case 0:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 8000c24:	2201      	movs	r2, #1
 8000c26:	2104      	movs	r1, #4
 8000c28:	4854      	ldr	r0, [pc, #336]	; (8000d7c <stepper_half_drive+0x190>)
 8000c2a:	f001 f939 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2110      	movs	r1, #16
 8000c32:	4852      	ldr	r0, [pc, #328]	; (8000d7c <stepper_half_drive+0x190>)
 8000c34:	f001 f934 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);   // IN3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	484f      	ldr	r0, [pc, #316]	; (8000d7c <stepper_half_drive+0x190>)
 8000c3e:	f001 f92f 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000c42:	2200      	movs	r2, #0
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	484d      	ldr	r0, [pc, #308]	; (8000d7c <stepper_half_drive+0x190>)
 8000c48:	f001 f92a 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000c4c:	e092      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 1:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2104      	movs	r1, #4
 8000c52:	484a      	ldr	r0, [pc, #296]	; (8000d7c <stepper_half_drive+0x190>)
 8000c54:	f001 f924 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4847      	ldr	r0, [pc, #284]	; (8000d7c <stepper_half_drive+0x190>)
 8000c5e:	f001 f91f 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);   // IN3
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	4845      	ldr	r0, [pc, #276]	; (8000d7c <stepper_half_drive+0x190>)
 8000c68:	f001 f91a 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	4842      	ldr	r0, [pc, #264]	; (8000d7c <stepper_half_drive+0x190>)
 8000c72:	f001 f915 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000c76:	e07d      	b.n	8000d74 <stepper_half_drive+0x188>

	          case 2:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	483f      	ldr	r0, [pc, #252]	; (8000d7c <stepper_half_drive+0x190>)
 8000c7e:	f001 f90f 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 8000c82:	2201      	movs	r2, #1
 8000c84:	2110      	movs	r1, #16
 8000c86:	483d      	ldr	r0, [pc, #244]	; (8000d7c <stepper_half_drive+0x190>)
 8000c88:	f001 f90a 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);   // IN3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	483a      	ldr	r0, [pc, #232]	; (8000d7c <stepper_half_drive+0x190>)
 8000c92:	f001 f905 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000c96:	2200      	movs	r2, #0
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	4838      	ldr	r0, [pc, #224]	; (8000d7c <stepper_half_drive+0x190>)
 8000c9c:	f001 f900 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000ca0:	e068      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 3:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4835      	ldr	r0, [pc, #212]	; (8000d7c <stepper_half_drive+0x190>)
 8000ca8:	f001 f8fa 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);   // IN2
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4832      	ldr	r0, [pc, #200]	; (8000d7c <stepper_half_drive+0x190>)
 8000cb2:	f001 f8f5 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);   // IN3
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4830      	ldr	r0, [pc, #192]	; (8000d7c <stepper_half_drive+0x190>)
 8000cbc:	f001 f8f0 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	482d      	ldr	r0, [pc, #180]	; (8000d7c <stepper_half_drive+0x190>)
 8000cc6:	f001 f8eb 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000cca:	e053      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 4:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2104      	movs	r1, #4
 8000cd0:	482a      	ldr	r0, [pc, #168]	; (8000d7c <stepper_half_drive+0x190>)
 8000cd2:	f001 f8e5 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2110      	movs	r1, #16
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <stepper_half_drive+0x190>)
 8000cdc:	f001 f8e0 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);   // IN3
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	4825      	ldr	r0, [pc, #148]	; (8000d7c <stepper_half_drive+0x190>)
 8000ce6:	f001 f8db 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4823      	ldr	r0, [pc, #140]	; (8000d7c <stepper_half_drive+0x190>)
 8000cf0:	f001 f8d6 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000cf4:	e03e      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 5:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4820      	ldr	r0, [pc, #128]	; (8000d7c <stepper_half_drive+0x190>)
 8000cfc:	f001 f8d0 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <stepper_half_drive+0x190>)
 8000d06:	f001 f8cb 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);   // IN3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <stepper_half_drive+0x190>)
 8000d10:	f001 f8c6 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 8000d14:	2201      	movs	r2, #1
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	4818      	ldr	r0, [pc, #96]	; (8000d7c <stepper_half_drive+0x190>)
 8000d1a:	f001 f8c1 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000d1e:	e029      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 6:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8000d20:	2200      	movs	r2, #0
 8000d22:	2104      	movs	r1, #4
 8000d24:	4815      	ldr	r0, [pc, #84]	; (8000d7c <stepper_half_drive+0x190>)
 8000d26:	f001 f8bb 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4813      	ldr	r0, [pc, #76]	; (8000d7c <stepper_half_drive+0x190>)
 8000d30:	f001 f8b6 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);   // IN3
 8000d34:	2200      	movs	r2, #0
 8000d36:	2120      	movs	r1, #32
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <stepper_half_drive+0x190>)
 8000d3a:	f001 f8b1 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <stepper_half_drive+0x190>)
 8000d44:	f001 f8ac 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000d48:	e014      	b.n	8000d74 <stepper_half_drive+0x188>

		  case 7:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <stepper_half_drive+0x190>)
 8000d50:	f001 f8a6 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);   // IN2
 8000d54:	2200      	movs	r2, #0
 8000d56:	2110      	movs	r1, #16
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <stepper_half_drive+0x190>)
 8000d5a:	f001 f8a1 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);   // IN3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <stepper_half_drive+0x190>)
 8000d64:	f001 f89c 	bl	8001ea0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <stepper_half_drive+0x190>)
 8000d6e:	f001 f897 	bl	8001ea0 <HAL_GPIO_WritePin>
			  break;
 8000d72:	bf00      	nop
		}

}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ac      	sub	sp, #176	; 0xb0
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fd34 	bl	80017f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f9c3 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff fc2d 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d92:	f000 fb63 	bl	800145c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d96:	f000 fc73 	bl	8001680 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d9a:	f000 fbb9 	bl	8001510 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000d9e:	f7ff fda1 	bl	80008e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	48c2      	ldr	r0, [pc, #776]	; (80010b0 <main+0x330>)
 8000da6:	f002 ff27 	bl	8003bf8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000daa:	48c2      	ldr	r0, [pc, #776]	; (80010b4 <main+0x334>)
 8000dac:	f002 fe5c 	bl	8003a68 <HAL_TIM_Base_Start>
  lcd_init();
 8000db0:	f7ff fd46 	bl	8000840 <lcd_init>
  lcd_put_cur(0,0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fd23 	bl	8000802 <lcd_put_cur>
  lcd_send_string("Hi Pet Lover!");
 8000dbc:	48be      	ldr	r0, [pc, #760]	; (80010b8 <main+0x338>)
 8000dbe:	f7ff fd7c 	bl	80008ba <lcd_send_string>
  HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f000 fd71 	bl	80018ac <HAL_Delay>
  lcd_clear();
 8000dca:	f7ff fd03 	bl	80007d4 <lcd_clear>
  lcd_put_cur(0,0);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fd16 	bl	8000802 <lcd_put_cur>
  lcd_send_string("Start Detecting");
 8000dd6:	48b9      	ldr	r0, [pc, #740]	; (80010bc <main+0x33c>)
 8000dd8:	f7ff fd6f 	bl	80008ba <lcd_send_string>
  HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	f000 fd64 	bl	80018ac <HAL_Delay>
  //lcd_send_string("Hello World");
  //HAL_Delay(1000);
  lcd_clear();
 8000de4:	f7ff fcf6 	bl	80007d4 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000de8:	f7ff fece 	bl	8000b88 <HCSR04_Read>
	  char msg[10];
	  sprintf(msg, "%d\r\n", Distance);
 8000dec:	4bb4      	ldr	r3, [pc, #720]	; (80010c0 <main+0x340>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000df6:	49b3      	ldr	r1, [pc, #716]	; (80010c4 <main+0x344>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fffb 	bl	8005df4 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000dfe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fa6c 	bl	80002e0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e14:	48ac      	ldr	r0, [pc, #688]	; (80010c8 <main+0x348>)
 8000e16:	f003 fea9 	bl	8004b6c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000e1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1e:	f000 fd45 	bl	80018ac <HAL_Delay>

	  if (Distance < 10) {
 8000e22:	4ba7      	ldr	r3, [pc, #668]	; (80010c0 <main+0x340>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b09      	cmp	r3, #9
 8000e28:	f200 8129 	bhi.w	800107e <main+0x2fe>
		  uint8_t currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e30:	48a6      	ldr	r0, [pc, #664]	; (80010cc <main+0x34c>)
 8000e32:	f001 f81d 	bl	8001e70 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

		  if (currentState && !pirState) {
 8000e3c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d011      	beq.n	8000e68 <main+0xe8>
 8000e44:	4ba2      	ldr	r3, [pc, #648]	; (80010d0 <main+0x350>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10d      	bne.n	8000e68 <main+0xe8>
			// Motion detected, start the timer
				startTime = HAL_GetTick();
 8000e4c:	f000 fd22 	bl	8001894 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4aa0      	ldr	r2, [pc, #640]	; (80010d4 <main+0x354>)
 8000e54:	6013      	str	r3, [r2, #0]
				pirState = 1;
 8000e56:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <main+0x350>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	489d      	ldr	r0, [pc, #628]	; (80010d8 <main+0x358>)
 8000e62:	f001 f81d 	bl	8001ea0 <HAL_GPIO_WritePin>
 8000e66:	e11e      	b.n	80010a6 <main+0x326>

		  }
		  else if (!currentState && pirState) {
 8000e68:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1bb      	bne.n	8000de8 <main+0x68>
 8000e70:	4b97      	ldr	r3, [pc, #604]	; (80010d0 <main+0x350>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0b7      	beq.n	8000de8 <main+0x68>
				// Motion ended, calculate hold time
				holdTime = HAL_GetTick() - startTime;
 8000e78:	f000 fd0c 	bl	8001894 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <main+0x354>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a95      	ldr	r2, [pc, #596]	; (80010dc <main+0x35c>)
 8000e86:	6013      	str	r3, [r2, #0]
				pirState = 0;
 8000e88:	4b91      	ldr	r3, [pc, #580]	; (80010d0 <main+0x350>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2101      	movs	r1, #1
 8000e92:	4891      	ldr	r0, [pc, #580]	; (80010d8 <main+0x358>)
 8000e94:	f001 f804 	bl	8001ea0 <HAL_GPIO_WritePin>
				lcd_put_cur(0,0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fcb1 	bl	8000802 <lcd_put_cur>
				lcd_send_string("Motion Detected");
 8000ea0:	488f      	ldr	r0, [pc, #572]	; (80010e0 <main+0x360>)
 8000ea2:	f7ff fd0a 	bl	80008ba <lcd_send_string>
				HAL_Delay(500);
 8000ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eaa:	f000 fcff 	bl	80018ac <HAL_Delay>
				lcd_clear();
 8000eae:	f7ff fc91 	bl	80007d4 <lcd_clear>

				// Print hold time to UART
				char msg[50];
				sprintf(msg, "Hold Time: %.2f seconds\r\n", holdTime / 1000.0);
 8000eb2:	4b8a      	ldr	r3, [pc, #552]	; (80010dc <main+0x35c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ebe:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80010a8 <main+0x328>
 8000ec2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000ec6:	1d38      	adds	r0, r7, #4
 8000ec8:	ec53 2b15 	vmov	r2, r3, d5
 8000ecc:	4985      	ldr	r1, [pc, #532]	; (80010e4 <main+0x364>)
 8000ece:	f004 ff91 	bl	8005df4 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa03 	bl	80002e0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	1d39      	adds	r1, r7, #4
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee4:	4878      	ldr	r0, [pc, #480]	; (80010c8 <main+0x348>)
 8000ee6:	f003 fe41 	bl	8004b6c <HAL_UART_Transmit>
				//Get Current Time
				currentTime = HAL_GetTick();
 8000eea:	f000 fcd3 	bl	8001894 <HAL_GetTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a7d      	ldr	r2, [pc, #500]	; (80010e8 <main+0x368>)
 8000ef2:	6013      	str	r3, [r2, #0]
				//Get Waiting Time for count
				waitTime = currentTime - tempTime;
 8000ef4:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <main+0x368>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <main+0x36c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	4a7c      	ldr	r2, [pc, #496]	; (80010f0 <main+0x370>)
 8000f00:	6013      	str	r3, [r2, #0]
				char currentMsg[50];
				sprintf(currentMsg, "Current Time: %.2f seconds\r\n", currentTime / 1000.0);
 8000f02:	4b79      	ldr	r3, [pc, #484]	; (80010e8 <main+0x368>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f0e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80010a8 <main+0x328>
 8000f12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000f16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000f1a:	ec53 2b15 	vmov	r2, r3, d5
 8000f1e:	4975      	ldr	r1, [pc, #468]	; (80010f4 <main+0x374>)
 8000f20:	f004 ff68 	bl	8005df4 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)currentMsg, strlen(currentMsg), HAL_MAX_DELAY);
 8000f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f9d9 	bl	80002e0 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3a:	4863      	ldr	r0, [pc, #396]	; (80010c8 <main+0x348>)
 8000f3c:	f003 fe16 	bl	8004b6c <HAL_UART_Transmit>
				char waitMsg[50];
				sprintf(waitMsg, "Wait Time: %.2f seconds\r\n", waitTime / 1000.0);
 8000f40:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <main+0x370>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f4c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80010a8 <main+0x328>
 8000f50:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000f54:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000f58:	ec53 2b15 	vmov	r2, r3, d5
 8000f5c:	4966      	ldr	r1, [pc, #408]	; (80010f8 <main+0x378>)
 8000f5e:	f004 ff49 	bl	8005df4 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)waitMsg, strlen(waitMsg), HAL_MAX_DELAY);
 8000f62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f9ba 	bl	80002e0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f78:	4853      	ldr	r0, [pc, #332]	; (80010c8 <main+0x348>)
 8000f7a:	f003 fdf7 	bl	8004b6c <HAL_UART_Transmit>
				tempTime = currentTime;
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <main+0x368>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a5a      	ldr	r2, [pc, #360]	; (80010ec <main+0x36c>)
 8000f84:	6013      	str	r3, [r2, #0]
				// Check if the dog is near
			if (waitTime/1000.0 < 10){
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <main+0x370>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f92:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80010a8 <main+0x328>
 8000f96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000f9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d513      	bpl.n	8000fd0 <main+0x250>
				count += 1;
 8000fa8:	4b54      	ldr	r3, [pc, #336]	; (80010fc <main+0x37c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b52      	ldr	r3, [pc, #328]	; (80010fc <main+0x37c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(0,0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fc23 	bl	8000802 <lcd_put_cur>
				lcd_send_string("Motion Detected");
 8000fbc:	4848      	ldr	r0, [pc, #288]	; (80010e0 <main+0x360>)
 8000fbe:	f7ff fc7c 	bl	80008ba <lcd_send_string>
				HAL_Delay(500);
 8000fc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc6:	f000 fc71 	bl	80018ac <HAL_Delay>
				lcd_clear();
 8000fca:	f7ff fc03 	bl	80007d4 <lcd_clear>
 8000fce:	e020      	b.n	8001012 <main+0x292>
			}
			// If the dog passes the machine, reset count
			else if(waitTime/1000.0 > 10){
 8000fd0:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <main+0x370>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000fdc:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80010a8 <main+0x328>
 8000fe0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fe4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000fe8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	dd0f      	ble.n	8001012 <main+0x292>
				lcd_put_cur(0,0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fc04 	bl	8000802 <lcd_put_cur>
				lcd_send_string("No Motion");
 8000ffa:	4841      	ldr	r0, [pc, #260]	; (8001100 <main+0x380>)
 8000ffc:	f7ff fc5d 	bl	80008ba <lcd_send_string>
				HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f000 fc52 	bl	80018ac <HAL_Delay>
				lcd_clear();
 8001008:	f7ff fbe4 	bl	80007d4 <lcd_clear>
				count = 0;
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <main+0x37c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			}
			// if the dog waits for 1.22sec(hold time) * count(3) dispense food
			if (count == 3){
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <main+0x37c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b03      	cmp	r3, #3
 8001018:	f47f aee6 	bne.w	8000de8 <main+0x68>
				count = 0;
 800101c:	4b37      	ldr	r3, [pc, #220]	; (80010fc <main+0x37c>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t*)"Dispense Food", 13, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001026:	220d      	movs	r2, #13
 8001028:	4936      	ldr	r1, [pc, #216]	; (8001104 <main+0x384>)
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <main+0x348>)
 800102c:	f003 fd9e 	bl	8004b6c <HAL_UART_Transmit>
				lcd_put_cur(0,0);
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fbe5 	bl	8000802 <lcd_put_cur>
				lcd_send_string("Dispensing Food");
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <main+0x388>)
 800103a:	f7ff fc3e 	bl	80008ba <lcd_send_string>
				//5V stepper motor
				  for (int step = 0; step < stepsperrev; step++) {
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001044:	e013      	b.n	800106e <main+0x2ee>
					          stepper_half_drive(step % 8);
 8001046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800104a:	425a      	negs	r2, r3
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	f002 0207 	and.w	r2, r2, #7
 8001054:	bf58      	it	pl
 8001056:	4253      	negpl	r3, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fdc7 	bl	8000bec <stepper_half_drive>
					          stepper_set_rpm(13);  // Set the desired RPM
 800105e:	200d      	movs	r0, #13
 8001060:	f7ff fdb2 	bl	8000bc8 <stepper_set_rpm>
				  for (int step = 0; step < stepsperrev; step++) {
 8001064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001068:	3301      	adds	r3, #1
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800106e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001076:	dbe6      	blt.n	8001046 <main+0x2c6>
					      }
				  lcd_clear();
 8001078:	f7ff fbac 	bl	80007d4 <lcd_clear>
 800107c:	e6b4      	b.n	8000de8 <main+0x68>
			}
		  }
	  }
	  else {
	      // No motion detected or distance >= 10
	      HAL_UART_Transmit(&huart3, (uint8_t*) "No Food\r\n", 9, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001082:	2209      	movs	r2, #9
 8001084:	4921      	ldr	r1, [pc, #132]	; (800110c <main+0x38c>)
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <main+0x348>)
 8001088:	f003 fd70 	bl	8004b6c <HAL_UART_Transmit>
	      lcd_put_cur(0,0);
 800108c:	2100      	movs	r1, #0
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fbb7 	bl	8000802 <lcd_put_cur>
	      lcd_send_string("No Food");
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <main+0x390>)
 8001096:	f7ff fc10 	bl	80008ba <lcd_send_string>
	      HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109e:	f000 fc05 	bl	80018ac <HAL_Delay>
	      lcd_clear();
 80010a2:	f7ff fb97 	bl	80007d4 <lcd_clear>
  {
 80010a6:	e69f      	b.n	8000de8 <main+0x68>
 80010a8:	00000000 	.word	0x00000000
 80010ac:	408f4000 	.word	0x408f4000
 80010b0:	20000274 	.word	0x20000274
 80010b4:	200002c0 	.word	0x200002c0
 80010b8:	08008118 	.word	0x08008118
 80010bc:	08008128 	.word	0x08008128
 80010c0:	2000026d 	.word	0x2000026d
 80010c4:	08008138 	.word	0x08008138
 80010c8:	2000030c 	.word	0x2000030c
 80010cc:	40020800 	.word	0x40020800
 80010d0:	2000024c 	.word	0x2000024c
 80010d4:	20000244 	.word	0x20000244
 80010d8:	40020400 	.word	0x40020400
 80010dc:	20000248 	.word	0x20000248
 80010e0:	08008140 	.word	0x08008140
 80010e4:	08008150 	.word	0x08008150
 80010e8:	20000250 	.word	0x20000250
 80010ec:	20000258 	.word	0x20000258
 80010f0:	20000254 	.word	0x20000254
 80010f4:	0800816c 	.word	0x0800816c
 80010f8:	0800818c 	.word	0x0800818c
 80010fc:	2000025c 	.word	0x2000025c
 8001100:	080081a8 	.word	0x080081a8
 8001104:	080081b4 	.word	0x080081b4
 8001108:	080081c4 	.word	0x080081c4
 800110c:	080081d4 	.word	0x080081d4
 8001110:	080081e0 	.word	0x080081e0

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2234      	movs	r2, #52	; 0x34
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f004 ff36 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <SystemClock_Config+0xd4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a2a      	ldr	r2, [pc, #168]	; (80011e8 <SystemClock_Config+0xd4>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <SystemClock_Config+0xd4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <SystemClock_Config+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <SystemClock_Config+0xd8>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001180:	23d8      	movs	r3, #216	; 0xd8
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fb53 	bl	8002840 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011a0:	f000 f826 	bl	80011f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011a4:	f001 fafc 	bl	80027a0 <HAL_PWREx_EnableOverDrive>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ae:	f000 f81f 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2107      	movs	r1, #7
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fde3 	bl	8002d9c <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80011dc:	f000 f808 	bl	80011f0 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 faec 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM1_CC_IRQHandler+0x10>)
 800129e:	f002 fdfb 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000274 	.word	0x20000274

080012ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_kill>:

int _kill(int pid, int sig)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c6:	f004 fe71 	bl	8005fac <__errno>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2216      	movs	r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
  return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_exit>:

void _exit (int status)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffe7 	bl	80012bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ee:	e7fe      	b.n	80012ee <_exit+0x12>

080012f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e009      	b.n	8001350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf1      	blt.n	800133c <_write+0x12>
  }
  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_close>:

int _close(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138a:	605a      	str	r2, [r3, #4]
  return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f004 fdd6 	bl	8005fac <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20080000 	.word	0x20080000
 800142c:	00000400 	.word	0x00000400
 8001430:	20000270 	.word	0x20000270
 8001434:	200004e8 	.word	0x200004e8

08001438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MX_TIM1_Init+0xac>)
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <MX_TIM1_Init+0xb0>)
 800147e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_TIM1_Init+0xac>)
 8001482:	22d7      	movs	r2, #215	; 0xd7
 8001484:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MX_TIM1_Init+0xac>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_TIM1_Init+0xac>)
 800148e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_TIM1_Init+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_TIM1_Init+0xac>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM1_Init+0xac>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014a6:	4818      	ldr	r0, [pc, #96]	; (8001508 <MX_TIM1_Init+0xac>)
 80014a8:	f002 fb4e 	bl	8003b48 <HAL_TIM_IC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80014b2:	f7ff fe9d 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <MX_TIM1_Init+0xac>)
 80014ca:	f003 fa55 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f7ff fe8c 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM1_Init+0xac>)
 80014f0:	f002 fdd9 	bl	80040a6 <HAL_TIM_IC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80014fa:	f7ff fe79 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000274 	.word	0x20000274
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001538:	22d7      	movs	r2, #215	; 0xd7
 800153a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM2_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001544:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_TIM2_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001558:	f002 fa2e 	bl	80039b8 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001562:	f7ff fe45 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001574:	f002 fe34 	bl	80041e0 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800157e:	f7ff fe37 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM2_Init+0x98>)
 8001590:	f003 f9f2 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800159a:	f7ff fe29 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002c0 	.word	0x200002c0

080015ac <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_TIM_IC_MspInit+0x8c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d130      	bne.n	8001630 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_TIM_IC_MspInit+0x90>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_TIM_IC_MspInit+0x94>)
 800161c:	f000 fa7c 	bl	8001b18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	201b      	movs	r0, #27
 8001626:	f000 fa40 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800162a:	201b      	movs	r0, #27
 800162c:	f000 fa59 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40010000 	.word	0x40010000
 800163c:	40023800 	.word	0x40023800
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d10b      	bne.n	800166e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0x38>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_TIM_Base_MspInit+0x38>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_TIM_Base_MspInit+0x38>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <MX_USART3_UART_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART3_UART_Init+0x58>)
 80016c4:	f003 fa04 	bl	8004ad0 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016ce:	f7ff fd8f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000030c 	.word	0x2000030c
 80016dc:	40004800 	.word	0x40004800

080016e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ae      	sub	sp, #184	; 0xb8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2290      	movs	r2, #144	; 0x90
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fc47 	bl	8005f94 <memset>
  if(uartHandle->Instance==USART3)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_UART_MspInit+0xb4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13c      	bne.n	800178a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001714:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001716:	2300      	movs	r3, #0
 8001718:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fd22 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800172a:	f7ff fd61 	bl	80011f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_MspInit+0xb8>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_UART_MspInit+0xb8>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800175e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001778:	2307      	movs	r3, #7
 800177a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_UART_MspInit+0xbc>)
 8001786:	f000 f9c7 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	37b8      	adds	r7, #184	; 0xb8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004800 	.word	0x40004800
 8001798:	40023800 	.word	0x40023800
 800179c:	40020c00 	.word	0x40020c00

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a4:	f7ff fe48 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f004 fbf3 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fad5 	bl	8000d80 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e4:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 80017e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017ec:	200004e4 	.word	0x200004e4

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>

080017f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f94c 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fc:	200f      	movs	r0, #15
 80017fe:	f000 f805 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001802:	f7ff fcfb 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f967 	bl	8001afe <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001848:	f000 f92f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	20000394 	.word	0x20000394

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000394 	.word	0x20000394

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e175      	b.n	8001e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8164 	bne.w	8001e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d005      	beq.n	8001b6e <HAL_GPIO_Init+0x56>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d017      	beq.n	8001c0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d123      	bne.n	8001c60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	69b9      	ldr	r1, [r7, #24]
 8001c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80be 	beq.w	8001e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cba:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_GPIO_Init+0x328>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x32c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d037      	beq.n	8001d56 <HAL_GPIO_Init+0x23e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_GPIO_Init+0x23a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x334>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02b      	beq.n	8001d4e <HAL_GPIO_Init+0x236>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_GPIO_Init+0x338>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d025      	beq.n	8001d4a <HAL_GPIO_Init+0x232>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_GPIO_Init+0x33c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01f      	beq.n	8001d46 <HAL_GPIO_Init+0x22e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_GPIO_Init+0x340>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d019      	beq.n	8001d42 <HAL_GPIO_Init+0x22a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x344>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x226>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_GPIO_Init+0x348>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x222>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_GPIO_Init+0x34c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x21e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001d2e:	2309      	movs	r3, #9
 8001d30:	e012      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d32:	230a      	movs	r3, #10
 8001d34:	e010      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00e      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x328>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f ae86 	bls.w	8001b38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40022400 	.word	0x40022400
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e001      	b.n	8001e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e08b      	b.n	8001ffe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd32 	bl	8000964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d108      	bne.n	8001f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	e007      	b.n	8001f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_I2C_Init+0x134>)
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69d9      	ldr	r1, [r3, #28]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	02008000 	.word	0x02008000

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b20      	cmp	r3, #32
 800202a:	f040 80fd 	bne.w	8002228 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x30>
 8002038:	2302      	movs	r3, #2
 800203a:	e0f6      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002044:	f7ff fc26 	bl	8001894 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f914 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0e1      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2210      	movs	r2, #16
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	d906      	bls.n	80020a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	22ff      	movs	r2, #255	; 0xff
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800209e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e007      	b.n	80020b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d024      	beq.n	8002108 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <HAL_I2C_Master_Transmit+0x228>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa83 	bl	800260c <I2C_TransferConfig>
 8002106:	e066      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	b2da      	uxtb	r2, r3
 800210e:	8979      	ldrh	r1, [r7, #10]
 8002110:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_I2C_Master_Transmit+0x228>)
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa78 	bl	800260c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800211c:	e05b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f907 	bl	8002336 <I2C_WaitOnTXISFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07b      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d034      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d130      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f880 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e04d      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	2bff      	cmp	r3, #255	; 0xff
 8002196:	d90e      	bls.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa2c 	bl	800260c <I2C_TransferConfig>
 80021b4:	e00f      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	8979      	ldrh	r1, [r7, #10]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fa1b 	bl	800260c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d19e      	bne.n	800211e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	6a39      	ldr	r1, [r7, #32]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f8ed 	bl	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01a      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_I2C_Master_Transmit+0x22c>)
 8002208:	400b      	ands	r3, r1
 800220a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	80002000 	.word	0x80002000
 8002238:	fe00e800 	.word	0xfe00e800

0800223c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d103      	bne.n	800225a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d007      	beq.n	8002278 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	619a      	str	r2, [r3, #24]
  }
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002294:	e03b      	b.n	800230e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f8d6 	bl	800244c <I2C_IsErrorOccurred>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e041      	b.n	800232e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b0:	d02d      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7ff faef 	bl	8001894 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d122      	bne.n	800230e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4013      	ands	r3, r2
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d113      	bne.n	800230e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4013      	ands	r3, r2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d0b4      	beq.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002342:	e033      	b.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f87f 	bl	800244c <I2C_IsErrorOccurred>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e031      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235e:	d025      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7ff fa98 	bl	8001894 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11a      	bne.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d013      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d1c4      	bne.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	e02f      	b.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f838 	bl	800244c <I2C_IsErrorOccurred>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e02d      	b.n	8002442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff fa55 	bl	8001894 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11a      	bne.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b20      	cmp	r3, #32
 8002408:	d013      	beq.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d1c8      	bne.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d068      	beq.n	800254a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2210      	movs	r2, #16
 800247e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002480:	e049      	b.n	8002516 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002488:	d045      	beq.n	8002516 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7ff fa03 	bl	8001894 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_IsErrorOccurred+0x54>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d13a      	bne.n	8002516 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c2:	d121      	bne.n	8002508 <I2C_IsErrorOccurred+0xbc>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ca:	d01d      	beq.n	8002508 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d01a      	beq.n	8002508 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024e2:	f7ff f9d7 	bl	8001894 <HAL_GetTick>
 80024e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e8:	e00e      	b.n	8002508 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024ea:	f7ff f9d3 	bl	8001894 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b19      	cmp	r3, #25
 80024f6:	d907      	bls.n	8002508 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002506:	e006      	b.n	8002516 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d1e9      	bne.n	80024ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d003      	beq.n	800252c <I2C_IsErrorOccurred+0xe0>
 8002524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0aa      	beq.n	8002482 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800252c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2220      	movs	r2, #32
 800253a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fe3b 	bl	800223c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <I2C_IsErrorOccurred+0x1bc>)
 80025d2:	400b      	ands	r3, r1
 80025d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	fe00e800 	.word	0xfe00e800

0800260c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	4613      	mov	r3, r2
 800261c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002624:	7a7b      	ldrb	r3, [r7, #9]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800262c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	4313      	orrs	r3, r2
 8002636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800263a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	0d5b      	lsrs	r3, r3, #21
 8002646:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <I2C_TransferConfig+0x60>)
 800264c:	430b      	orrs	r3, r1
 800264e:	43db      	mvns	r3, r3
 8002650:	ea02 0103 	and.w	r1, r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	03ff63ff 	.word	0x03ff63ff

08002670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	d138      	bne.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002690:	2302      	movs	r3, #2
 8002692:	e032      	b.n	80026fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b20      	cmp	r3, #32
 800271a:	d139      	bne.n	8002790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002726:	2302      	movs	r3, #2
 8002728:	e033      	b.n	8002792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2224      	movs	r2, #36	; 0x24
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_PWREx_EnableOverDrive+0x98>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_PWREx_EnableOverDrive+0x98>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_PWREx_EnableOverDrive+0x98>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ce:	f7ff f861 	bl	8001894 <HAL_GetTick>
 80027d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027d4:	e009      	b.n	80027ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027d6:	f7ff f85d 	bl	8001894 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e4:	d901      	bls.n	80027ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e022      	b.n	8002830 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d1ee      	bne.n	80027d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002802:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7ff f846 	bl	8001894 <HAL_GetTick>
 8002808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800280a:	e009      	b.n	8002820 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800280c:	f7ff f842 	bl	8001894 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281a:	d901      	bls.n	8002820 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e007      	b.n	8002830 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800282c:	d1ee      	bne.n	800280c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	40007000 	.word	0x40007000

08002840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e29b      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002864:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00c      	beq.n	800288a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002870:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d112      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62>
 800287c:	4b90      	ldr	r3, [pc, #576]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b8d      	ldr	r3, [pc, #564]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x130>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e275      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x7a>
 80028ac:	4b84      	ldr	r3, [pc, #528]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a83      	ldr	r2, [pc, #524]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x9c>
 80028c2:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7e      	ldr	r2, [pc, #504]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b7c      	ldr	r3, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7b      	ldr	r2, [pc, #492]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xc0>
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd8>
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6b      	ldr	r2, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe ffb8 	bl	8001894 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe ffb4 	bl	8001894 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e229      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe8>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe ffa4 	bl	8001894 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe ffa0 	bl	8001894 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e215      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x110>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d069      	beq.n	8002a52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x190>
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x17a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1e9      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	493d      	ldr	r1, [pc, #244]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e040      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff56 	bl	8001894 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe ff52 	bl	8001894 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1c7      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4929      	ldr	r1, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
 8002a1e:	e018      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe ff32 	bl	8001894 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe ff2e 	bl	8001894 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1a3      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d038      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d019      	beq.n	8002a9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe ff0f 	bl	8001894 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe ff0b 	bl	8001894 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e180      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x23a>
 8002a98:	e01a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fef5 	bl	8001894 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe fef1 	bl	8001894 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d903      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e166      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
 8002ac0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a4 	beq.w	8002c26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a88      	ldr	r2, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b86      	ldr	r3, [pc, #536]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d118      	bne.n	8002b44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b12:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7f      	ldr	r2, [pc, #508]	; (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe feb9 	bl	8001894 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fe feb5 	bl	8001894 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e12a      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x4d4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x31a>
 8002b4c:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a6f      	ldr	r2, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e02d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x33c>
 8002b62:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b68      	ldr	r3, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	e01c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x35e>
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a5e      	ldr	r2, [pc, #376]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d015      	beq.n	8002bea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fe69 	bl	8001894 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fe65 	bl	8001894 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0d8      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x386>
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fe fe53 	bl	8001894 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fe4f 	bl	8001894 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0c2      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a3c      	ldr	r2, [pc, #240]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80ae 	beq.w	8002d8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d06d      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d14b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fe20 	bl	8001894 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fe1c 	bl	8001894 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e091      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fdee 	bl	8001894 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fdea 	bl	8001894 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e05f      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x47c>
 8002cda:	e057      	b.n	8002d8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fdd4 	bl	8001894 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fdd0 	bl	8001894 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e045      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4b0>
 8002d0e:	e03d      	b.n	8002d8c <HAL_RCC_OscConfig+0x54c>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_RCC_OscConfig+0x558>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d129      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d122      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d119      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10f      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	4965      	ldr	r1, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fd00 	bl	8001894 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fcfc 	bl	8001894 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	4922      	ldr	r1, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1d0>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fc5c 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080081e8 	.word	0x080081e8
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b090      	sub	sp, #64	; 0x40
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f80:	2300      	movs	r3, #0
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f84:	2300      	movs	r3, #0
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80a1 	bhi.w	80030e0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e09b      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fac:	e09b      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fb2:	e098      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	623b      	str	r3, [r7, #32]
 8002fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fe0:	fb03 f201 	mul.w	r2, r3, r1
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	4a43      	ldr	r2, [pc, #268]	; (80030fc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fee:	fba0 1202 	umull	r1, r2, r0, r2
 8002ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffa:	4413      	add	r3, r2
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	2200      	movs	r2, #0
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	61fa      	str	r2, [r7, #28]
 8003006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800300e:	f7fd f96f 	bl	80002f0 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4613      	mov	r3, r2
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	e053      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301c:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	2200      	movs	r2, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	617a      	str	r2, [r7, #20]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800302e:	f04f 0b00 	mov.w	fp, #0
 8003032:	4652      	mov	r2, sl
 8003034:	465b      	mov	r3, fp
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	0159      	lsls	r1, r3, #5
 8003040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003044:	0150      	lsls	r0, r2, #5
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	ebb2 080a 	subs.w	r8, r2, sl
 800304e:	eb63 090b 	sbc.w	r9, r3, fp
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800305e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003066:	ebb2 0408 	subs.w	r4, r2, r8
 800306a:	eb63 0509 	sbc.w	r5, r3, r9
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	00eb      	lsls	r3, r5, #3
 8003078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307c:	00e2      	lsls	r2, r4, #3
 800307e:	4614      	mov	r4, r2
 8003080:	461d      	mov	r5, r3
 8003082:	eb14 030a 	adds.w	r3, r4, sl
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	eb45 030b 	adc.w	r3, r5, fp
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309a:	4629      	mov	r1, r5
 800309c:	028b      	lsls	r3, r1, #10
 800309e:	4621      	mov	r1, r4
 80030a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a4:	4621      	mov	r1, r4
 80030a6:	028a      	lsls	r2, r1, #10
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	2200      	movs	r2, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b8:	f7fd f91a 	bl	80002f0 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4613      	mov	r3, r2
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80030d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030de:	e002      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3740      	adds	r7, #64	; 0x40
 80030ec:	46bd      	mov	sp, r7
 80030ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	017d7840 	.word	0x017d7840

08003100 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff0 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	080081f8 	.word	0x080081f8

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003144:	f7ff ffdc 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0b5b      	lsrs	r3, r3, #13
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	080081f8 	.word	0x080081f8

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003190:	4b69      	ldr	r3, [pc, #420]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a68      	ldr	r2, [pc, #416]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	4b66      	ldr	r3, [pc, #408]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	4964      	ldr	r1, [pc, #400]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d017      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c2:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	4959      	ldr	r1, [pc, #356]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d017      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031fe:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	494a      	ldr	r1, [pc, #296]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 808b 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	6413      	str	r3, [r2, #64]	; 0x40
 8003258:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003264:	4b35      	ldr	r3, [pc, #212]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fe fb10 	bl	8001894 <HAL_GetTick>
 8003274:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003278:	f7fe fb0c 	bl	8001894 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e38f      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800328a:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003296:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d035      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d02e      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d114      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fad4 	bl	8001894 <HAL_GetTick>
 80032ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fad0 	bl	8001894 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e351      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ee      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331e:	d111      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800332e:	400b      	ands	r3, r1
 8003330:	4901      	ldr	r1, [pc, #4]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
 8003340:	0ffffcff 	.word	0x0ffffcff
 8003344:	4bac      	ldr	r3, [pc, #688]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4aab      	ldr	r2, [pc, #684]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800334e:	6093      	str	r3, [r2, #8]
 8003350:	4ba9      	ldr	r3, [pc, #676]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	49a6      	ldr	r1, [pc, #664]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	4313      	orrs	r3, r2
 8003360:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d010      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800336e:	4ba2      	ldr	r3, [pc, #648]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003374:	4aa0      	ldr	r2, [pc, #640]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800337e:	4b9e      	ldr	r3, [pc, #632]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003380:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	499b      	ldr	r1, [pc, #620]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033aa:	4993      	ldr	r1, [pc, #588]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033be:	4b8e      	ldr	r3, [pc, #568]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033cc:	498a      	ldr	r1, [pc, #552]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e0:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ee:	4982      	ldr	r1, [pc, #520]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003402:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4979      	ldr	r1, [pc, #484]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4971      	ldr	r1, [pc, #452]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f023 020c 	bic.w	r2, r3, #12
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003454:	4968      	ldr	r1, [pc, #416]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003468:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	4960      	ldr	r1, [pc, #384]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003498:	4957      	ldr	r1, [pc, #348]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ac:	4b52      	ldr	r3, [pc, #328]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	494f      	ldr	r1, [pc, #316]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4946      	ldr	r1, [pc, #280]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	493e      	ldr	r1, [pc, #248]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003518:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003542:	492d      	ldr	r1, [pc, #180]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003564:	4924      	ldr	r1, [pc, #144]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c8:	490b      	ldr	r1, [pc, #44]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	4902      	ldr	r1, [pc, #8]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035f4:	e002      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003608:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	4986      	ldr	r1, [pc, #536]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800362c:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800362e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003632:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363c:	497d      	ldr	r1, [pc, #500]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d006      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80d6 	beq.w	8003804 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003658:	4b76      	ldr	r3, [pc, #472]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a75      	ldr	r2, [pc, #468]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fe f916 	bl	8001894 <HAL_GetTick>
 8003668:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800366c:	f7fe f912 	bl	8001894 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e195      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800367e:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d021      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800369e:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	0e1b      	lsrs	r3, r3, #24
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	019a      	lsls	r2, r3, #6
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	071b      	lsls	r3, r3, #28
 80036d2:	4958      	ldr	r1, [pc, #352]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003704:	d129      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003714:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371a:	0f1b      	lsrs	r3, r3, #28
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	019a      	lsls	r2, r3, #6
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	493e      	ldr	r1, [pc, #248]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003748:	f023 021f 	bic.w	r2, r3, #31
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	3b01      	subs	r3, #1
 8003752:	4938      	ldr	r1, [pc, #224]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01d      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003766:	4b33      	ldr	r3, [pc, #204]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	0e1b      	lsrs	r3, r3, #24
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0f1b      	lsrs	r3, r3, #28
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	019a      	lsls	r2, r3, #6
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	4926      	ldr	r1, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d011      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	019a      	lsls	r2, r3, #6
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	071b      	lsls	r3, r3, #28
 80037ca:	491a      	ldr	r1, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fe f859 	bl	8001894 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037e6:	f7fe f855 	bl	8001894 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	; 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0d8      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 80ce 	bne.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a08      	ldr	r2, [pc, #32]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fe f83c 	bl	8001894 <HAL_GetTick>
 800381c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800381e:	e00b      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003820:	f7fe f838 	bl	8001894 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d904      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0bb      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003844:	d0ec      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800387c:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	0f1b      	lsrs	r3, r3, #28
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	019a      	lsls	r2, r3, #6
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	4944      	ldr	r1, [pc, #272]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d022      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d8:	d11d      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4929      	ldr	r1, [pc, #164]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d028      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	431a      	orrs	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	4917      	ldr	r1, [pc, #92]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4911      	ldr	r1, [pc, #68]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003980:	f7fd ff88 	bl	8001894 <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003988:	f7fd ff84 	bl	8001894 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e007      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a6:	d1ef      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e049      	b.n	8003a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fe30 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fd28 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d001      	beq.n	8003a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04c      	b.n	8003b1a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <HAL_TIM_Base_Start+0xc0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d022      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d01d      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <HAL_TIM_Base_Start+0xc4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d018      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_TIM_Base_Start+0xc8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_TIM_Base_Start+0xcc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_TIM_Base_Start+0xd0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_TIM_Base_Start+0xd4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_Base_Start+0x70>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_TIM_Base_Start+0xd8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d115      	bne.n	8003b04 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start+0xdc>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d015      	beq.n	8003b16 <HAL_TIM_Base_Start+0xae>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d011      	beq.n	8003b16 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	e008      	b.n	8003b16 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e000      	b.n	8003b18 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40010400 	.word	0x40010400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800
 8003b44:	00010007 	.word	0x00010007

08003b48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e049      	b.n	8003bee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fd1c 	bl	80015ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fc60 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_IC_Start_IT+0x1e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e023      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x66>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_IC_Start_IT+0x2e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e01b      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x66>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_IC_Start_IT+0x3e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e013      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x66>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_IC_Start_IT+0x4e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e00b      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x66>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_IC_Start_IT+0x5e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	e003      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x66>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_TIM_IC_Start_IT+0x78>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e013      	b.n	8003c98 <HAL_TIM_IC_Start_IT+0xa0>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d104      	bne.n	8003c80 <HAL_TIM_IC_Start_IT+0x88>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e00b      	b.n	8003c98 <HAL_TIM_IC_Start_IT+0xa0>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d104      	bne.n	8003c90 <HAL_TIM_IC_Start_IT+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e003      	b.n	8003c98 <HAL_TIM_IC_Start_IT+0xa0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d102      	bne.n	8003ca6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ca0:	7b7b      	ldrb	r3, [r7, #13]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0e2      	b.n	8003e70 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_IC_Start_IT+0xc2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x10a>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_IC_Start_IT+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	e01b      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x10a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_IC_Start_IT+0xe2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	e013      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x10a>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_IC_Start_IT+0xf2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x10a>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_IC_Start_IT+0x102>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	e003      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x10a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_IC_Start_IT+0x11a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d10:	e013      	b.n	8003d3a <HAL_TIM_IC_Start_IT+0x142>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_IC_Start_IT+0x12a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d20:	e00b      	b.n	8003d3a <HAL_TIM_IC_Start_IT+0x142>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_IC_Start_IT+0x13a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d30:	e003      	b.n	8003d3a <HAL_TIM_IC_Start_IT+0x142>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d841      	bhi.n	8003dc4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <HAL_TIM_IC_Start_IT+0x150>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003dc5 	.word	0x08003dc5
 8003d50:	08003dc5 	.word	0x08003dc5
 8003d54:	08003dc5 	.word	0x08003dc5
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	08003da1 	.word	0x08003da1
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003db3 	.word	0x08003db3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0202 	orr.w	r2, r2, #2
 8003d8a:	60da      	str	r2, [r3, #12]
      break;
 8003d8c:	e01d      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	60da      	str	r2, [r3, #12]
      break;
 8003d9e:	e014      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0208 	orr.w	r2, r2, #8
 8003dae:	60da      	str	r2, [r3, #12]
      break;
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0210 	orr.w	r2, r2, #16
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d14e      	bne.n	8003e6e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fda7 	bl	800492c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <HAL_TIM_IC_Start_IT+0x280>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d01d      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <HAL_TIM_IC_Start_IT+0x284>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_TIM_IC_Start_IT+0x288>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <HAL_TIM_IC_Start_IT+0x28c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <HAL_TIM_IC_Start_IT+0x290>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <HAL_TIM_IC_Start_IT+0x294>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0x236>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_TIM_IC_Start_IT+0x298>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d115      	bne.n	8003e5a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_TIM_IC_Start_IT+0x29c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d015      	beq.n	8003e6c <HAL_TIM_IC_Start_IT+0x274>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d011      	beq.n	8003e6c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e58:	e008      	b.n	8003e6c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e000      	b.n	8003e6e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40001800 	.word	0x40001800
 8003e94:	00010007 	.word	0x00010007

08003e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0202 	mvn.w	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc fdb8 	bl	8000a58 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fa90 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fa97 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0204 	mvn.w	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fd92 	bl	8000a58 <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa6a 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa71 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0208 	mvn.w	r2, #8
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fd6c 	bl	8000a58 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa44 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa4b 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fd46 	bl	8000a58 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa1e 	bl	8004410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa25 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9fc 	bl	80043fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fd3b 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fd33 	bl	8004abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9df 	bl	8004438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0220 	mvn.w	r2, #32
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fcfb 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e088      	b.n	80041d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11b      	bne.n	800410a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040e2:	f000 fa5f 	bl	80045a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 020c 	bic.w	r2, r2, #12
 80040f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6999      	ldr	r1, [r3, #24]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	619a      	str	r2, [r3, #24]
 8004108:	e060      	b.n	80041cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d11c      	bne.n	800414a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004120:	f000 fae3 	bl	80046ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004132:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	e040      	b.n	80041cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004160:	f000 fb30 	bl	80047c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 020c 	bic.w	r2, r2, #12
 8004172:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69d9      	ldr	r1, [r3, #28]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	61da      	str	r2, [r3, #28]
 8004186:	e021      	b.n	80041cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d11c      	bne.n	80041c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800419e:	f000 fb4d 	bl	800483c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	021a      	lsls	r2, r3, #8
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	61da      	str	r2, [r3, #28]
 80041c6:	e001      	b.n	80041cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_ConfigClockSource+0x1c>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0b4      	b.n	8004366 <HAL_TIM_ConfigClockSource+0x186>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4b56      	ldr	r3, [pc, #344]	; (8004370 <HAL_TIM_ConfigClockSource+0x190>)
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004234:	d03e      	beq.n	80042b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	f200 8087 	bhi.w	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	f000 8086 	beq.w	8004352 <HAL_TIM_ConfigClockSource+0x172>
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d87f      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b70      	cmp	r3, #112	; 0x70
 800424e:	d01a      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0xa6>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d87b      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004254:	2b60      	cmp	r3, #96	; 0x60
 8004256:	d050      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x11a>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d877      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b50      	cmp	r3, #80	; 0x50
 800425e:	d03c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xfa>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d873      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d058      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x13a>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d86f      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d064      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d86b      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b20      	cmp	r3, #32
 8004276:	d060      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d867      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05c      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004280:	2b10      	cmp	r3, #16
 8004282:	d05a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x15a>
 8004284:	e062      	b.n	800434c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004296:	f000 fb29 	bl	80048ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]
      break;
 80042b2:	e04f      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042c4:	f000 fb12 	bl	80048ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d6:	609a      	str	r2, [r3, #8]
      break;
 80042d8:	e03c      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	461a      	mov	r2, r3
 80042e8:	f000 f9d0 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2150      	movs	r1, #80	; 0x50
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fadf 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 80042f8:	e02c      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004306:	461a      	mov	r2, r3
 8004308:	f000 fa2c 	bl	8004764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2160      	movs	r1, #96	; 0x60
 8004312:	4618      	mov	r0, r3
 8004314:	f000 facf 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 8004318:	e01c      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f9b0 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fabf 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 8004338:	e00c      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fab6 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800434a:	e003      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e000      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	fffeff88 	.word	0xfffeff88

08004374 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d831      	bhi.n	80043ec <HAL_TIM_ReadCapturedValue+0x78>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <HAL_TIM_ReadCapturedValue+0x1c>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043ed 	.word	0x080043ed
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	080043ed 	.word	0x080043ed
 80043bc:	080043ed 	.word	0x080043ed
 80043c0:	080043e3 	.word	0x080043e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	60fb      	str	r3, [r7, #12]

      break;
 80043cc:	e00f      	b.n	80043ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	60fb      	str	r3, [r7, #12]

      break;
 80043d6:	e00a      	b.n	80043ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	60fb      	str	r3, [r7, #12]

      break;
 80043e0:	e005      	b.n	80043ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	60fb      	str	r3, [r7, #12]

      break;
 80043ea:	e000      	b.n	80043ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043ec:	bf00      	nop
  }

  return tmpreg;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a46      	ldr	r2, [pc, #280]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a43      	ldr	r2, [pc, #268]	; (800457c <TIM_Base_SetConfig+0x130>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a42      	ldr	r2, [pc, #264]	; (8004580 <TIM_Base_SetConfig+0x134>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a41      	ldr	r2, [pc, #260]	; (8004584 <TIM_Base_SetConfig+0x138>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a35      	ldr	r2, [pc, #212]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d027      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a32      	ldr	r2, [pc, #200]	; (800457c <TIM_Base_SetConfig+0x130>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d023      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a31      	ldr	r2, [pc, #196]	; (8004580 <TIM_Base_SetConfig+0x134>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a30      	ldr	r2, [pc, #192]	; (8004584 <TIM_Base_SetConfig+0x138>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2e      	ldr	r2, [pc, #184]	; (800458c <TIM_Base_SetConfig+0x140>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <TIM_Base_SetConfig+0x144>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <TIM_Base_SetConfig+0x148>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <TIM_Base_SetConfig+0x14c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2a      	ldr	r2, [pc, #168]	; (800459c <TIM_Base_SetConfig+0x150>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0x154>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]
  }
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800
 8004598:	40001800 	.word	0x40001800
 800459c:	40001c00 	.word	0x40001c00
 80045a0:	40002000 	.word	0x40002000

080045a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f023 0201 	bic.w	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a28      	ldr	r2, [pc, #160]	; (8004670 <TIM_TI1_SetConfig+0xcc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01b      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d017      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a25      	ldr	r2, [pc, #148]	; (8004674 <TIM_TI1_SetConfig+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a24      	ldr	r2, [pc, #144]	; (8004678 <TIM_TI1_SetConfig+0xd4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00f      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a23      	ldr	r2, [pc, #140]	; (800467c <TIM_TI1_SetConfig+0xd8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <TIM_TI1_SetConfig+0xdc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <TIM_TI1_SetConfig+0xe0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_TI1_SetConfig+0x66>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <TIM_TI1_SetConfig+0xe4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <TIM_TI1_SetConfig+0x6a>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <TIM_TI1_SetConfig+0x6c>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e003      	b.n	800462e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	b2db      	uxtb	r3, r3
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 030a 	bic.w	r3, r3, #10
 8004648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 030a 	and.w	r3, r3, #10
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 030a 	bic.w	r3, r3, #10
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b087      	sub	sp, #28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f023 0210 	bic.w	r2, r3, #16
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	031b      	lsls	r3, r3, #12
 800472e:	b29b      	uxth	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800473c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0210 	bic.w	r2, r3, #16
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	031b      	lsls	r3, r3, #12
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 0303 	bic.w	r3, r3, #3
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004800:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	b2db      	uxtb	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	031b      	lsls	r3, r3, #12
 8004880:	b29b      	uxth	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800488e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	031b      	lsls	r3, r3, #12
 8004894:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f043 0307 	orr.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	431a      	orrs	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e06d      	b.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d01d      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e040      	b.n	8004b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fdf4 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fb16 	bl	8005148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8af 	bl	8004c80 <UART_SetConfig>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e01b      	b.n	8004b64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb95 	bl	800528c <UART_CheckIdleState>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d177      	bne.n	8004c74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x24>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e070      	b.n	8004c76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2221      	movs	r2, #33	; 0x21
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba2:	f7fc fe77 	bl	8001894 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d108      	bne.n	8004bd4 <HAL_UART_Transmit+0x68>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e003      	b.n	8004bdc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bdc:	e02f      	b.n	8004c3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fbf7 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e03b      	b.n	8004c76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	3302      	adds	r3, #2
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e007      	b.n	8004c2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1c9      	bne.n	8004bde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2140      	movs	r1, #64	; 0x40
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fbc1 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e005      	b.n	8004c76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4ba6      	ldr	r3, [pc, #664]	; (8004f44 <UART_SetConfig+0x2c4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	6979      	ldr	r1, [r7, #20]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a94      	ldr	r2, [pc, #592]	; (8004f48 <UART_SetConfig+0x2c8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d120      	bne.n	8004d3e <UART_SetConfig+0xbe>
 8004cfc:	4b93      	ldr	r3, [pc, #588]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d816      	bhi.n	8004d38 <UART_SetConfig+0xb8>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x90>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d2d 	.word	0x08004d2d
 8004d18:	08004d27 	.word	0x08004d27
 8004d1c:	08004d33 	.word	0x08004d33
 8004d20:	2301      	movs	r3, #1
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e150      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d26:	2302      	movs	r3, #2
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e14d      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e14a      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d32:	2308      	movs	r3, #8
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e147      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e144      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a83      	ldr	r2, [pc, #524]	; (8004f50 <UART_SetConfig+0x2d0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d132      	bne.n	8004dae <UART_SetConfig+0x12e>
 8004d48:	4b80      	ldr	r3, [pc, #512]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d828      	bhi.n	8004da8 <UART_SetConfig+0x128>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0xdc>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004da9 	.word	0x08004da9
 8004d64:	08004da9 	.word	0x08004da9
 8004d68:	08004da9 	.word	0x08004da9
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004d97 	.word	0x08004d97
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004da9 	.word	0x08004da9
 8004d8c:	08004da3 	.word	0x08004da3
 8004d90:	2300      	movs	r3, #0
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e118      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d96:	2302      	movs	r3, #2
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e115      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e112      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004da2:	2308      	movs	r3, #8
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e10f      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004da8:	2310      	movs	r3, #16
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e10c      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a68      	ldr	r2, [pc, #416]	; (8004f54 <UART_SetConfig+0x2d4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d120      	bne.n	8004dfa <UART_SetConfig+0x17a>
 8004db8:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d013      	beq.n	8004dee <UART_SetConfig+0x16e>
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	d814      	bhi.n	8004df4 <UART_SetConfig+0x174>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d009      	beq.n	8004de2 <UART_SetConfig+0x162>
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d810      	bhi.n	8004df4 <UART_SetConfig+0x174>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <UART_SetConfig+0x15c>
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d006      	beq.n	8004de8 <UART_SetConfig+0x168>
 8004dda:	e00b      	b.n	8004df4 <UART_SetConfig+0x174>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e0f2      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004de2:	2302      	movs	r3, #2
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e0ef      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004de8:	2304      	movs	r3, #4
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0ec      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004dee:	2308      	movs	r3, #8
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e0e9      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004df4:	2310      	movs	r3, #16
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0e6      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <UART_SetConfig+0x2d8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d120      	bne.n	8004e46 <UART_SetConfig+0x1c6>
 8004e04:	4b51      	ldr	r3, [pc, #324]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e10:	d013      	beq.n	8004e3a <UART_SetConfig+0x1ba>
 8004e12:	2bc0      	cmp	r3, #192	; 0xc0
 8004e14:	d814      	bhi.n	8004e40 <UART_SetConfig+0x1c0>
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d009      	beq.n	8004e2e <UART_SetConfig+0x1ae>
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d810      	bhi.n	8004e40 <UART_SetConfig+0x1c0>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0x1a8>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d006      	beq.n	8004e34 <UART_SetConfig+0x1b4>
 8004e26:	e00b      	b.n	8004e40 <UART_SetConfig+0x1c0>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e0cc      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e0c9      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e34:	2304      	movs	r3, #4
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0c6      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e0c3      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e40:	2310      	movs	r3, #16
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0c0      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a44      	ldr	r2, [pc, #272]	; (8004f5c <UART_SetConfig+0x2dc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x21c>
 8004e50:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5e:	d017      	beq.n	8004e90 <UART_SetConfig+0x210>
 8004e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e64:	d817      	bhi.n	8004e96 <UART_SetConfig+0x216>
 8004e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6a:	d00b      	beq.n	8004e84 <UART_SetConfig+0x204>
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d811      	bhi.n	8004e96 <UART_SetConfig+0x216>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <UART_SetConfig+0x1fe>
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7a:	d006      	beq.n	8004e8a <UART_SetConfig+0x20a>
 8004e7c:	e00b      	b.n	8004e96 <UART_SetConfig+0x216>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e0a1      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e84:	2302      	movs	r3, #2
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e09e      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e09b      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e90:	2308      	movs	r3, #8
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e098      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e96:	2310      	movs	r3, #16
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e095      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <UART_SetConfig+0x2e0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d125      	bne.n	8004ef2 <UART_SetConfig+0x272>
 8004ea6:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb4:	d017      	beq.n	8004ee6 <UART_SetConfig+0x266>
 8004eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eba:	d817      	bhi.n	8004eec <UART_SetConfig+0x26c>
 8004ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec0:	d00b      	beq.n	8004eda <UART_SetConfig+0x25a>
 8004ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec6:	d811      	bhi.n	8004eec <UART_SetConfig+0x26c>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <UART_SetConfig+0x254>
 8004ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed0:	d006      	beq.n	8004ee0 <UART_SetConfig+0x260>
 8004ed2:	e00b      	b.n	8004eec <UART_SetConfig+0x26c>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e076      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004eda:	2302      	movs	r3, #2
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e073      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e070      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e06d      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004eec:	2310      	movs	r3, #16
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e06a      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <UART_SetConfig+0x2e4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d138      	bne.n	8004f6e <UART_SetConfig+0x2ee>
 8004efc:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <UART_SetConfig+0x2cc>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f0a:	d017      	beq.n	8004f3c <UART_SetConfig+0x2bc>
 8004f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f10:	d82a      	bhi.n	8004f68 <UART_SetConfig+0x2e8>
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d00b      	beq.n	8004f30 <UART_SetConfig+0x2b0>
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1c:	d824      	bhi.n	8004f68 <UART_SetConfig+0x2e8>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <UART_SetConfig+0x2aa>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d006      	beq.n	8004f36 <UART_SetConfig+0x2b6>
 8004f28:	e01e      	b.n	8004f68 <UART_SetConfig+0x2e8>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e04b      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004f30:	2302      	movs	r3, #2
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e048      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004f36:	2304      	movs	r3, #4
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e045      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e042      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004f42:	bf00      	nop
 8004f44:	efff69f3 	.word	0xefff69f3
 8004f48:	40011000 	.word	0x40011000
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40004400 	.word	0x40004400
 8004f54:	40004800 	.word	0x40004800
 8004f58:	40004c00 	.word	0x40004c00
 8004f5c:	40005000 	.word	0x40005000
 8004f60:	40011400 	.word	0x40011400
 8004f64:	40007800 	.word	0x40007800
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e02c      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a72      	ldr	r2, [pc, #456]	; (800513c <UART_SetConfig+0x4bc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d125      	bne.n	8004fc4 <UART_SetConfig+0x344>
 8004f78:	4b71      	ldr	r3, [pc, #452]	; (8005140 <UART_SetConfig+0x4c0>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f86:	d017      	beq.n	8004fb8 <UART_SetConfig+0x338>
 8004f88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f8c:	d817      	bhi.n	8004fbe <UART_SetConfig+0x33e>
 8004f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f92:	d00b      	beq.n	8004fac <UART_SetConfig+0x32c>
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d811      	bhi.n	8004fbe <UART_SetConfig+0x33e>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <UART_SetConfig+0x326>
 8004f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa2:	d006      	beq.n	8004fb2 <UART_SetConfig+0x332>
 8004fa4:	e00b      	b.n	8004fbe <UART_SetConfig+0x33e>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e00d      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004fac:	2302      	movs	r3, #2
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e00a      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e007      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e004      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e001      	b.n	8004fc8 <UART_SetConfig+0x348>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d15b      	bne.n	800508a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x3aa>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x360>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe f888 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8005008:	61b8      	str	r0, [r7, #24]
        break;
 800500a:	e013      	b.n	8005034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe f898 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 8005010:	61b8      	str	r0, [r7, #24]
        break;
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <UART_SetConfig+0x4c4>)
 8005016:	61bb      	str	r3, [r7, #24]
        break;
 8005018:	e00c      	b.n	8005034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fd ffab 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 800501e:	61b8      	str	r0, [r7, #24]
        break;
 8005020:	e008      	b.n	8005034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e004      	b.n	8005034 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	77bb      	strb	r3, [r7, #30]
        break;
 8005032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d074      	beq.n	8005124 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	005a      	lsls	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	441a      	add	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d916      	bls.n	8005084 <UART_SetConfig+0x404>
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d212      	bcs.n	8005084 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f023 030f 	bic.w	r3, r3, #15
 8005066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	b29a      	uxth	r2, r3
 8005074:	89fb      	ldrh	r3, [r7, #14]
 8005076:	4313      	orrs	r3, r2
 8005078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	89fa      	ldrh	r2, [r7, #14]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	e04f      	b.n	8005124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	77bb      	strb	r3, [r7, #30]
 8005088:	e04c      	b.n	8005124 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d828      	bhi.n	80050e2 <UART_SetConfig+0x462>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x418>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050d3 	.word	0x080050d3
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	080050e3 	.word	0x080050e3
 80050b4:	080050e3 	.word	0x080050e3
 80050b8:	080050db 	.word	0x080050db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7fe f82c 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 80050c0:	61b8      	str	r0, [r7, #24]
        break;
 80050c2:	e013      	b.n	80050ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe f83c 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <UART_SetConfig+0x4c4>)
 80050ce:	61bb      	str	r3, [r7, #24]
        break;
 80050d0:	e00c      	b.n	80050ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d2:	f7fd ff4f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80050d6:	61b8      	str	r0, [r7, #24]
        break;
 80050d8:	e008      	b.n	80050ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050de:	61bb      	str	r3, [r7, #24]
        break;
 80050e0:	e004      	b.n	80050ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	77bb      	strb	r3, [r7, #30]
        break;
 80050ea:	bf00      	nop
    }

    if (pclk != 0U)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	085a      	lsrs	r2, r3, #1
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b0f      	cmp	r3, #15
 800510a:	d909      	bls.n	8005120 <UART_SetConfig+0x4a0>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005112:	d205      	bcs.n	8005120 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	e001      	b.n	8005124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005130:	7fbb      	ldrb	r3, [r7, #30]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40007c00 	.word	0x40007c00
 8005140:	40023800 	.word	0x40023800
 8005144:	00f42400 	.word	0x00f42400

08005148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005246:	d10a      	bne.n	800525e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b098      	sub	sp, #96	; 0x60
 8005290:	af02      	add	r7, sp, #8
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800529c:	f7fc fafa 	bl	8001894 <HAL_GetTick>
 80052a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d12e      	bne.n	800530e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f88c 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052de:	653b      	str	r3, [r7, #80]	; 0x50
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e6      	bne.n	80052ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e062      	b.n	80053d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d149      	bne.n	80053b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f856 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d03c      	beq.n	80053b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	623b      	str	r3, [r7, #32]
   return(result);
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800535a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	60fb      	str	r3, [r7, #12]
   return(result);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e011      	b.n	80053d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3758      	adds	r7, #88	; 0x58
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ec:	e04f      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f4:	d04b      	beq.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc fa4d 	bl	8001894 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <UART_WaitOnFlagUntilTimeout+0x30>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e04e      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d037      	beq.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b80      	cmp	r3, #128	; 0x80
 8005422:	d034      	beq.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d031      	beq.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d110      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2208      	movs	r2, #8
 800543e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f838 	bl	80054b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2208      	movs	r2, #8
 800544a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e029      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d111      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f81e 	bl	80054b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e00f      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d0a0      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b095      	sub	sp, #84	; 0x54
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
 80054de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	2b01      	cmp	r3, #1
 800552a:	d118      	bne.n	800555e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	60bb      	str	r3, [r7, #8]
   return(result);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0310 	bic.w	r3, r3, #16
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	613b      	str	r3, [r7, #16]
   return(result);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e6      	bne.n	800552c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005572:	bf00      	nop
 8005574:	3754      	adds	r7, #84	; 0x54
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <__cvt>:
 800557e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005580:	ed2d 8b02 	vpush	{d8}
 8005584:	eeb0 8b40 	vmov.f64	d8, d0
 8005588:	b085      	sub	sp, #20
 800558a:	4617      	mov	r7, r2
 800558c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800558e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005590:	ee18 2a90 	vmov	r2, s17
 8005594:	f025 0520 	bic.w	r5, r5, #32
 8005598:	2a00      	cmp	r2, #0
 800559a:	bfb6      	itet	lt
 800559c:	222d      	movlt	r2, #45	; 0x2d
 800559e:	2200      	movge	r2, #0
 80055a0:	eeb1 8b40 	vneglt.f64	d8, d0
 80055a4:	2d46      	cmp	r5, #70	; 0x46
 80055a6:	460c      	mov	r4, r1
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	d004      	beq.n	80055b6 <__cvt+0x38>
 80055ac:	2d45      	cmp	r5, #69	; 0x45
 80055ae:	d100      	bne.n	80055b2 <__cvt+0x34>
 80055b0:	3401      	adds	r4, #1
 80055b2:	2102      	movs	r1, #2
 80055b4:	e000      	b.n	80055b8 <__cvt+0x3a>
 80055b6:	2103      	movs	r1, #3
 80055b8:	ab03      	add	r3, sp, #12
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	ab02      	add	r3, sp, #8
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4622      	mov	r2, r4
 80055c2:	4633      	mov	r3, r6
 80055c4:	eeb0 0b48 	vmov.f64	d0, d8
 80055c8:	f000 fda6 	bl	8006118 <_dtoa_r>
 80055cc:	2d47      	cmp	r5, #71	; 0x47
 80055ce:	d101      	bne.n	80055d4 <__cvt+0x56>
 80055d0:	07fb      	lsls	r3, r7, #31
 80055d2:	d51a      	bpl.n	800560a <__cvt+0x8c>
 80055d4:	2d46      	cmp	r5, #70	; 0x46
 80055d6:	eb00 0204 	add.w	r2, r0, r4
 80055da:	d10c      	bne.n	80055f6 <__cvt+0x78>
 80055dc:	7803      	ldrb	r3, [r0, #0]
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d107      	bne.n	80055f2 <__cvt+0x74>
 80055e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80055e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ea:	bf1c      	itt	ne
 80055ec:	f1c4 0401 	rsbne	r4, r4, #1
 80055f0:	6034      	strne	r4, [r6, #0]
 80055f2:	6833      	ldr	r3, [r6, #0]
 80055f4:	441a      	add	r2, r3
 80055f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	bf08      	it	eq
 8005600:	9203      	streq	r2, [sp, #12]
 8005602:	2130      	movs	r1, #48	; 0x30
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	4293      	cmp	r3, r2
 8005608:	d307      	bcc.n	800561a <__cvt+0x9c>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800560e:	1a1b      	subs	r3, r3, r0
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	b005      	add	sp, #20
 8005614:	ecbd 8b02 	vpop	{d8}
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	1c5c      	adds	r4, r3, #1
 800561c:	9403      	str	r4, [sp, #12]
 800561e:	7019      	strb	r1, [r3, #0]
 8005620:	e7f0      	b.n	8005604 <__cvt+0x86>

08005622 <__exponent>:
 8005622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005624:	4603      	mov	r3, r0
 8005626:	2900      	cmp	r1, #0
 8005628:	bfb8      	it	lt
 800562a:	4249      	neglt	r1, r1
 800562c:	f803 2b02 	strb.w	r2, [r3], #2
 8005630:	bfb4      	ite	lt
 8005632:	222d      	movlt	r2, #45	; 0x2d
 8005634:	222b      	movge	r2, #43	; 0x2b
 8005636:	2909      	cmp	r1, #9
 8005638:	7042      	strb	r2, [r0, #1]
 800563a:	dd2a      	ble.n	8005692 <__exponent+0x70>
 800563c:	f10d 0207 	add.w	r2, sp, #7
 8005640:	4617      	mov	r7, r2
 8005642:	260a      	movs	r6, #10
 8005644:	4694      	mov	ip, r2
 8005646:	fb91 f5f6 	sdiv	r5, r1, r6
 800564a:	fb06 1415 	mls	r4, r6, r5, r1
 800564e:	3430      	adds	r4, #48	; 0x30
 8005650:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005654:	460c      	mov	r4, r1
 8005656:	2c63      	cmp	r4, #99	; 0x63
 8005658:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800565c:	4629      	mov	r1, r5
 800565e:	dcf1      	bgt.n	8005644 <__exponent+0x22>
 8005660:	3130      	adds	r1, #48	; 0x30
 8005662:	f1ac 0402 	sub.w	r4, ip, #2
 8005666:	f802 1c01 	strb.w	r1, [r2, #-1]
 800566a:	1c41      	adds	r1, r0, #1
 800566c:	4622      	mov	r2, r4
 800566e:	42ba      	cmp	r2, r7
 8005670:	d30a      	bcc.n	8005688 <__exponent+0x66>
 8005672:	f10d 0209 	add.w	r2, sp, #9
 8005676:	eba2 020c 	sub.w	r2, r2, ip
 800567a:	42bc      	cmp	r4, r7
 800567c:	bf88      	it	hi
 800567e:	2200      	movhi	r2, #0
 8005680:	4413      	add	r3, r2
 8005682:	1a18      	subs	r0, r3, r0
 8005684:	b003      	add	sp, #12
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005688:	f812 5b01 	ldrb.w	r5, [r2], #1
 800568c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005690:	e7ed      	b.n	800566e <__exponent+0x4c>
 8005692:	2330      	movs	r3, #48	; 0x30
 8005694:	3130      	adds	r1, #48	; 0x30
 8005696:	7083      	strb	r3, [r0, #2]
 8005698:	70c1      	strb	r1, [r0, #3]
 800569a:	1d03      	adds	r3, r0, #4
 800569c:	e7f1      	b.n	8005682 <__exponent+0x60>
	...

080056a0 <_printf_float>:
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	b08b      	sub	sp, #44	; 0x2c
 80056a6:	460c      	mov	r4, r1
 80056a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80056ac:	4616      	mov	r6, r2
 80056ae:	461f      	mov	r7, r3
 80056b0:	4605      	mov	r5, r0
 80056b2:	f000 fc77 	bl	8005fa4 <_localeconv_r>
 80056b6:	f8d0 b000 	ldr.w	fp, [r0]
 80056ba:	4658      	mov	r0, fp
 80056bc:	f7fa fe10 	bl	80002e0 <strlen>
 80056c0:	2300      	movs	r3, #0
 80056c2:	9308      	str	r3, [sp, #32]
 80056c4:	f8d8 3000 	ldr.w	r3, [r8]
 80056c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	3307      	adds	r3, #7
 80056d0:	f023 0307 	bic.w	r3, r3, #7
 80056d4:	f103 0108 	add.w	r1, r3, #8
 80056d8:	f8c8 1000 	str.w	r1, [r8]
 80056dc:	ed93 0b00 	vldr	d0, [r3]
 80056e0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005940 <_printf_float+0x2a0>
 80056e4:	eeb0 7bc0 	vabs.f64	d7, d0
 80056e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80056f4:	4682      	mov	sl, r0
 80056f6:	dd24      	ble.n	8005742 <_printf_float+0xa2>
 80056f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	d502      	bpl.n	8005708 <_printf_float+0x68>
 8005702:	232d      	movs	r3, #45	; 0x2d
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005708:	498f      	ldr	r1, [pc, #572]	; (8005948 <_printf_float+0x2a8>)
 800570a:	4b90      	ldr	r3, [pc, #576]	; (800594c <_printf_float+0x2ac>)
 800570c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005710:	bf94      	ite	ls
 8005712:	4688      	movls	r8, r1
 8005714:	4698      	movhi	r8, r3
 8005716:	2303      	movs	r3, #3
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	f022 0204 	bic.w	r2, r2, #4
 800571e:	2300      	movs	r3, #0
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	9700      	str	r7, [sp, #0]
 8005726:	4633      	mov	r3, r6
 8005728:	aa09      	add	r2, sp, #36	; 0x24
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f9d1 	bl	8005ad4 <_printf_common>
 8005732:	3001      	adds	r0, #1
 8005734:	f040 808a 	bne.w	800584c <_printf_float+0x1ac>
 8005738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573c:	b00b      	add	sp, #44	; 0x2c
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	eeb4 0b40 	vcmp.f64	d0, d0
 8005746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574a:	d709      	bvc.n	8005760 <_printf_float+0xc0>
 800574c:	ee10 3a90 	vmov	r3, s1
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfbc      	itt	lt
 8005754:	232d      	movlt	r3, #45	; 0x2d
 8005756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800575a:	497d      	ldr	r1, [pc, #500]	; (8005950 <_printf_float+0x2b0>)
 800575c:	4b7d      	ldr	r3, [pc, #500]	; (8005954 <_printf_float+0x2b4>)
 800575e:	e7d5      	b.n	800570c <_printf_float+0x6c>
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005766:	9104      	str	r1, [sp, #16]
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	d13c      	bne.n	80057e6 <_printf_float+0x146>
 800576c:	2306      	movs	r3, #6
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	2300      	movs	r3, #0
 8005772:	9303      	str	r3, [sp, #12]
 8005774:	ab08      	add	r3, sp, #32
 8005776:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800577a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577e:	ab07      	add	r3, sp, #28
 8005780:	6861      	ldr	r1, [r4, #4]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	6022      	str	r2, [r4, #0]
 8005786:	f10d 031b 	add.w	r3, sp, #27
 800578a:	4628      	mov	r0, r5
 800578c:	f7ff fef7 	bl	800557e <__cvt>
 8005790:	9b04      	ldr	r3, [sp, #16]
 8005792:	9907      	ldr	r1, [sp, #28]
 8005794:	2b47      	cmp	r3, #71	; 0x47
 8005796:	4680      	mov	r8, r0
 8005798:	d108      	bne.n	80057ac <_printf_float+0x10c>
 800579a:	1cc8      	adds	r0, r1, #3
 800579c:	db02      	blt.n	80057a4 <_printf_float+0x104>
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	4299      	cmp	r1, r3
 80057a2:	dd41      	ble.n	8005828 <_printf_float+0x188>
 80057a4:	f1a9 0902 	sub.w	r9, r9, #2
 80057a8:	fa5f f989 	uxtb.w	r9, r9
 80057ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057b0:	d820      	bhi.n	80057f4 <_printf_float+0x154>
 80057b2:	3901      	subs	r1, #1
 80057b4:	464a      	mov	r2, r9
 80057b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057ba:	9107      	str	r1, [sp, #28]
 80057bc:	f7ff ff31 	bl	8005622 <__exponent>
 80057c0:	9a08      	ldr	r2, [sp, #32]
 80057c2:	9004      	str	r0, [sp, #16]
 80057c4:	1813      	adds	r3, r2, r0
 80057c6:	2a01      	cmp	r2, #1
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	dc02      	bgt.n	80057d2 <_printf_float+0x132>
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	07d2      	lsls	r2, r2, #31
 80057d0:	d501      	bpl.n	80057d6 <_printf_float+0x136>
 80057d2:	3301      	adds	r3, #1
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0a2      	beq.n	8005724 <_printf_float+0x84>
 80057de:	232d      	movs	r3, #45	; 0x2d
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e4:	e79e      	b.n	8005724 <_printf_float+0x84>
 80057e6:	9904      	ldr	r1, [sp, #16]
 80057e8:	2947      	cmp	r1, #71	; 0x47
 80057ea:	d1c1      	bne.n	8005770 <_printf_float+0xd0>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1bf      	bne.n	8005770 <_printf_float+0xd0>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7bc      	b.n	800576e <_printf_float+0xce>
 80057f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80057f8:	d118      	bne.n	800582c <_printf_float+0x18c>
 80057fa:	2900      	cmp	r1, #0
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	dd0b      	ble.n	8005818 <_printf_float+0x178>
 8005800:	6121      	str	r1, [r4, #16]
 8005802:	b913      	cbnz	r3, 800580a <_printf_float+0x16a>
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	07d0      	lsls	r0, r2, #31
 8005808:	d502      	bpl.n	8005810 <_printf_float+0x170>
 800580a:	3301      	adds	r3, #1
 800580c:	440b      	add	r3, r1
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	65a1      	str	r1, [r4, #88]	; 0x58
 8005814:	9304      	str	r3, [sp, #16]
 8005816:	e7de      	b.n	80057d6 <_printf_float+0x136>
 8005818:	b913      	cbnz	r3, 8005820 <_printf_float+0x180>
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	07d2      	lsls	r2, r2, #31
 800581e:	d501      	bpl.n	8005824 <_printf_float+0x184>
 8005820:	3302      	adds	r3, #2
 8005822:	e7f4      	b.n	800580e <_printf_float+0x16e>
 8005824:	2301      	movs	r3, #1
 8005826:	e7f2      	b.n	800580e <_printf_float+0x16e>
 8005828:	f04f 0967 	mov.w	r9, #103	; 0x67
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	4299      	cmp	r1, r3
 8005830:	db05      	blt.n	800583e <_printf_float+0x19e>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	6121      	str	r1, [r4, #16]
 8005836:	07d8      	lsls	r0, r3, #31
 8005838:	d5ea      	bpl.n	8005810 <_printf_float+0x170>
 800583a:	1c4b      	adds	r3, r1, #1
 800583c:	e7e7      	b.n	800580e <_printf_float+0x16e>
 800583e:	2900      	cmp	r1, #0
 8005840:	bfd4      	ite	le
 8005842:	f1c1 0202 	rsble	r2, r1, #2
 8005846:	2201      	movgt	r2, #1
 8005848:	4413      	add	r3, r2
 800584a:	e7e0      	b.n	800580e <_printf_float+0x16e>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	055a      	lsls	r2, r3, #21
 8005850:	d407      	bmi.n	8005862 <_printf_float+0x1c2>
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	4642      	mov	r2, r8
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	d12a      	bne.n	80058b6 <_printf_float+0x216>
 8005860:	e76a      	b.n	8005738 <_printf_float+0x98>
 8005862:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005866:	f240 80e0 	bls.w	8005a2a <_printf_float+0x38a>
 800586a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800586e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005876:	d133      	bne.n	80058e0 <_printf_float+0x240>
 8005878:	4a37      	ldr	r2, [pc, #220]	; (8005958 <_printf_float+0x2b8>)
 800587a:	2301      	movs	r3, #1
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f af58 	beq.w	8005738 <_printf_float+0x98>
 8005888:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800588c:	429a      	cmp	r2, r3
 800588e:	db02      	blt.n	8005896 <_printf_float+0x1f6>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	07d8      	lsls	r0, r3, #31
 8005894:	d50f      	bpl.n	80058b6 <_printf_float+0x216>
 8005896:	4653      	mov	r3, sl
 8005898:	465a      	mov	r2, fp
 800589a:	4631      	mov	r1, r6
 800589c:	4628      	mov	r0, r5
 800589e:	47b8      	blx	r7
 80058a0:	3001      	adds	r0, #1
 80058a2:	f43f af49 	beq.w	8005738 <_printf_float+0x98>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	f104 091a 	add.w	r9, r4, #26
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4543      	cmp	r3, r8
 80058b4:	dc09      	bgt.n	80058ca <_printf_float+0x22a>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	079b      	lsls	r3, r3, #30
 80058ba:	f100 8106 	bmi.w	8005aca <_printf_float+0x42a>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	4298      	cmp	r0, r3
 80058c4:	bfb8      	it	lt
 80058c6:	4618      	movlt	r0, r3
 80058c8:	e738      	b.n	800573c <_printf_float+0x9c>
 80058ca:	2301      	movs	r3, #1
 80058cc:	464a      	mov	r2, r9
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f af2f 	beq.w	8005738 <_printf_float+0x98>
 80058da:	f108 0801 	add.w	r8, r8, #1
 80058de:	e7e6      	b.n	80058ae <_printf_float+0x20e>
 80058e0:	9b07      	ldr	r3, [sp, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dc3a      	bgt.n	800595c <_printf_float+0x2bc>
 80058e6:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <_printf_float+0x2b8>)
 80058e8:	2301      	movs	r3, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	f43f af21 	beq.w	8005738 <_printf_float+0x98>
 80058f6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d102      	bne.n	8005904 <_printf_float+0x264>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	07d9      	lsls	r1, r3, #31
 8005902:	d5d8      	bpl.n	80058b6 <_printf_float+0x216>
 8005904:	4653      	mov	r3, sl
 8005906:	465a      	mov	r2, fp
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	f43f af12 	beq.w	8005738 <_printf_float+0x98>
 8005914:	f04f 0900 	mov.w	r9, #0
 8005918:	f104 0a1a 	add.w	sl, r4, #26
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	425b      	negs	r3, r3
 8005920:	454b      	cmp	r3, r9
 8005922:	dc01      	bgt.n	8005928 <_printf_float+0x288>
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	e795      	b.n	8005854 <_printf_float+0x1b4>
 8005928:	2301      	movs	r3, #1
 800592a:	4652      	mov	r2, sl
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af00 	beq.w	8005738 <_printf_float+0x98>
 8005938:	f109 0901 	add.w	r9, r9, #1
 800593c:	e7ee      	b.n	800591c <_printf_float+0x27c>
 800593e:	bf00      	nop
 8005940:	ffffffff 	.word	0xffffffff
 8005944:	7fefffff 	.word	0x7fefffff
 8005948:	08008200 	.word	0x08008200
 800594c:	08008204 	.word	0x08008204
 8005950:	08008208 	.word	0x08008208
 8005954:	0800820c 	.word	0x0800820c
 8005958:	08008210 	.word	0x08008210
 800595c:	9a08      	ldr	r2, [sp, #32]
 800595e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005960:	429a      	cmp	r2, r3
 8005962:	bfa8      	it	ge
 8005964:	461a      	movge	r2, r3
 8005966:	2a00      	cmp	r2, #0
 8005968:	4691      	mov	r9, r2
 800596a:	dc38      	bgt.n	80059de <_printf_float+0x33e>
 800596c:	2300      	movs	r3, #0
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005974:	f104 021a 	add.w	r2, r4, #26
 8005978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800597a:	9905      	ldr	r1, [sp, #20]
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	eba3 0309 	sub.w	r3, r3, r9
 8005982:	428b      	cmp	r3, r1
 8005984:	dc33      	bgt.n	80059ee <_printf_float+0x34e>
 8005986:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800598a:	429a      	cmp	r2, r3
 800598c:	db3c      	blt.n	8005a08 <_printf_float+0x368>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	07da      	lsls	r2, r3, #31
 8005992:	d439      	bmi.n	8005a08 <_printf_float+0x368>
 8005994:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005998:	eba2 0903 	sub.w	r9, r2, r3
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	4591      	cmp	r9, r2
 80059a2:	bfa8      	it	ge
 80059a4:	4691      	movge	r9, r2
 80059a6:	f1b9 0f00 	cmp.w	r9, #0
 80059aa:	dc35      	bgt.n	8005a18 <_printf_float+0x378>
 80059ac:	f04f 0800 	mov.w	r8, #0
 80059b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059b4:	f104 0a1a 	add.w	sl, r4, #26
 80059b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	eba3 0309 	sub.w	r3, r3, r9
 80059c2:	4543      	cmp	r3, r8
 80059c4:	f77f af77 	ble.w	80058b6 <_printf_float+0x216>
 80059c8:	2301      	movs	r3, #1
 80059ca:	4652      	mov	r2, sl
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f aeb0 	beq.w	8005738 <_printf_float+0x98>
 80059d8:	f108 0801 	add.w	r8, r8, #1
 80059dc:	e7ec      	b.n	80059b8 <_printf_float+0x318>
 80059de:	4613      	mov	r3, r2
 80059e0:	4631      	mov	r1, r6
 80059e2:	4642      	mov	r2, r8
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	d1bf      	bne.n	800596c <_printf_float+0x2cc>
 80059ec:	e6a4      	b.n	8005738 <_printf_float+0x98>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	9204      	str	r2, [sp, #16]
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f ae9d 	beq.w	8005738 <_printf_float+0x98>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	9a04      	ldr	r2, [sp, #16]
 8005a02:	3301      	adds	r3, #1
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	e7b7      	b.n	8005978 <_printf_float+0x2d8>
 8005a08:	4653      	mov	r3, sl
 8005a0a:	465a      	mov	r2, fp
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	d1be      	bne.n	8005994 <_printf_float+0x2f4>
 8005a16:	e68f      	b.n	8005738 <_printf_float+0x98>
 8005a18:	9a04      	ldr	r2, [sp, #16]
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	4442      	add	r2, r8
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	d1c1      	bne.n	80059ac <_printf_float+0x30c>
 8005a28:	e686      	b.n	8005738 <_printf_float+0x98>
 8005a2a:	9a08      	ldr	r2, [sp, #32]
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	dc01      	bgt.n	8005a34 <_printf_float+0x394>
 8005a30:	07db      	lsls	r3, r3, #31
 8005a32:	d537      	bpl.n	8005aa4 <_printf_float+0x404>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4642      	mov	r2, r8
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f43f ae7a 	beq.w	8005738 <_printf_float+0x98>
 8005a44:	4653      	mov	r3, sl
 8005a46:	465a      	mov	r2, fp
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f ae72 	beq.w	8005738 <_printf_float+0x98>
 8005a54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005a58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	9b08      	ldr	r3, [sp, #32]
 8005a62:	d01a      	beq.n	8005a9a <_printf_float+0x3fa>
 8005a64:	3b01      	subs	r3, #1
 8005a66:	f108 0201 	add.w	r2, r8, #1
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	d10e      	bne.n	8005a92 <_printf_float+0x3f2>
 8005a74:	e660      	b.n	8005738 <_printf_float+0x98>
 8005a76:	2301      	movs	r3, #1
 8005a78:	464a      	mov	r2, r9
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	f43f ae59 	beq.w	8005738 <_printf_float+0x98>
 8005a86:	f108 0801 	add.w	r8, r8, #1
 8005a8a:	9b08      	ldr	r3, [sp, #32]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	4543      	cmp	r3, r8
 8005a90:	dcf1      	bgt.n	8005a76 <_printf_float+0x3d6>
 8005a92:	9b04      	ldr	r3, [sp, #16]
 8005a94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a98:	e6dd      	b.n	8005856 <_printf_float+0x1b6>
 8005a9a:	f04f 0800 	mov.w	r8, #0
 8005a9e:	f104 091a 	add.w	r9, r4, #26
 8005aa2:	e7f2      	b.n	8005a8a <_printf_float+0x3ea>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	e7df      	b.n	8005a6a <_printf_float+0x3ca>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	464a      	mov	r2, r9
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f ae3f 	beq.w	8005738 <_printf_float+0x98>
 8005aba:	f108 0801 	add.w	r8, r8, #1
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ac2:	1a5b      	subs	r3, r3, r1
 8005ac4:	4543      	cmp	r3, r8
 8005ac6:	dcf0      	bgt.n	8005aaa <_printf_float+0x40a>
 8005ac8:	e6f9      	b.n	80058be <_printf_float+0x21e>
 8005aca:	f04f 0800 	mov.w	r8, #0
 8005ace:	f104 0919 	add.w	r9, r4, #25
 8005ad2:	e7f4      	b.n	8005abe <_printf_float+0x41e>

08005ad4 <_printf_common>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4616      	mov	r6, r2
 8005ada:	4699      	mov	r9, r3
 8005adc:	688a      	ldr	r2, [r1, #8]
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bfb8      	it	lt
 8005ae8:	4613      	movlt	r3, r2
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af0:	4607      	mov	r7, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b10a      	cbz	r2, 8005afa <_printf_common+0x26>
 8005af6:	3301      	adds	r3, #1
 8005af8:	6033      	str	r3, [r6, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	0699      	lsls	r1, r3, #26
 8005afe:	bf42      	ittt	mi
 8005b00:	6833      	ldrmi	r3, [r6, #0]
 8005b02:	3302      	addmi	r3, #2
 8005b04:	6033      	strmi	r3, [r6, #0]
 8005b06:	6825      	ldr	r5, [r4, #0]
 8005b08:	f015 0506 	ands.w	r5, r5, #6
 8005b0c:	d106      	bne.n	8005b1c <_printf_common+0x48>
 8005b0e:	f104 0a19 	add.w	sl, r4, #25
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	6832      	ldr	r2, [r6, #0]
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dc26      	bgt.n	8005b6a <_printf_common+0x96>
 8005b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b20:	1e13      	subs	r3, r2, #0
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	bf18      	it	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	0692      	lsls	r2, r2, #26
 8005b2a:	d42b      	bmi.n	8005b84 <_printf_common+0xb0>
 8005b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d01e      	beq.n	8005b78 <_printf_common+0xa4>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	f003 0306 	and.w	r3, r3, #6
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf02      	ittt	eq
 8005b46:	68e5      	ldreq	r5, [r4, #12]
 8005b48:	6833      	ldreq	r3, [r6, #0]
 8005b4a:	1aed      	subeq	r5, r5, r3
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	bf0c      	ite	eq
 8005b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b54:	2500      	movne	r5, #0
 8005b56:	4293      	cmp	r3, r2
 8005b58:	bfc4      	itt	gt
 8005b5a:	1a9b      	subgt	r3, r3, r2
 8005b5c:	18ed      	addgt	r5, r5, r3
 8005b5e:	2600      	movs	r6, #0
 8005b60:	341a      	adds	r4, #26
 8005b62:	42b5      	cmp	r5, r6
 8005b64:	d11a      	bne.n	8005b9c <_printf_common+0xc8>
 8005b66:	2000      	movs	r0, #0
 8005b68:	e008      	b.n	8005b7c <_printf_common+0xa8>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4638      	mov	r0, r7
 8005b72:	47c0      	blx	r8
 8005b74:	3001      	adds	r0, #1
 8005b76:	d103      	bne.n	8005b80 <_printf_common+0xac>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7c6      	b.n	8005b12 <_printf_common+0x3e>
 8005b84:	18e1      	adds	r1, r4, r3
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	2030      	movs	r0, #48	; 0x30
 8005b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b8e:	4422      	add	r2, r4
 8005b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b98:	3302      	adds	r3, #2
 8005b9a:	e7c7      	b.n	8005b2c <_printf_common+0x58>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	47c0      	blx	r8
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d0e6      	beq.n	8005b78 <_printf_common+0xa4>
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7d9      	b.n	8005b62 <_printf_common+0x8e>
	...

08005bb0 <_printf_i>:
 8005bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	7e0f      	ldrb	r7, [r1, #24]
 8005bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bb8:	2f78      	cmp	r7, #120	; 0x78
 8005bba:	4691      	mov	r9, r2
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bc6:	d807      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bc8:	2f62      	cmp	r7, #98	; 0x62
 8005bca:	d80a      	bhi.n	8005be2 <_printf_i+0x32>
 8005bcc:	2f00      	cmp	r7, #0
 8005bce:	f000 80d4 	beq.w	8005d7a <_printf_i+0x1ca>
 8005bd2:	2f58      	cmp	r7, #88	; 0x58
 8005bd4:	f000 80c0 	beq.w	8005d58 <_printf_i+0x1a8>
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be0:	e03a      	b.n	8005c58 <_printf_i+0xa8>
 8005be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005be6:	2b15      	cmp	r3, #21
 8005be8:	d8f6      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bea:	a101      	add	r1, pc, #4	; (adr r1, 8005bf0 <_printf_i+0x40>)
 8005bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005bd9 	.word	0x08005bd9
 8005bfc:	08005bd9 	.word	0x08005bd9
 8005c00:	08005bd9 	.word	0x08005bd9
 8005c04:	08005bd9 	.word	0x08005bd9
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005bd9 	.word	0x08005bd9
 8005c10:	08005bd9 	.word	0x08005bd9
 8005c14:	08005bd9 	.word	0x08005bd9
 8005c18:	08005bd9 	.word	0x08005bd9
 8005c1c:	08005d61 	.word	0x08005d61
 8005c20:	08005c89 	.word	0x08005c89
 8005c24:	08005d1b 	.word	0x08005d1b
 8005c28:	08005bd9 	.word	0x08005bd9
 8005c2c:	08005bd9 	.word	0x08005bd9
 8005c30:	08005d83 	.word	0x08005d83
 8005c34:	08005bd9 	.word	0x08005bd9
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	08005bd9 	.word	0x08005bd9
 8005c40:	08005bd9 	.word	0x08005bd9
 8005c44:	08005d23 	.word	0x08005d23
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	602a      	str	r2, [r5, #0]
 8005c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e09f      	b.n	8005d9c <_printf_i+0x1ec>
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	0607      	lsls	r7, r0, #24
 8005c62:	f103 0104 	add.w	r1, r3, #4
 8005c66:	6029      	str	r1, [r5, #0]
 8005c68:	d501      	bpl.n	8005c6e <_printf_i+0xbe>
 8005c6a:	681e      	ldr	r6, [r3, #0]
 8005c6c:	e003      	b.n	8005c76 <_printf_i+0xc6>
 8005c6e:	0646      	lsls	r6, r0, #25
 8005c70:	d5fb      	bpl.n	8005c6a <_printf_i+0xba>
 8005c72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	da03      	bge.n	8005c82 <_printf_i+0xd2>
 8005c7a:	232d      	movs	r3, #45	; 0x2d
 8005c7c:	4276      	negs	r6, r6
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c82:	485a      	ldr	r0, [pc, #360]	; (8005dec <_printf_i+0x23c>)
 8005c84:	230a      	movs	r3, #10
 8005c86:	e012      	b.n	8005cae <_printf_i+0xfe>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1d19      	adds	r1, r3, #4
 8005c8e:	6029      	str	r1, [r5, #0]
 8005c90:	0605      	lsls	r5, r0, #24
 8005c92:	d501      	bpl.n	8005c98 <_printf_i+0xe8>
 8005c94:	681e      	ldr	r6, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <_printf_i+0xee>
 8005c98:	0641      	lsls	r1, r0, #25
 8005c9a:	d5fb      	bpl.n	8005c94 <_printf_i+0xe4>
 8005c9c:	881e      	ldrh	r6, [r3, #0]
 8005c9e:	4853      	ldr	r0, [pc, #332]	; (8005dec <_printf_i+0x23c>)
 8005ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2308      	moveq	r3, #8
 8005ca6:	230a      	movne	r3, #10
 8005ca8:	2100      	movs	r1, #0
 8005caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cae:	6865      	ldr	r5, [r4, #4]
 8005cb0:	60a5      	str	r5, [r4, #8]
 8005cb2:	2d00      	cmp	r5, #0
 8005cb4:	bfa2      	ittt	ge
 8005cb6:	6821      	ldrge	r1, [r4, #0]
 8005cb8:	f021 0104 	bicge.w	r1, r1, #4
 8005cbc:	6021      	strge	r1, [r4, #0]
 8005cbe:	b90e      	cbnz	r6, 8005cc4 <_printf_i+0x114>
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	d04b      	beq.n	8005d5c <_printf_i+0x1ac>
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cca:	fb03 6711 	mls	r7, r3, r1, r6
 8005cce:	5dc7      	ldrb	r7, [r0, r7]
 8005cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cd4:	4637      	mov	r7, r6
 8005cd6:	42bb      	cmp	r3, r7
 8005cd8:	460e      	mov	r6, r1
 8005cda:	d9f4      	bls.n	8005cc6 <_printf_i+0x116>
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d10b      	bne.n	8005cf8 <_printf_i+0x148>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	07de      	lsls	r6, r3, #31
 8005ce4:	d508      	bpl.n	8005cf8 <_printf_i+0x148>
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	4299      	cmp	r1, r3
 8005cec:	bfde      	ittt	le
 8005cee:	2330      	movle	r3, #48	; 0x30
 8005cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cf4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cf8:	1b52      	subs	r2, r2, r5
 8005cfa:	6122      	str	r2, [r4, #16]
 8005cfc:	f8cd a000 	str.w	sl, [sp]
 8005d00:	464b      	mov	r3, r9
 8005d02:	aa03      	add	r2, sp, #12
 8005d04:	4621      	mov	r1, r4
 8005d06:	4640      	mov	r0, r8
 8005d08:	f7ff fee4 	bl	8005ad4 <_printf_common>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d14a      	bne.n	8005da6 <_printf_i+0x1f6>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d14:	b004      	add	sp, #16
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f043 0320 	orr.w	r3, r3, #32
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	4833      	ldr	r0, [pc, #204]	; (8005df0 <_printf_i+0x240>)
 8005d24:	2778      	movs	r7, #120	; 0x78
 8005d26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	6829      	ldr	r1, [r5, #0]
 8005d2e:	061f      	lsls	r7, r3, #24
 8005d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d34:	d402      	bmi.n	8005d3c <_printf_i+0x18c>
 8005d36:	065f      	lsls	r7, r3, #25
 8005d38:	bf48      	it	mi
 8005d3a:	b2b6      	uxthmi	r6, r6
 8005d3c:	07df      	lsls	r7, r3, #31
 8005d3e:	bf48      	it	mi
 8005d40:	f043 0320 	orrmi.w	r3, r3, #32
 8005d44:	6029      	str	r1, [r5, #0]
 8005d46:	bf48      	it	mi
 8005d48:	6023      	strmi	r3, [r4, #0]
 8005d4a:	b91e      	cbnz	r6, 8005d54 <_printf_i+0x1a4>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	2310      	movs	r3, #16
 8005d56:	e7a7      	b.n	8005ca8 <_printf_i+0xf8>
 8005d58:	4824      	ldr	r0, [pc, #144]	; (8005dec <_printf_i+0x23c>)
 8005d5a:	e7e4      	b.n	8005d26 <_printf_i+0x176>
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	e7bd      	b.n	8005cdc <_printf_i+0x12c>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	6826      	ldr	r6, [r4, #0]
 8005d64:	6961      	ldr	r1, [r4, #20]
 8005d66:	1d18      	adds	r0, r3, #4
 8005d68:	6028      	str	r0, [r5, #0]
 8005d6a:	0635      	lsls	r5, r6, #24
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0x1c4>
 8005d70:	6019      	str	r1, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0x1ca>
 8005d74:	0670      	lsls	r0, r6, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0x1c0>
 8005d78:	8019      	strh	r1, [r3, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	4615      	mov	r5, r2
 8005d80:	e7bc      	b.n	8005cfc <_printf_i+0x14c>
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	1d1a      	adds	r2, r3, #4
 8005d86:	602a      	str	r2, [r5, #0]
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f7fa fa56 	bl	8000240 <memchr>
 8005d94:	b108      	cbz	r0, 8005d9a <_printf_i+0x1ea>
 8005d96:	1b40      	subs	r0, r0, r5
 8005d98:	6060      	str	r0, [r4, #4]
 8005d9a:	6863      	ldr	r3, [r4, #4]
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da4:	e7aa      	b.n	8005cfc <_printf_i+0x14c>
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	462a      	mov	r2, r5
 8005daa:	4649      	mov	r1, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	47d0      	blx	sl
 8005db0:	3001      	adds	r0, #1
 8005db2:	d0ad      	beq.n	8005d10 <_printf_i+0x160>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	d413      	bmi.n	8005de2 <_printf_i+0x232>
 8005dba:	68e0      	ldr	r0, [r4, #12]
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	bfb8      	it	lt
 8005dc2:	4618      	movlt	r0, r3
 8005dc4:	e7a6      	b.n	8005d14 <_printf_i+0x164>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4632      	mov	r2, r6
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	47d0      	blx	sl
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d09d      	beq.n	8005d10 <_printf_i+0x160>
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	9903      	ldr	r1, [sp, #12]
 8005dda:	1a5b      	subs	r3, r3, r1
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dcf2      	bgt.n	8005dc6 <_printf_i+0x216>
 8005de0:	e7eb      	b.n	8005dba <_printf_i+0x20a>
 8005de2:	2500      	movs	r5, #0
 8005de4:	f104 0619 	add.w	r6, r4, #25
 8005de8:	e7f5      	b.n	8005dd6 <_printf_i+0x226>
 8005dea:	bf00      	nop
 8005dec:	08008212 	.word	0x08008212
 8005df0:	08008223 	.word	0x08008223

08005df4 <siprintf>:
 8005df4:	b40e      	push	{r1, r2, r3}
 8005df6:	b500      	push	{lr}
 8005df8:	b09c      	sub	sp, #112	; 0x70
 8005dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8005dfc:	9002      	str	r0, [sp, #8]
 8005dfe:	9006      	str	r0, [sp, #24]
 8005e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e04:	4809      	ldr	r0, [pc, #36]	; (8005e2c <siprintf+0x38>)
 8005e06:	9107      	str	r1, [sp, #28]
 8005e08:	9104      	str	r1, [sp, #16]
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <siprintf+0x3c>)
 8005e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	6800      	ldr	r0, [r0, #0]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	a902      	add	r1, sp, #8
 8005e18:	f000 ff44 	bl	8006ca4 <_svfiprintf_r>
 8005e1c:	9b02      	ldr	r3, [sp, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	b01c      	add	sp, #112	; 0x70
 8005e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e28:	b003      	add	sp, #12
 8005e2a:	4770      	bx	lr
 8005e2c:	20000064 	.word	0x20000064
 8005e30:	ffff0208 	.word	0xffff0208

08005e34 <std>:
 8005e34:	2300      	movs	r3, #0
 8005e36:	b510      	push	{r4, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e42:	6083      	str	r3, [r0, #8]
 8005e44:	8181      	strh	r1, [r0, #12]
 8005e46:	6643      	str	r3, [r0, #100]	; 0x64
 8005e48:	81c2      	strh	r2, [r0, #14]
 8005e4a:	6183      	str	r3, [r0, #24]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	2208      	movs	r2, #8
 8005e50:	305c      	adds	r0, #92	; 0x5c
 8005e52:	f000 f89f 	bl	8005f94 <memset>
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <std+0x38>)
 8005e58:	6263      	str	r3, [r4, #36]	; 0x24
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <std+0x3c>)
 8005e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <std+0x40>)
 8005e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <std+0x44>)
 8005e64:	6224      	str	r4, [r4, #32]
 8005e66:	6323      	str	r3, [r4, #48]	; 0x30
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	0800785d 	.word	0x0800785d
 8005e70:	0800787f 	.word	0x0800787f
 8005e74:	080078b7 	.word	0x080078b7
 8005e78:	080078db 	.word	0x080078db

08005e7c <stdio_exit_handler>:
 8005e7c:	4a02      	ldr	r2, [pc, #8]	; (8005e88 <stdio_exit_handler+0xc>)
 8005e7e:	4903      	ldr	r1, [pc, #12]	; (8005e8c <stdio_exit_handler+0x10>)
 8005e80:	4803      	ldr	r0, [pc, #12]	; (8005e90 <stdio_exit_handler+0x14>)
 8005e82:	f000 b869 	b.w	8005f58 <_fwalk_sglue>
 8005e86:	bf00      	nop
 8005e88:	2000000c 	.word	0x2000000c
 8005e8c:	080070fd 	.word	0x080070fd
 8005e90:	20000018 	.word	0x20000018

08005e94 <cleanup_stdio>:
 8005e94:	6841      	ldr	r1, [r0, #4]
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <cleanup_stdio+0x34>)
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	d001      	beq.n	8005ea4 <cleanup_stdio+0x10>
 8005ea0:	f001 f92c 	bl	80070fc <_fflush_r>
 8005ea4:	68a1      	ldr	r1, [r4, #8]
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <cleanup_stdio+0x38>)
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	d002      	beq.n	8005eb2 <cleanup_stdio+0x1e>
 8005eac:	4620      	mov	r0, r4
 8005eae:	f001 f925 	bl	80070fc <_fflush_r>
 8005eb2:	68e1      	ldr	r1, [r4, #12]
 8005eb4:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <cleanup_stdio+0x3c>)
 8005eb6:	4299      	cmp	r1, r3
 8005eb8:	d004      	beq.n	8005ec4 <cleanup_stdio+0x30>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec0:	f001 b91c 	b.w	80070fc <_fflush_r>
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000398 	.word	0x20000398
 8005ecc:	20000400 	.word	0x20000400
 8005ed0:	20000468 	.word	0x20000468

08005ed4 <global_stdio_init.part.0>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <global_stdio_init.part.0+0x30>)
 8005ed8:	4c0b      	ldr	r4, [pc, #44]	; (8005f08 <global_stdio_init.part.0+0x34>)
 8005eda:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <global_stdio_init.part.0+0x38>)
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	f7ff ffa6 	bl	8005e34 <std>
 8005ee8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005eec:	2201      	movs	r2, #1
 8005eee:	2109      	movs	r1, #9
 8005ef0:	f7ff ffa0 	bl	8005e34 <std>
 8005ef4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ef8:	2202      	movs	r2, #2
 8005efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005efe:	2112      	movs	r1, #18
 8005f00:	f7ff bf98 	b.w	8005e34 <std>
 8005f04:	200004d0 	.word	0x200004d0
 8005f08:	20000398 	.word	0x20000398
 8005f0c:	08005e7d 	.word	0x08005e7d

08005f10 <__sfp_lock_acquire>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__sfp_lock_acquire+0x8>)
 8005f12:	f000 b875 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8005f16:	bf00      	nop
 8005f18:	200004d5 	.word	0x200004d5

08005f1c <__sfp_lock_release>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	; (8005f24 <__sfp_lock_release+0x8>)
 8005f1e:	f000 b870 	b.w	8006002 <__retarget_lock_release_recursive>
 8005f22:	bf00      	nop
 8005f24:	200004d5 	.word	0x200004d5

08005f28 <__sinit>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	f7ff fff0 	bl	8005f10 <__sfp_lock_acquire>
 8005f30:	6a23      	ldr	r3, [r4, #32]
 8005f32:	b11b      	cbz	r3, 8005f3c <__sinit+0x14>
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f7ff bff0 	b.w	8005f1c <__sfp_lock_release>
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <__sinit+0x28>)
 8005f3e:	6223      	str	r3, [r4, #32]
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <__sinit+0x2c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f5      	bne.n	8005f34 <__sinit+0xc>
 8005f48:	f7ff ffc4 	bl	8005ed4 <global_stdio_init.part.0>
 8005f4c:	e7f2      	b.n	8005f34 <__sinit+0xc>
 8005f4e:	bf00      	nop
 8005f50:	08005e95 	.word	0x08005e95
 8005f54:	200004d0 	.word	0x200004d0

08005f58 <_fwalk_sglue>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	4688      	mov	r8, r1
 8005f60:	4614      	mov	r4, r2
 8005f62:	2600      	movs	r6, #0
 8005f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f68:	f1b9 0901 	subs.w	r9, r9, #1
 8005f6c:	d505      	bpl.n	8005f7a <_fwalk_sglue+0x22>
 8005f6e:	6824      	ldr	r4, [r4, #0]
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	d1f7      	bne.n	8005f64 <_fwalk_sglue+0xc>
 8005f74:	4630      	mov	r0, r6
 8005f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d907      	bls.n	8005f90 <_fwalk_sglue+0x38>
 8005f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f84:	3301      	adds	r3, #1
 8005f86:	d003      	beq.n	8005f90 <_fwalk_sglue+0x38>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	47c0      	blx	r8
 8005f8e:	4306      	orrs	r6, r0
 8005f90:	3568      	adds	r5, #104	; 0x68
 8005f92:	e7e9      	b.n	8005f68 <_fwalk_sglue+0x10>

08005f94 <memset>:
 8005f94:	4402      	add	r2, r0
 8005f96:	4603      	mov	r3, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <_localeconv_r>:
 8005fa4:	4800      	ldr	r0, [pc, #0]	; (8005fa8 <_localeconv_r+0x4>)
 8005fa6:	4770      	bx	lr
 8005fa8:	20000158 	.word	0x20000158

08005fac <__errno>:
 8005fac:	4b01      	ldr	r3, [pc, #4]	; (8005fb4 <__errno+0x8>)
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000064 	.word	0x20000064

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4d0d      	ldr	r5, [pc, #52]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbc:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fbe:	1b64      	subs	r4, r4, r5
 8005fc0:	10a4      	asrs	r4, r4, #2
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	4d0b      	ldr	r5, [pc, #44]	; (8005ff8 <__libc_init_array+0x40>)
 8005fca:	4c0c      	ldr	r4, [pc, #48]	; (8005ffc <__libc_init_array+0x44>)
 8005fcc:	f002 f898 	bl	8008100 <_init>
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	0800857c 	.word	0x0800857c
 8005ff4:	0800857c 	.word	0x0800857c
 8005ff8:	0800857c 	.word	0x0800857c
 8005ffc:	08008580 	.word	0x08008580

08006000 <__retarget_lock_acquire_recursive>:
 8006000:	4770      	bx	lr

08006002 <__retarget_lock_release_recursive>:
 8006002:	4770      	bx	lr

08006004 <quorem>:
 8006004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	6903      	ldr	r3, [r0, #16]
 800600a:	690c      	ldr	r4, [r1, #16]
 800600c:	42a3      	cmp	r3, r4
 800600e:	4607      	mov	r7, r0
 8006010:	db7e      	blt.n	8006110 <quorem+0x10c>
 8006012:	3c01      	subs	r4, #1
 8006014:	f101 0814 	add.w	r8, r1, #20
 8006018:	f100 0514 	add.w	r5, r0, #20
 800601c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800602a:	3301      	adds	r3, #1
 800602c:	429a      	cmp	r2, r3
 800602e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006036:	fbb2 f6f3 	udiv	r6, r2, r3
 800603a:	d331      	bcc.n	80060a0 <quorem+0x9c>
 800603c:	f04f 0e00 	mov.w	lr, #0
 8006040:	4640      	mov	r0, r8
 8006042:	46ac      	mov	ip, r5
 8006044:	46f2      	mov	sl, lr
 8006046:	f850 2b04 	ldr.w	r2, [r0], #4
 800604a:	b293      	uxth	r3, r2
 800604c:	fb06 e303 	mla	r3, r6, r3, lr
 8006050:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006054:	0c1a      	lsrs	r2, r3, #16
 8006056:	b29b      	uxth	r3, r3
 8006058:	ebaa 0303 	sub.w	r3, sl, r3
 800605c:	f8dc a000 	ldr.w	sl, [ip]
 8006060:	fa13 f38a 	uxtah	r3, r3, sl
 8006064:	fb06 220e 	mla	r2, r6, lr, r2
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006070:	b292      	uxth	r2, r2
 8006072:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006076:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800607a:	f8bd 3000 	ldrh.w	r3, [sp]
 800607e:	4581      	cmp	r9, r0
 8006080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006084:	f84c 3b04 	str.w	r3, [ip], #4
 8006088:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800608c:	d2db      	bcs.n	8006046 <quorem+0x42>
 800608e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006092:	b92b      	cbnz	r3, 80060a0 <quorem+0x9c>
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	3b04      	subs	r3, #4
 8006098:	429d      	cmp	r5, r3
 800609a:	461a      	mov	r2, r3
 800609c:	d32c      	bcc.n	80060f8 <quorem+0xf4>
 800609e:	613c      	str	r4, [r7, #16]
 80060a0:	4638      	mov	r0, r7
 80060a2:	f001 fadb 	bl	800765c <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	db22      	blt.n	80060f0 <quorem+0xec>
 80060aa:	3601      	adds	r6, #1
 80060ac:	4629      	mov	r1, r5
 80060ae:	2000      	movs	r0, #0
 80060b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b4:	f8d1 c000 	ldr.w	ip, [r1]
 80060b8:	b293      	uxth	r3, r2
 80060ba:	1ac3      	subs	r3, r0, r3
 80060bc:	0c12      	lsrs	r2, r2, #16
 80060be:	fa13 f38c 	uxtah	r3, r3, ip
 80060c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d0:	45c1      	cmp	r9, r8
 80060d2:	f841 3b04 	str.w	r3, [r1], #4
 80060d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060da:	d2e9      	bcs.n	80060b0 <quorem+0xac>
 80060dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e4:	b922      	cbnz	r2, 80060f0 <quorem+0xec>
 80060e6:	3b04      	subs	r3, #4
 80060e8:	429d      	cmp	r5, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	d30a      	bcc.n	8006104 <quorem+0x100>
 80060ee:	613c      	str	r4, [r7, #16]
 80060f0:	4630      	mov	r0, r6
 80060f2:	b003      	add	sp, #12
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	3b04      	subs	r3, #4
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	d1ce      	bne.n	800609e <quorem+0x9a>
 8006100:	3c01      	subs	r4, #1
 8006102:	e7c9      	b.n	8006098 <quorem+0x94>
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	3b04      	subs	r3, #4
 8006108:	2a00      	cmp	r2, #0
 800610a:	d1f0      	bne.n	80060ee <quorem+0xea>
 800610c:	3c01      	subs	r4, #1
 800610e:	e7eb      	b.n	80060e8 <quorem+0xe4>
 8006110:	2000      	movs	r0, #0
 8006112:	e7ee      	b.n	80060f2 <quorem+0xee>
 8006114:	0000      	movs	r0, r0
	...

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b02 	vpush	{d8}
 8006120:	69c5      	ldr	r5, [r0, #28]
 8006122:	b091      	sub	sp, #68	; 0x44
 8006124:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006128:	ec59 8b10 	vmov	r8, r9, d0
 800612c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800612e:	9106      	str	r1, [sp, #24]
 8006130:	4606      	mov	r6, r0
 8006132:	9208      	str	r2, [sp, #32]
 8006134:	930c      	str	r3, [sp, #48]	; 0x30
 8006136:	b975      	cbnz	r5, 8006156 <_dtoa_r+0x3e>
 8006138:	2010      	movs	r0, #16
 800613a:	f000 feb1 	bl	8006ea0 <malloc>
 800613e:	4602      	mov	r2, r0
 8006140:	61f0      	str	r0, [r6, #28]
 8006142:	b920      	cbnz	r0, 800614e <_dtoa_r+0x36>
 8006144:	4ba6      	ldr	r3, [pc, #664]	; (80063e0 <_dtoa_r+0x2c8>)
 8006146:	21ef      	movs	r1, #239	; 0xef
 8006148:	48a6      	ldr	r0, [pc, #664]	; (80063e4 <_dtoa_r+0x2cc>)
 800614a:	f001 fc77 	bl	8007a3c <__assert_func>
 800614e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006152:	6005      	str	r5, [r0, #0]
 8006154:	60c5      	str	r5, [r0, #12]
 8006156:	69f3      	ldr	r3, [r6, #28]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	b151      	cbz	r1, 8006172 <_dtoa_r+0x5a>
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	604a      	str	r2, [r1, #4]
 8006160:	2301      	movs	r3, #1
 8006162:	4093      	lsls	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
 8006166:	4630      	mov	r0, r6
 8006168:	f001 f83c 	bl	80071e4 <_Bfree>
 800616c:	69f3      	ldr	r3, [r6, #28]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f1b9 0300 	subs.w	r3, r9, #0
 8006176:	bfbb      	ittet	lt
 8006178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800617c:	9303      	strlt	r3, [sp, #12]
 800617e:	2300      	movge	r3, #0
 8006180:	2201      	movlt	r2, #1
 8006182:	bfac      	ite	ge
 8006184:	6023      	strge	r3, [r4, #0]
 8006186:	6022      	strlt	r2, [r4, #0]
 8006188:	4b97      	ldr	r3, [pc, #604]	; (80063e8 <_dtoa_r+0x2d0>)
 800618a:	9c03      	ldr	r4, [sp, #12]
 800618c:	43a3      	bics	r3, r4
 800618e:	d11c      	bne.n	80061ca <_dtoa_r+0xb2>
 8006190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006192:	f242 730f 	movw	r3, #9999	; 0x270f
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800619c:	ea53 0308 	orrs.w	r3, r3, r8
 80061a0:	f000 84fb 	beq.w	8006b9a <_dtoa_r+0xa82>
 80061a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061a6:	b963      	cbnz	r3, 80061c2 <_dtoa_r+0xaa>
 80061a8:	4b90      	ldr	r3, [pc, #576]	; (80063ec <_dtoa_r+0x2d4>)
 80061aa:	e020      	b.n	80061ee <_dtoa_r+0xd6>
 80061ac:	4b90      	ldr	r3, [pc, #576]	; (80063f0 <_dtoa_r+0x2d8>)
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	3308      	adds	r3, #8
 80061b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	9801      	ldr	r0, [sp, #4]
 80061b8:	b011      	add	sp, #68	; 0x44
 80061ba:	ecbd 8b02 	vpop	{d8}
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	4b8a      	ldr	r3, [pc, #552]	; (80063ec <_dtoa_r+0x2d4>)
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	3303      	adds	r3, #3
 80061c8:	e7f3      	b.n	80061b2 <_dtoa_r+0x9a>
 80061ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 80061ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	d10c      	bne.n	80061f2 <_dtoa_r+0xda>
 80061d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061da:	2301      	movs	r3, #1
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 84d7 	beq.w	8006b94 <_dtoa_r+0xa7c>
 80061e6:	4b83      	ldr	r3, [pc, #524]	; (80063f4 <_dtoa_r+0x2dc>)
 80061e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	e7e1      	b.n	80061b6 <_dtoa_r+0x9e>
 80061f2:	aa0e      	add	r2, sp, #56	; 0x38
 80061f4:	a90f      	add	r1, sp, #60	; 0x3c
 80061f6:	4630      	mov	r0, r6
 80061f8:	eeb0 0b48 	vmov.f64	d0, d8
 80061fc:	f001 fad4 	bl	80077a8 <__d2b>
 8006200:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006206:	4605      	mov	r5, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d046      	beq.n	800629a <_dtoa_r+0x182>
 800620c:	eeb0 7b48 	vmov.f64	d7, d8
 8006210:	ee18 1a90 	vmov	r1, s17
 8006214:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006218:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800621c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006220:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006224:	2000      	movs	r0, #0
 8006226:	ee07 1a90 	vmov	s15, r1
 800622a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800622e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80063c8 <_dtoa_r+0x2b0>
 8006232:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006236:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80063d0 <_dtoa_r+0x2b8>
 800623a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800623e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80063d8 <_dtoa_r+0x2c0>
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800624a:	eeb0 7b46 	vmov.f64	d7, d6
 800624e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006252:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006256:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	ee16 ba90 	vmov	fp, s13
 8006262:	9009      	str	r0, [sp, #36]	; 0x24
 8006264:	d508      	bpl.n	8006278 <_dtoa_r+0x160>
 8006266:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800626a:	eeb4 6b47 	vcmp.f64	d6, d7
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	bf18      	it	ne
 8006274:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8006278:	f1bb 0f16 	cmp.w	fp, #22
 800627c:	d82b      	bhi.n	80062d6 <_dtoa_r+0x1be>
 800627e:	495e      	ldr	r1, [pc, #376]	; (80063f8 <_dtoa_r+0x2e0>)
 8006280:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006284:	ed91 7b00 	vldr	d7, [r1]
 8006288:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	d501      	bpl.n	8006296 <_dtoa_r+0x17e>
 8006292:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006296:	2100      	movs	r1, #0
 8006298:	e01e      	b.n	80062d8 <_dtoa_r+0x1c0>
 800629a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800629c:	4413      	add	r3, r2
 800629e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80062a2:	2920      	cmp	r1, #32
 80062a4:	bfc1      	itttt	gt
 80062a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80062aa:	408c      	lslgt	r4, r1
 80062ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80062b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80062b4:	bfd6      	itet	le
 80062b6:	f1c1 0120 	rsble	r1, r1, #32
 80062ba:	4321      	orrgt	r1, r4
 80062bc:	fa08 f101 	lslle.w	r1, r8, r1
 80062c0:	ee07 1a90 	vmov	s15, r1
 80062c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80062c8:	3b01      	subs	r3, #1
 80062ca:	ee17 1a90 	vmov	r1, s15
 80062ce:	2001      	movs	r0, #1
 80062d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80062d4:	e7a7      	b.n	8006226 <_dtoa_r+0x10e>
 80062d6:	2101      	movs	r1, #1
 80062d8:	1ad2      	subs	r2, r2, r3
 80062da:	1e53      	subs	r3, r2, #1
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	bf45      	ittet	mi
 80062e0:	f1c2 0301 	rsbmi	r3, r2, #1
 80062e4:	9304      	strmi	r3, [sp, #16]
 80062e6:	2300      	movpl	r3, #0
 80062e8:	2300      	movmi	r3, #0
 80062ea:	bf4c      	ite	mi
 80062ec:	9305      	strmi	r3, [sp, #20]
 80062ee:	9304      	strpl	r3, [sp, #16]
 80062f0:	f1bb 0f00 	cmp.w	fp, #0
 80062f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80062f6:	db18      	blt.n	800632a <_dtoa_r+0x212>
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80062fe:	445b      	add	r3, fp
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	9a06      	ldr	r2, [sp, #24]
 8006306:	2a09      	cmp	r2, #9
 8006308:	d848      	bhi.n	800639c <_dtoa_r+0x284>
 800630a:	2a05      	cmp	r2, #5
 800630c:	bfc4      	itt	gt
 800630e:	3a04      	subgt	r2, #4
 8006310:	9206      	strgt	r2, [sp, #24]
 8006312:	9a06      	ldr	r2, [sp, #24]
 8006314:	f1a2 0202 	sub.w	r2, r2, #2
 8006318:	bfcc      	ite	gt
 800631a:	2400      	movgt	r4, #0
 800631c:	2401      	movle	r4, #1
 800631e:	2a03      	cmp	r2, #3
 8006320:	d847      	bhi.n	80063b2 <_dtoa_r+0x29a>
 8006322:	e8df f002 	tbb	[pc, r2]
 8006326:	2d0b      	.short	0x2d0b
 8006328:	392b      	.short	0x392b
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	2200      	movs	r2, #0
 800632e:	eba3 030b 	sub.w	r3, r3, fp
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	920a      	str	r2, [sp, #40]	; 0x28
 8006336:	f1cb 0300 	rsb	r3, fp, #0
 800633a:	e7e3      	b.n	8006304 <_dtoa_r+0x1ec>
 800633c:	2200      	movs	r2, #0
 800633e:	9207      	str	r2, [sp, #28]
 8006340:	9a08      	ldr	r2, [sp, #32]
 8006342:	2a00      	cmp	r2, #0
 8006344:	dc38      	bgt.n	80063b8 <_dtoa_r+0x2a0>
 8006346:	f04f 0a01 	mov.w	sl, #1
 800634a:	46d1      	mov	r9, sl
 800634c:	4652      	mov	r2, sl
 800634e:	f8cd a020 	str.w	sl, [sp, #32]
 8006352:	69f7      	ldr	r7, [r6, #28]
 8006354:	2100      	movs	r1, #0
 8006356:	2004      	movs	r0, #4
 8006358:	f100 0c14 	add.w	ip, r0, #20
 800635c:	4594      	cmp	ip, r2
 800635e:	d930      	bls.n	80063c2 <_dtoa_r+0x2aa>
 8006360:	6079      	str	r1, [r7, #4]
 8006362:	4630      	mov	r0, r6
 8006364:	930d      	str	r3, [sp, #52]	; 0x34
 8006366:	f000 fefd 	bl	8007164 <_Balloc>
 800636a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800636c:	9001      	str	r0, [sp, #4]
 800636e:	4602      	mov	r2, r0
 8006370:	2800      	cmp	r0, #0
 8006372:	d145      	bne.n	8006400 <_dtoa_r+0x2e8>
 8006374:	4b21      	ldr	r3, [pc, #132]	; (80063fc <_dtoa_r+0x2e4>)
 8006376:	f240 11af 	movw	r1, #431	; 0x1af
 800637a:	e6e5      	b.n	8006148 <_dtoa_r+0x30>
 800637c:	2201      	movs	r2, #1
 800637e:	e7de      	b.n	800633e <_dtoa_r+0x226>
 8006380:	2200      	movs	r2, #0
 8006382:	9207      	str	r2, [sp, #28]
 8006384:	9a08      	ldr	r2, [sp, #32]
 8006386:	eb0b 0a02 	add.w	sl, fp, r2
 800638a:	f10a 0901 	add.w	r9, sl, #1
 800638e:	464a      	mov	r2, r9
 8006390:	2a01      	cmp	r2, #1
 8006392:	bfb8      	it	lt
 8006394:	2201      	movlt	r2, #1
 8006396:	e7dc      	b.n	8006352 <_dtoa_r+0x23a>
 8006398:	2201      	movs	r2, #1
 800639a:	e7f2      	b.n	8006382 <_dtoa_r+0x26a>
 800639c:	2401      	movs	r4, #1
 800639e:	2200      	movs	r2, #0
 80063a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80063a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80063a8:	2100      	movs	r1, #0
 80063aa:	46d1      	mov	r9, sl
 80063ac:	2212      	movs	r2, #18
 80063ae:	9108      	str	r1, [sp, #32]
 80063b0:	e7cf      	b.n	8006352 <_dtoa_r+0x23a>
 80063b2:	2201      	movs	r2, #1
 80063b4:	9207      	str	r2, [sp, #28]
 80063b6:	e7f5      	b.n	80063a4 <_dtoa_r+0x28c>
 80063b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80063bc:	46d1      	mov	r9, sl
 80063be:	4652      	mov	r2, sl
 80063c0:	e7c7      	b.n	8006352 <_dtoa_r+0x23a>
 80063c2:	3101      	adds	r1, #1
 80063c4:	0040      	lsls	r0, r0, #1
 80063c6:	e7c7      	b.n	8006358 <_dtoa_r+0x240>
 80063c8:	636f4361 	.word	0x636f4361
 80063cc:	3fd287a7 	.word	0x3fd287a7
 80063d0:	8b60c8b3 	.word	0x8b60c8b3
 80063d4:	3fc68a28 	.word	0x3fc68a28
 80063d8:	509f79fb 	.word	0x509f79fb
 80063dc:	3fd34413 	.word	0x3fd34413
 80063e0:	08008241 	.word	0x08008241
 80063e4:	08008258 	.word	0x08008258
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	0800823d 	.word	0x0800823d
 80063f0:	08008234 	.word	0x08008234
 80063f4:	08008211 	.word	0x08008211
 80063f8:	08008358 	.word	0x08008358
 80063fc:	080082b0 	.word	0x080082b0
 8006400:	69f2      	ldr	r2, [r6, #28]
 8006402:	9901      	ldr	r1, [sp, #4]
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	f1b9 0f0e 	cmp.w	r9, #14
 800640a:	d86c      	bhi.n	80064e6 <_dtoa_r+0x3ce>
 800640c:	2c00      	cmp	r4, #0
 800640e:	d06a      	beq.n	80064e6 <_dtoa_r+0x3ce>
 8006410:	f1bb 0f00 	cmp.w	fp, #0
 8006414:	f340 80a0 	ble.w	8006558 <_dtoa_r+0x440>
 8006418:	4ac1      	ldr	r2, [pc, #772]	; (8006720 <_dtoa_r+0x608>)
 800641a:	f00b 010f 	and.w	r1, fp, #15
 800641e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006422:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006426:	ed92 7b00 	vldr	d7, [r2]
 800642a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800642e:	f000 8087 	beq.w	8006540 <_dtoa_r+0x428>
 8006432:	49bc      	ldr	r1, [pc, #752]	; (8006724 <_dtoa_r+0x60c>)
 8006434:	ed91 6b08 	vldr	d6, [r1, #32]
 8006438:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800643c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006440:	f002 020f 	and.w	r2, r2, #15
 8006444:	2103      	movs	r1, #3
 8006446:	48b7      	ldr	r0, [pc, #732]	; (8006724 <_dtoa_r+0x60c>)
 8006448:	2a00      	cmp	r2, #0
 800644a:	d17b      	bne.n	8006544 <_dtoa_r+0x42c>
 800644c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006450:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800645a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800645e:	2a00      	cmp	r2, #0
 8006460:	f000 80a0 	beq.w	80065a4 <_dtoa_r+0x48c>
 8006464:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006468:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006470:	f140 8098 	bpl.w	80065a4 <_dtoa_r+0x48c>
 8006474:	f1b9 0f00 	cmp.w	r9, #0
 8006478:	f000 8094 	beq.w	80065a4 <_dtoa_r+0x48c>
 800647c:	f1ba 0f00 	cmp.w	sl, #0
 8006480:	dd2f      	ble.n	80064e2 <_dtoa_r+0x3ca>
 8006482:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006486:	ee27 7b06 	vmul.f64	d7, d7, d6
 800648a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800648e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8006492:	3101      	adds	r1, #1
 8006494:	4654      	mov	r4, sl
 8006496:	ed9d 6b02 	vldr	d6, [sp, #8]
 800649a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800649e:	ee07 1a90 	vmov	s15, r1
 80064a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80064aa:	ee15 7a90 	vmov	r7, s11
 80064ae:	ec51 0b15 	vmov	r0, r1, d5
 80064b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d177      	bne.n	80065aa <_dtoa_r+0x492>
 80064ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80064be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80064c2:	ec41 0b17 	vmov	d7, r0, r1
 80064c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	f300 826a 	bgt.w	80069a6 <_dtoa_r+0x88e>
 80064d2:	eeb1 7b47 	vneg.f64	d7, d7
 80064d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064de:	f100 8260 	bmi.w	80069a2 <_dtoa_r+0x88a>
 80064e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80064e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	f2c0 811d 	blt.w	8006728 <_dtoa_r+0x610>
 80064ee:	f1bb 0f0e 	cmp.w	fp, #14
 80064f2:	f300 8119 	bgt.w	8006728 <_dtoa_r+0x610>
 80064f6:	4b8a      	ldr	r3, [pc, #552]	; (8006720 <_dtoa_r+0x608>)
 80064f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064fc:	ed93 6b00 	vldr	d6, [r3]
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f280 80b7 	bge.w	8006676 <_dtoa_r+0x55e>
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	f300 80b3 	bgt.w	8006676 <_dtoa_r+0x55e>
 8006510:	f040 8246 	bne.w	80069a0 <_dtoa_r+0x888>
 8006514:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006518:	ee26 6b07 	vmul.f64	d6, d6, d7
 800651c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006520:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	464c      	mov	r4, r9
 800652a:	464f      	mov	r7, r9
 800652c:	f280 821c 	bge.w	8006968 <_dtoa_r+0x850>
 8006530:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006534:	2331      	movs	r3, #49	; 0x31
 8006536:	f808 3b01 	strb.w	r3, [r8], #1
 800653a:	f10b 0b01 	add.w	fp, fp, #1
 800653e:	e218      	b.n	8006972 <_dtoa_r+0x85a>
 8006540:	2102      	movs	r1, #2
 8006542:	e780      	b.n	8006446 <_dtoa_r+0x32e>
 8006544:	07d4      	lsls	r4, r2, #31
 8006546:	d504      	bpl.n	8006552 <_dtoa_r+0x43a>
 8006548:	ed90 6b00 	vldr	d6, [r0]
 800654c:	3101      	adds	r1, #1
 800654e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006552:	1052      	asrs	r2, r2, #1
 8006554:	3008      	adds	r0, #8
 8006556:	e777      	b.n	8006448 <_dtoa_r+0x330>
 8006558:	d022      	beq.n	80065a0 <_dtoa_r+0x488>
 800655a:	f1cb 0200 	rsb	r2, fp, #0
 800655e:	4970      	ldr	r1, [pc, #448]	; (8006720 <_dtoa_r+0x608>)
 8006560:	f002 000f 	and.w	r0, r2, #15
 8006564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006568:	ed91 7b00 	vldr	d7, [r1]
 800656c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006574:	486b      	ldr	r0, [pc, #428]	; (8006724 <_dtoa_r+0x60c>)
 8006576:	1112      	asrs	r2, r2, #4
 8006578:	2400      	movs	r4, #0
 800657a:	2102      	movs	r1, #2
 800657c:	b92a      	cbnz	r2, 800658a <_dtoa_r+0x472>
 800657e:	2c00      	cmp	r4, #0
 8006580:	f43f af6a 	beq.w	8006458 <_dtoa_r+0x340>
 8006584:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006588:	e766      	b.n	8006458 <_dtoa_r+0x340>
 800658a:	07d7      	lsls	r7, r2, #31
 800658c:	d505      	bpl.n	800659a <_dtoa_r+0x482>
 800658e:	ed90 6b00 	vldr	d6, [r0]
 8006592:	3101      	adds	r1, #1
 8006594:	2401      	movs	r4, #1
 8006596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800659a:	1052      	asrs	r2, r2, #1
 800659c:	3008      	adds	r0, #8
 800659e:	e7ed      	b.n	800657c <_dtoa_r+0x464>
 80065a0:	2102      	movs	r1, #2
 80065a2:	e759      	b.n	8006458 <_dtoa_r+0x340>
 80065a4:	465a      	mov	r2, fp
 80065a6:	464c      	mov	r4, r9
 80065a8:	e775      	b.n	8006496 <_dtoa_r+0x37e>
 80065aa:	ec41 0b17 	vmov	d7, r0, r1
 80065ae:	495c      	ldr	r1, [pc, #368]	; (8006720 <_dtoa_r+0x608>)
 80065b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80065b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80065b8:	9901      	ldr	r1, [sp, #4]
 80065ba:	440c      	add	r4, r1
 80065bc:	9907      	ldr	r1, [sp, #28]
 80065be:	b351      	cbz	r1, 8006616 <_dtoa_r+0x4fe>
 80065c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80065c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80065c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80065cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80065d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80065d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80065d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80065dc:	ee14 1a90 	vmov	r1, s9
 80065e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80065e4:	3130      	adds	r1, #48	; 0x30
 80065e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80065ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f2:	f808 1b01 	strb.w	r1, [r8], #1
 80065f6:	d439      	bmi.n	800666c <_dtoa_r+0x554>
 80065f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80065fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006604:	d472      	bmi.n	80066ec <_dtoa_r+0x5d4>
 8006606:	45a0      	cmp	r8, r4
 8006608:	f43f af6b 	beq.w	80064e2 <_dtoa_r+0x3ca>
 800660c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006610:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006614:	e7e0      	b.n	80065d8 <_dtoa_r+0x4c0>
 8006616:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800661a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800661e:	4620      	mov	r0, r4
 8006620:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006624:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006628:	ee14 1a90 	vmov	r1, s9
 800662c:	3130      	adds	r1, #48	; 0x30
 800662e:	f808 1b01 	strb.w	r1, [r8], #1
 8006632:	45a0      	cmp	r8, r4
 8006634:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006638:	ee36 6b45 	vsub.f64	d6, d6, d5
 800663c:	d118      	bne.n	8006670 <_dtoa_r+0x558>
 800663e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006642:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006646:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	dc4d      	bgt.n	80066ec <_dtoa_r+0x5d4>
 8006650:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006654:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665c:	f57f af41 	bpl.w	80064e2 <_dtoa_r+0x3ca>
 8006660:	4680      	mov	r8, r0
 8006662:	3801      	subs	r0, #1
 8006664:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d0f9      	beq.n	8006660 <_dtoa_r+0x548>
 800666c:	4693      	mov	fp, r2
 800666e:	e02a      	b.n	80066c6 <_dtoa_r+0x5ae>
 8006670:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006674:	e7d6      	b.n	8006624 <_dtoa_r+0x50c>
 8006676:	ed9d 7b02 	vldr	d7, [sp, #8]
 800667a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800667e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006682:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006686:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800668a:	ee15 3a10 	vmov	r3, s10
 800668e:	3330      	adds	r3, #48	; 0x30
 8006690:	f808 3b01 	strb.w	r3, [r8], #1
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	eba8 0303 	sub.w	r3, r8, r3
 800669a:	4599      	cmp	r9, r3
 800669c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80066a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80066a4:	d133      	bne.n	800670e <_dtoa_r+0x5f6>
 80066a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80066aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b2:	dc1a      	bgt.n	80066ea <_dtoa_r+0x5d2>
 80066b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80066b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066bc:	d103      	bne.n	80066c6 <_dtoa_r+0x5ae>
 80066be:	ee15 3a10 	vmov	r3, s10
 80066c2:	07d9      	lsls	r1, r3, #31
 80066c4:	d411      	bmi.n	80066ea <_dtoa_r+0x5d2>
 80066c6:	4629      	mov	r1, r5
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 fd8b 	bl	80071e4 <_Bfree>
 80066ce:	2300      	movs	r3, #0
 80066d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d2:	f888 3000 	strb.w	r3, [r8]
 80066d6:	f10b 0301 	add.w	r3, fp, #1
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f43f ad69 	beq.w	80061b6 <_dtoa_r+0x9e>
 80066e4:	f8c3 8000 	str.w	r8, [r3]
 80066e8:	e565      	b.n	80061b6 <_dtoa_r+0x9e>
 80066ea:	465a      	mov	r2, fp
 80066ec:	4643      	mov	r3, r8
 80066ee:	4698      	mov	r8, r3
 80066f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80066f4:	2939      	cmp	r1, #57	; 0x39
 80066f6:	d106      	bne.n	8006706 <_dtoa_r+0x5ee>
 80066f8:	9901      	ldr	r1, [sp, #4]
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d1f7      	bne.n	80066ee <_dtoa_r+0x5d6>
 80066fe:	9801      	ldr	r0, [sp, #4]
 8006700:	2130      	movs	r1, #48	; 0x30
 8006702:	3201      	adds	r2, #1
 8006704:	7001      	strb	r1, [r0, #0]
 8006706:	7819      	ldrb	r1, [r3, #0]
 8006708:	3101      	adds	r1, #1
 800670a:	7019      	strb	r1, [r3, #0]
 800670c:	e7ae      	b.n	800666c <_dtoa_r+0x554>
 800670e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006712:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	d1b2      	bne.n	8006682 <_dtoa_r+0x56a>
 800671c:	e7d3      	b.n	80066c6 <_dtoa_r+0x5ae>
 800671e:	bf00      	nop
 8006720:	08008358 	.word	0x08008358
 8006724:	08008330 	.word	0x08008330
 8006728:	9907      	ldr	r1, [sp, #28]
 800672a:	2900      	cmp	r1, #0
 800672c:	f000 80d0 	beq.w	80068d0 <_dtoa_r+0x7b8>
 8006730:	9906      	ldr	r1, [sp, #24]
 8006732:	2901      	cmp	r1, #1
 8006734:	f300 80b4 	bgt.w	80068a0 <_dtoa_r+0x788>
 8006738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673a:	2900      	cmp	r1, #0
 800673c:	f000 80ac 	beq.w	8006898 <_dtoa_r+0x780>
 8006740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006744:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006748:	461c      	mov	r4, r3
 800674a:	9309      	str	r3, [sp, #36]	; 0x24
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	4413      	add	r3, r2
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	9b05      	ldr	r3, [sp, #20]
 8006754:	2101      	movs	r1, #1
 8006756:	4413      	add	r3, r2
 8006758:	4630      	mov	r0, r6
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	f000 fdf8 	bl	8007350 <__i2b>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	4607      	mov	r7, r0
 8006764:	f1b8 0f00 	cmp.w	r8, #0
 8006768:	d00d      	beq.n	8006786 <_dtoa_r+0x66e>
 800676a:	9a05      	ldr	r2, [sp, #20]
 800676c:	2a00      	cmp	r2, #0
 800676e:	dd0a      	ble.n	8006786 <_dtoa_r+0x66e>
 8006770:	4542      	cmp	r2, r8
 8006772:	9904      	ldr	r1, [sp, #16]
 8006774:	bfa8      	it	ge
 8006776:	4642      	movge	r2, r8
 8006778:	1a89      	subs	r1, r1, r2
 800677a:	9104      	str	r1, [sp, #16]
 800677c:	9905      	ldr	r1, [sp, #20]
 800677e:	eba8 0802 	sub.w	r8, r8, r2
 8006782:	1a8a      	subs	r2, r1, r2
 8006784:	9205      	str	r2, [sp, #20]
 8006786:	b303      	cbz	r3, 80067ca <_dtoa_r+0x6b2>
 8006788:	9a07      	ldr	r2, [sp, #28]
 800678a:	2a00      	cmp	r2, #0
 800678c:	f000 80a5 	beq.w	80068da <_dtoa_r+0x7c2>
 8006790:	2c00      	cmp	r4, #0
 8006792:	dd13      	ble.n	80067bc <_dtoa_r+0x6a4>
 8006794:	4639      	mov	r1, r7
 8006796:	4622      	mov	r2, r4
 8006798:	4630      	mov	r0, r6
 800679a:	930d      	str	r3, [sp, #52]	; 0x34
 800679c:	f000 fe98 	bl	80074d0 <__pow5mult>
 80067a0:	462a      	mov	r2, r5
 80067a2:	4601      	mov	r1, r0
 80067a4:	4607      	mov	r7, r0
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 fde8 	bl	800737c <__multiply>
 80067ac:	4629      	mov	r1, r5
 80067ae:	9009      	str	r0, [sp, #36]	; 0x24
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 fd17 	bl	80071e4 <_Bfree>
 80067b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ba:	4615      	mov	r5, r2
 80067bc:	1b1a      	subs	r2, r3, r4
 80067be:	d004      	beq.n	80067ca <_dtoa_r+0x6b2>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 fe84 	bl	80074d0 <__pow5mult>
 80067c8:	4605      	mov	r5, r0
 80067ca:	2101      	movs	r1, #1
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 fdbf 	bl	8007350 <__i2b>
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	f340 8081 	ble.w	80068de <_dtoa_r+0x7c6>
 80067dc:	461a      	mov	r2, r3
 80067de:	4601      	mov	r1, r0
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 fe75 	bl	80074d0 <__pow5mult>
 80067e6:	9b06      	ldr	r3, [sp, #24]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	4604      	mov	r4, r0
 80067ec:	dd7a      	ble.n	80068e4 <_dtoa_r+0x7cc>
 80067ee:	2300      	movs	r3, #0
 80067f0:	9309      	str	r3, [sp, #36]	; 0x24
 80067f2:	6922      	ldr	r2, [r4, #16]
 80067f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80067f8:	6910      	ldr	r0, [r2, #16]
 80067fa:	f000 fd5b 	bl	80072b4 <__hi0bits>
 80067fe:	f1c0 0020 	rsb	r0, r0, #32
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	4418      	add	r0, r3
 8006806:	f010 001f 	ands.w	r0, r0, #31
 800680a:	f000 8093 	beq.w	8006934 <_dtoa_r+0x81c>
 800680e:	f1c0 0220 	rsb	r2, r0, #32
 8006812:	2a04      	cmp	r2, #4
 8006814:	f340 8085 	ble.w	8006922 <_dtoa_r+0x80a>
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	f1c0 001c 	rsb	r0, r0, #28
 800681e:	4403      	add	r3, r0
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9b05      	ldr	r3, [sp, #20]
 8006824:	4480      	add	r8, r0
 8006826:	4403      	add	r3, r0
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd05      	ble.n	800683c <_dtoa_r+0x724>
 8006830:	4629      	mov	r1, r5
 8006832:	461a      	mov	r2, r3
 8006834:	4630      	mov	r0, r6
 8006836:	f000 fea5 	bl	8007584 <__lshift>
 800683a:	4605      	mov	r5, r0
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd05      	ble.n	800684e <_dtoa_r+0x736>
 8006842:	4621      	mov	r1, r4
 8006844:	461a      	mov	r2, r3
 8006846:	4630      	mov	r0, r6
 8006848:	f000 fe9c 	bl	8007584 <__lshift>
 800684c:	4604      	mov	r4, r0
 800684e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d071      	beq.n	8006938 <_dtoa_r+0x820>
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f000 ff00 	bl	800765c <__mcmp>
 800685c:	2800      	cmp	r0, #0
 800685e:	da6b      	bge.n	8006938 <_dtoa_r+0x820>
 8006860:	2300      	movs	r3, #0
 8006862:	4629      	mov	r1, r5
 8006864:	220a      	movs	r2, #10
 8006866:	4630      	mov	r0, r6
 8006868:	f000 fcde 	bl	8007228 <__multadd>
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006872:	4605      	mov	r5, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8197 	beq.w	8006ba8 <_dtoa_r+0xa90>
 800687a:	4639      	mov	r1, r7
 800687c:	2300      	movs	r3, #0
 800687e:	220a      	movs	r2, #10
 8006880:	4630      	mov	r0, r6
 8006882:	f000 fcd1 	bl	8007228 <__multadd>
 8006886:	f1ba 0f00 	cmp.w	sl, #0
 800688a:	4607      	mov	r7, r0
 800688c:	f300 8093 	bgt.w	80069b6 <_dtoa_r+0x89e>
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	2b02      	cmp	r3, #2
 8006894:	dc57      	bgt.n	8006946 <_dtoa_r+0x82e>
 8006896:	e08e      	b.n	80069b6 <_dtoa_r+0x89e>
 8006898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800689a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800689e:	e751      	b.n	8006744 <_dtoa_r+0x62c>
 80068a0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	bfbf      	itttt	lt
 80068a8:	1ae2      	sublt	r2, r4, r3
 80068aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068ac:	189b      	addlt	r3, r3, r2
 80068ae:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068b0:	bfae      	itee	ge
 80068b2:	1b1c      	subge	r4, r3, r4
 80068b4:	4623      	movlt	r3, r4
 80068b6:	2400      	movlt	r4, #0
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	bfb5      	itete	lt
 80068be:	9a04      	ldrlt	r2, [sp, #16]
 80068c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80068c4:	eba2 0809 	sublt.w	r8, r2, r9
 80068c8:	464a      	movge	r2, r9
 80068ca:	bfb8      	it	lt
 80068cc:	2200      	movlt	r2, #0
 80068ce:	e73c      	b.n	800674a <_dtoa_r+0x632>
 80068d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80068d4:	9f07      	ldr	r7, [sp, #28]
 80068d6:	461c      	mov	r4, r3
 80068d8:	e744      	b.n	8006764 <_dtoa_r+0x64c>
 80068da:	461a      	mov	r2, r3
 80068dc:	e770      	b.n	80067c0 <_dtoa_r+0x6a8>
 80068de:	9b06      	ldr	r3, [sp, #24]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	dc18      	bgt.n	8006916 <_dtoa_r+0x7fe>
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	b9b3      	cbnz	r3, 8006916 <_dtoa_r+0x7fe>
 80068e8:	9b03      	ldr	r3, [sp, #12]
 80068ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80068ee:	b9a2      	cbnz	r2, 800691a <_dtoa_r+0x802>
 80068f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068f4:	0d12      	lsrs	r2, r2, #20
 80068f6:	0512      	lsls	r2, r2, #20
 80068f8:	b18a      	cbz	r2, 800691e <_dtoa_r+0x806>
 80068fa:	9b04      	ldr	r3, [sp, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9b05      	ldr	r3, [sp, #20]
 8006902:	3301      	adds	r3, #1
 8006904:	9305      	str	r3, [sp, #20]
 8006906:	2301      	movs	r3, #1
 8006908:	9309      	str	r3, [sp, #36]	; 0x24
 800690a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	f47f af70 	bne.w	80067f2 <_dtoa_r+0x6da>
 8006912:	2001      	movs	r0, #1
 8006914:	e775      	b.n	8006802 <_dtoa_r+0x6ea>
 8006916:	2300      	movs	r3, #0
 8006918:	e7f6      	b.n	8006908 <_dtoa_r+0x7f0>
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	e7f4      	b.n	8006908 <_dtoa_r+0x7f0>
 800691e:	9209      	str	r2, [sp, #36]	; 0x24
 8006920:	e7f3      	b.n	800690a <_dtoa_r+0x7f2>
 8006922:	d082      	beq.n	800682a <_dtoa_r+0x712>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	321c      	adds	r2, #28
 8006928:	4413      	add	r3, r2
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	9b05      	ldr	r3, [sp, #20]
 800692e:	4490      	add	r8, r2
 8006930:	4413      	add	r3, r2
 8006932:	e779      	b.n	8006828 <_dtoa_r+0x710>
 8006934:	4602      	mov	r2, r0
 8006936:	e7f5      	b.n	8006924 <_dtoa_r+0x80c>
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	dc36      	bgt.n	80069ac <_dtoa_r+0x894>
 800693e:	9b06      	ldr	r3, [sp, #24]
 8006940:	2b02      	cmp	r3, #2
 8006942:	dd33      	ble.n	80069ac <_dtoa_r+0x894>
 8006944:	46ca      	mov	sl, r9
 8006946:	f1ba 0f00 	cmp.w	sl, #0
 800694a:	d10d      	bne.n	8006968 <_dtoa_r+0x850>
 800694c:	4621      	mov	r1, r4
 800694e:	4653      	mov	r3, sl
 8006950:	2205      	movs	r2, #5
 8006952:	4630      	mov	r0, r6
 8006954:	f000 fc68 	bl	8007228 <__multadd>
 8006958:	4601      	mov	r1, r0
 800695a:	4604      	mov	r4, r0
 800695c:	4628      	mov	r0, r5
 800695e:	f000 fe7d 	bl	800765c <__mcmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	f73f ade4 	bgt.w	8006530 <_dtoa_r+0x418>
 8006968:	9b08      	ldr	r3, [sp, #32]
 800696a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800696e:	ea6f 0b03 	mvn.w	fp, r3
 8006972:	f04f 0900 	mov.w	r9, #0
 8006976:	4621      	mov	r1, r4
 8006978:	4630      	mov	r0, r6
 800697a:	f000 fc33 	bl	80071e4 <_Bfree>
 800697e:	2f00      	cmp	r7, #0
 8006980:	f43f aea1 	beq.w	80066c6 <_dtoa_r+0x5ae>
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	d005      	beq.n	8006996 <_dtoa_r+0x87e>
 800698a:	45b9      	cmp	r9, r7
 800698c:	d003      	beq.n	8006996 <_dtoa_r+0x87e>
 800698e:	4649      	mov	r1, r9
 8006990:	4630      	mov	r0, r6
 8006992:	f000 fc27 	bl	80071e4 <_Bfree>
 8006996:	4639      	mov	r1, r7
 8006998:	4630      	mov	r0, r6
 800699a:	f000 fc23 	bl	80071e4 <_Bfree>
 800699e:	e692      	b.n	80066c6 <_dtoa_r+0x5ae>
 80069a0:	2400      	movs	r4, #0
 80069a2:	4627      	mov	r7, r4
 80069a4:	e7e0      	b.n	8006968 <_dtoa_r+0x850>
 80069a6:	4693      	mov	fp, r2
 80069a8:	4627      	mov	r7, r4
 80069aa:	e5c1      	b.n	8006530 <_dtoa_r+0x418>
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	46ca      	mov	sl, r9
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8100 	beq.w	8006bb6 <_dtoa_r+0xa9e>
 80069b6:	f1b8 0f00 	cmp.w	r8, #0
 80069ba:	dd05      	ble.n	80069c8 <_dtoa_r+0x8b0>
 80069bc:	4639      	mov	r1, r7
 80069be:	4642      	mov	r2, r8
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 fddf 	bl	8007584 <__lshift>
 80069c6:	4607      	mov	r7, r0
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05d      	beq.n	8006a8a <_dtoa_r+0x972>
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 fbc7 	bl	8007164 <_Balloc>
 80069d6:	4680      	mov	r8, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <_dtoa_r+0x8ce>
 80069da:	4b82      	ldr	r3, [pc, #520]	; (8006be4 <_dtoa_r+0xacc>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80069e2:	f7ff bbb1 	b.w	8006148 <_dtoa_r+0x30>
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	f107 010c 	add.w	r1, r7, #12
 80069f0:	300c      	adds	r0, #12
 80069f2:	f001 f815 	bl	8007a20 <memcpy>
 80069f6:	2201      	movs	r2, #1
 80069f8:	4641      	mov	r1, r8
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 fdc2 	bl	8007584 <__lshift>
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	3301      	adds	r3, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	4453      	add	r3, sl
 8006a0a:	9308      	str	r3, [sp, #32]
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	46b9      	mov	r9, r7
 8006a14:	9307      	str	r3, [sp, #28]
 8006a16:	4607      	mov	r7, r0
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4628      	mov	r0, r5
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	f7ff faef 	bl	8006004 <quorem>
 8006a26:	4603      	mov	r3, r0
 8006a28:	3330      	adds	r3, #48	; 0x30
 8006a2a:	9005      	str	r0, [sp, #20]
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4628      	mov	r0, r5
 8006a30:	9309      	str	r3, [sp, #36]	; 0x24
 8006a32:	f000 fe13 	bl	800765c <__mcmp>
 8006a36:	463a      	mov	r2, r7
 8006a38:	4682      	mov	sl, r0
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 fe29 	bl	8007694 <__mdiff>
 8006a42:	68c2      	ldr	r2, [r0, #12]
 8006a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a46:	4680      	mov	r8, r0
 8006a48:	bb0a      	cbnz	r2, 8006a8e <_dtoa_r+0x976>
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fe05 	bl	800765c <__mcmp>
 8006a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a54:	4602      	mov	r2, r0
 8006a56:	4641      	mov	r1, r8
 8006a58:	4630      	mov	r0, r6
 8006a5a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006a5e:	f000 fbc1 	bl	80071e4 <_Bfree>
 8006a62:	9b06      	ldr	r3, [sp, #24]
 8006a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a66:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006a6a:	ea43 0102 	orr.w	r1, r3, r2
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	4319      	orrs	r1, r3
 8006a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a74:	d10d      	bne.n	8006a92 <_dtoa_r+0x97a>
 8006a76:	2b39      	cmp	r3, #57	; 0x39
 8006a78:	d029      	beq.n	8006ace <_dtoa_r+0x9b6>
 8006a7a:	f1ba 0f00 	cmp.w	sl, #0
 8006a7e:	dd01      	ble.n	8006a84 <_dtoa_r+0x96c>
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	3331      	adds	r3, #49	; 0x31
 8006a84:	9a02      	ldr	r2, [sp, #8]
 8006a86:	7013      	strb	r3, [r2, #0]
 8006a88:	e775      	b.n	8006976 <_dtoa_r+0x85e>
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	e7b8      	b.n	8006a00 <_dtoa_r+0x8e8>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	e7e1      	b.n	8006a56 <_dtoa_r+0x93e>
 8006a92:	f1ba 0f00 	cmp.w	sl, #0
 8006a96:	db06      	blt.n	8006aa6 <_dtoa_r+0x98e>
 8006a98:	9906      	ldr	r1, [sp, #24]
 8006a9a:	ea41 0a0a 	orr.w	sl, r1, sl
 8006a9e:	9907      	ldr	r1, [sp, #28]
 8006aa0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006aa4:	d120      	bne.n	8006ae8 <_dtoa_r+0x9d0>
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	ddec      	ble.n	8006a84 <_dtoa_r+0x96c>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	2201      	movs	r2, #1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	f000 fd67 	bl	8007584 <__lshift>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4605      	mov	r5, r0
 8006aba:	f000 fdcf 	bl	800765c <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	dc02      	bgt.n	8006aca <_dtoa_r+0x9b2>
 8006ac4:	d1de      	bne.n	8006a84 <_dtoa_r+0x96c>
 8006ac6:	07da      	lsls	r2, r3, #31
 8006ac8:	d5dc      	bpl.n	8006a84 <_dtoa_r+0x96c>
 8006aca:	2b39      	cmp	r3, #57	; 0x39
 8006acc:	d1d8      	bne.n	8006a80 <_dtoa_r+0x968>
 8006ace:	9a02      	ldr	r2, [sp, #8]
 8006ad0:	2339      	movs	r3, #57	; 0x39
 8006ad2:	7013      	strb	r3, [r2, #0]
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	4698      	mov	r8, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006ade:	2a39      	cmp	r2, #57	; 0x39
 8006ae0:	d051      	beq.n	8006b86 <_dtoa_r+0xa6e>
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e746      	b.n	8006976 <_dtoa_r+0x85e>
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	dd03      	ble.n	8006af4 <_dtoa_r+0x9dc>
 8006aec:	2b39      	cmp	r3, #57	; 0x39
 8006aee:	d0ee      	beq.n	8006ace <_dtoa_r+0x9b6>
 8006af0:	3301      	adds	r3, #1
 8006af2:	e7c7      	b.n	8006a84 <_dtoa_r+0x96c>
 8006af4:	9a04      	ldr	r2, [sp, #16]
 8006af6:	9908      	ldr	r1, [sp, #32]
 8006af8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006afc:	428a      	cmp	r2, r1
 8006afe:	d02b      	beq.n	8006b58 <_dtoa_r+0xa40>
 8006b00:	4629      	mov	r1, r5
 8006b02:	2300      	movs	r3, #0
 8006b04:	220a      	movs	r2, #10
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 fb8e 	bl	8007228 <__multadd>
 8006b0c:	45b9      	cmp	r9, r7
 8006b0e:	4605      	mov	r5, r0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	f04f 020a 	mov.w	r2, #10
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	d107      	bne.n	8006b2e <_dtoa_r+0xa16>
 8006b1e:	f000 fb83 	bl	8007228 <__multadd>
 8006b22:	4681      	mov	r9, r0
 8006b24:	4607      	mov	r7, r0
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	e774      	b.n	8006a18 <_dtoa_r+0x900>
 8006b2e:	f000 fb7b 	bl	8007228 <__multadd>
 8006b32:	4639      	mov	r1, r7
 8006b34:	4681      	mov	r9, r0
 8006b36:	2300      	movs	r3, #0
 8006b38:	220a      	movs	r2, #10
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f000 fb74 	bl	8007228 <__multadd>
 8006b40:	4607      	mov	r7, r0
 8006b42:	e7f0      	b.n	8006b26 <_dtoa_r+0xa0e>
 8006b44:	f1ba 0f00 	cmp.w	sl, #0
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	bfcc      	ite	gt
 8006b4c:	46d0      	movgt	r8, sl
 8006b4e:	f04f 0801 	movle.w	r8, #1
 8006b52:	4490      	add	r8, r2
 8006b54:	f04f 0900 	mov.w	r9, #0
 8006b58:	4629      	mov	r1, r5
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	9302      	str	r3, [sp, #8]
 8006b60:	f000 fd10 	bl	8007584 <__lshift>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4605      	mov	r5, r0
 8006b68:	f000 fd78 	bl	800765c <__mcmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dcb1      	bgt.n	8006ad4 <_dtoa_r+0x9bc>
 8006b70:	d102      	bne.n	8006b78 <_dtoa_r+0xa60>
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	07db      	lsls	r3, r3, #31
 8006b76:	d4ad      	bmi.n	8006ad4 <_dtoa_r+0x9bc>
 8006b78:	4643      	mov	r3, r8
 8006b7a:	4698      	mov	r8, r3
 8006b7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b80:	2a30      	cmp	r2, #48	; 0x30
 8006b82:	d0fa      	beq.n	8006b7a <_dtoa_r+0xa62>
 8006b84:	e6f7      	b.n	8006976 <_dtoa_r+0x85e>
 8006b86:	9a01      	ldr	r2, [sp, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d1a4      	bne.n	8006ad6 <_dtoa_r+0x9be>
 8006b8c:	f10b 0b01 	add.w	fp, fp, #1
 8006b90:	2331      	movs	r3, #49	; 0x31
 8006b92:	e778      	b.n	8006a86 <_dtoa_r+0x96e>
 8006b94:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <_dtoa_r+0xad0>)
 8006b96:	f7ff bb2a 	b.w	80061ee <_dtoa_r+0xd6>
 8006b9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f ab05 	bne.w	80061ac <_dtoa_r+0x94>
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <_dtoa_r+0xad4>)
 8006ba4:	f7ff bb23 	b.w	80061ee <_dtoa_r+0xd6>
 8006ba8:	f1ba 0f00 	cmp.w	sl, #0
 8006bac:	dc03      	bgt.n	8006bb6 <_dtoa_r+0xa9e>
 8006bae:	9b06      	ldr	r3, [sp, #24]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f73f aec8 	bgt.w	8006946 <_dtoa_r+0x82e>
 8006bb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f7ff fa21 	bl	8006004 <quorem>
 8006bc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006bc6:	f808 3b01 	strb.w	r3, [r8], #1
 8006bca:	9a01      	ldr	r2, [sp, #4]
 8006bcc:	eba8 0202 	sub.w	r2, r8, r2
 8006bd0:	4592      	cmp	sl, r2
 8006bd2:	ddb7      	ble.n	8006b44 <_dtoa_r+0xa2c>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	220a      	movs	r2, #10
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f000 fb24 	bl	8007228 <__multadd>
 8006be0:	4605      	mov	r5, r0
 8006be2:	e7ea      	b.n	8006bba <_dtoa_r+0xaa2>
 8006be4:	080082b0 	.word	0x080082b0
 8006be8:	08008210 	.word	0x08008210
 8006bec:	08008234 	.word	0x08008234

08006bf0 <__ssputs_r>:
 8006bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	688e      	ldr	r6, [r1, #8]
 8006bf6:	461f      	mov	r7, r3
 8006bf8:	42be      	cmp	r6, r7
 8006bfa:	680b      	ldr	r3, [r1, #0]
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	4690      	mov	r8, r2
 8006c02:	d82c      	bhi.n	8006c5e <__ssputs_r+0x6e>
 8006c04:	898a      	ldrh	r2, [r1, #12]
 8006c06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c0a:	d026      	beq.n	8006c5a <__ssputs_r+0x6a>
 8006c0c:	6965      	ldr	r5, [r4, #20]
 8006c0e:	6909      	ldr	r1, [r1, #16]
 8006c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c14:	eba3 0901 	sub.w	r9, r3, r1
 8006c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c1c:	1c7b      	adds	r3, r7, #1
 8006c1e:	444b      	add	r3, r9
 8006c20:	106d      	asrs	r5, r5, #1
 8006c22:	429d      	cmp	r5, r3
 8006c24:	bf38      	it	cc
 8006c26:	461d      	movcc	r5, r3
 8006c28:	0553      	lsls	r3, r2, #21
 8006c2a:	d527      	bpl.n	8006c7c <__ssputs_r+0x8c>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f000 f95f 	bl	8006ef0 <_malloc_r>
 8006c32:	4606      	mov	r6, r0
 8006c34:	b360      	cbz	r0, 8006c90 <__ssputs_r+0xa0>
 8006c36:	6921      	ldr	r1, [r4, #16]
 8006c38:	464a      	mov	r2, r9
 8006c3a:	f000 fef1 	bl	8007a20 <memcpy>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	6126      	str	r6, [r4, #16]
 8006c4c:	6165      	str	r5, [r4, #20]
 8006c4e:	444e      	add	r6, r9
 8006c50:	eba5 0509 	sub.w	r5, r5, r9
 8006c54:	6026      	str	r6, [r4, #0]
 8006c56:	60a5      	str	r5, [r4, #8]
 8006c58:	463e      	mov	r6, r7
 8006c5a:	42be      	cmp	r6, r7
 8006c5c:	d900      	bls.n	8006c60 <__ssputs_r+0x70>
 8006c5e:	463e      	mov	r6, r7
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	4632      	mov	r2, r6
 8006c64:	4641      	mov	r1, r8
 8006c66:	f000 fe6b 	bl	8007940 <memmove>
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	1b9b      	subs	r3, r3, r6
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	4433      	add	r3, r6
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	2000      	movs	r0, #0
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	f000 fe30 	bl	80078e2 <_realloc_r>
 8006c82:	4606      	mov	r6, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d1e0      	bne.n	8006c4a <__ssputs_r+0x5a>
 8006c88:	6921      	ldr	r1, [r4, #16]
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f000 ff0a 	bl	8007aa4 <_free_r>
 8006c90:	230c      	movs	r3, #12
 8006c92:	f8ca 3000 	str.w	r3, [sl]
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca2:	e7e9      	b.n	8006c78 <__ssputs_r+0x88>

08006ca4 <_svfiprintf_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	4698      	mov	r8, r3
 8006caa:	898b      	ldrh	r3, [r1, #12]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	b09d      	sub	sp, #116	; 0x74
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	d50e      	bpl.n	8006cd6 <_svfiprintf_r+0x32>
 8006cb8:	690b      	ldr	r3, [r1, #16]
 8006cba:	b963      	cbnz	r3, 8006cd6 <_svfiprintf_r+0x32>
 8006cbc:	2140      	movs	r1, #64	; 0x40
 8006cbe:	f000 f917 	bl	8006ef0 <_malloc_r>
 8006cc2:	6028      	str	r0, [r5, #0]
 8006cc4:	6128      	str	r0, [r5, #16]
 8006cc6:	b920      	cbnz	r0, 8006cd2 <_svfiprintf_r+0x2e>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd0:	e0d0      	b.n	8006e74 <_svfiprintf_r+0x1d0>
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	616b      	str	r3, [r5, #20]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	2320      	movs	r3, #32
 8006cdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ce4:	2330      	movs	r3, #48	; 0x30
 8006ce6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e8c <_svfiprintf_r+0x1e8>
 8006cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cee:	f04f 0901 	mov.w	r9, #1
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	469a      	mov	sl, r3
 8006cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cfa:	b10a      	cbz	r2, 8006d00 <_svfiprintf_r+0x5c>
 8006cfc:	2a25      	cmp	r2, #37	; 0x25
 8006cfe:	d1f9      	bne.n	8006cf4 <_svfiprintf_r+0x50>
 8006d00:	ebba 0b04 	subs.w	fp, sl, r4
 8006d04:	d00b      	beq.n	8006d1e <_svfiprintf_r+0x7a>
 8006d06:	465b      	mov	r3, fp
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ff6f 	bl	8006bf0 <__ssputs_r>
 8006d12:	3001      	adds	r0, #1
 8006d14:	f000 80a9 	beq.w	8006e6a <_svfiprintf_r+0x1c6>
 8006d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d1a:	445a      	add	r2, fp
 8006d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a1 	beq.w	8006e6a <_svfiprintf_r+0x1c6>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d32:	f10a 0a01 	add.w	sl, sl, #1
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	9307      	str	r3, [sp, #28]
 8006d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d40:	4654      	mov	r4, sl
 8006d42:	2205      	movs	r2, #5
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	4850      	ldr	r0, [pc, #320]	; (8006e8c <_svfiprintf_r+0x1e8>)
 8006d4a:	f7f9 fa79 	bl	8000240 <memchr>
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	b9d8      	cbnz	r0, 8006d8a <_svfiprintf_r+0xe6>
 8006d52:	06d0      	lsls	r0, r2, #27
 8006d54:	bf44      	itt	mi
 8006d56:	2320      	movmi	r3, #32
 8006d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d5c:	0711      	lsls	r1, r2, #28
 8006d5e:	bf44      	itt	mi
 8006d60:	232b      	movmi	r3, #43	; 0x2b
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d66:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6c:	d015      	beq.n	8006d9a <_svfiprintf_r+0xf6>
 8006d6e:	9a07      	ldr	r2, [sp, #28]
 8006d70:	4654      	mov	r4, sl
 8006d72:	2000      	movs	r0, #0
 8006d74:	f04f 0c0a 	mov.w	ip, #10
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d7e:	3b30      	subs	r3, #48	; 0x30
 8006d80:	2b09      	cmp	r3, #9
 8006d82:	d94d      	bls.n	8006e20 <_svfiprintf_r+0x17c>
 8006d84:	b1b0      	cbz	r0, 8006db4 <_svfiprintf_r+0x110>
 8006d86:	9207      	str	r2, [sp, #28]
 8006d88:	e014      	b.n	8006db4 <_svfiprintf_r+0x110>
 8006d8a:	eba0 0308 	sub.w	r3, r0, r8
 8006d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d92:	4313      	orrs	r3, r2
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	46a2      	mov	sl, r4
 8006d98:	e7d2      	b.n	8006d40 <_svfiprintf_r+0x9c>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	1d19      	adds	r1, r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	9103      	str	r1, [sp, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfbb      	ittet	lt
 8006da6:	425b      	neglt	r3, r3
 8006da8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dac:	9307      	strge	r3, [sp, #28]
 8006dae:	9307      	strlt	r3, [sp, #28]
 8006db0:	bfb8      	it	lt
 8006db2:	9204      	strlt	r2, [sp, #16]
 8006db4:	7823      	ldrb	r3, [r4, #0]
 8006db6:	2b2e      	cmp	r3, #46	; 0x2e
 8006db8:	d10c      	bne.n	8006dd4 <_svfiprintf_r+0x130>
 8006dba:	7863      	ldrb	r3, [r4, #1]
 8006dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dbe:	d134      	bne.n	8006e2a <_svfiprintf_r+0x186>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	9203      	str	r2, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfb8      	it	lt
 8006dcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dd0:	3402      	adds	r4, #2
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e9c <_svfiprintf_r+0x1f8>
 8006dd8:	7821      	ldrb	r1, [r4, #0]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f7f9 fa2f 	bl	8000240 <memchr>
 8006de2:	b138      	cbz	r0, 8006df4 <_svfiprintf_r+0x150>
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	eba0 000a 	sub.w	r0, r0, sl
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	4082      	lsls	r2, r0
 8006dee:	4313      	orrs	r3, r2
 8006df0:	3401      	adds	r4, #1
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	4825      	ldr	r0, [pc, #148]	; (8006e90 <_svfiprintf_r+0x1ec>)
 8006dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dfe:	2206      	movs	r2, #6
 8006e00:	f7f9 fa1e 	bl	8000240 <memchr>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d038      	beq.n	8006e7a <_svfiprintf_r+0x1d6>
 8006e08:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <_svfiprintf_r+0x1f0>)
 8006e0a:	bb1b      	cbnz	r3, 8006e54 <_svfiprintf_r+0x1b0>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	3308      	adds	r3, #8
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1a:	4433      	add	r3, r6
 8006e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1e:	e768      	b.n	8006cf2 <_svfiprintf_r+0x4e>
 8006e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e24:	460c      	mov	r4, r1
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7a6      	b.n	8006d78 <_svfiprintf_r+0xd4>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	3401      	adds	r4, #1
 8006e2e:	9305      	str	r3, [sp, #20]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f04f 0c0a 	mov.w	ip, #10
 8006e36:	4620      	mov	r0, r4
 8006e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e3c:	3a30      	subs	r2, #48	; 0x30
 8006e3e:	2a09      	cmp	r2, #9
 8006e40:	d903      	bls.n	8006e4a <_svfiprintf_r+0x1a6>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0c6      	beq.n	8006dd4 <_svfiprintf_r+0x130>
 8006e46:	9105      	str	r1, [sp, #20]
 8006e48:	e7c4      	b.n	8006dd4 <_svfiprintf_r+0x130>
 8006e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e4e:	4604      	mov	r4, r0
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7f0      	b.n	8006e36 <_svfiprintf_r+0x192>
 8006e54:	ab03      	add	r3, sp, #12
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <_svfiprintf_r+0x1f4>)
 8006e5c:	a904      	add	r1, sp, #16
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7fe fc1e 	bl	80056a0 <_printf_float>
 8006e64:	1c42      	adds	r2, r0, #1
 8006e66:	4606      	mov	r6, r0
 8006e68:	d1d6      	bne.n	8006e18 <_svfiprintf_r+0x174>
 8006e6a:	89ab      	ldrh	r3, [r5, #12]
 8006e6c:	065b      	lsls	r3, r3, #25
 8006e6e:	f53f af2d 	bmi.w	8006ccc <_svfiprintf_r+0x28>
 8006e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e74:	b01d      	add	sp, #116	; 0x74
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <_svfiprintf_r+0x1f4>)
 8006e82:	a904      	add	r1, sp, #16
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7fe fe93 	bl	8005bb0 <_printf_i>
 8006e8a:	e7eb      	b.n	8006e64 <_svfiprintf_r+0x1c0>
 8006e8c:	080082c1 	.word	0x080082c1
 8006e90:	080082cb 	.word	0x080082cb
 8006e94:	080056a1 	.word	0x080056a1
 8006e98:	08006bf1 	.word	0x08006bf1
 8006e9c:	080082c7 	.word	0x080082c7

08006ea0 <malloc>:
 8006ea0:	4b02      	ldr	r3, [pc, #8]	; (8006eac <malloc+0xc>)
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f000 b823 	b.w	8006ef0 <_malloc_r>
 8006eaa:	bf00      	nop
 8006eac:	20000064 	.word	0x20000064

08006eb0 <sbrk_aligned>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4e0e      	ldr	r6, [pc, #56]	; (8006eec <sbrk_aligned+0x3c>)
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	6831      	ldr	r1, [r6, #0]
 8006eb8:	4605      	mov	r5, r0
 8006eba:	b911      	cbnz	r1, 8006ec2 <sbrk_aligned+0x12>
 8006ebc:	f000 fd8e 	bl	80079dc <_sbrk_r>
 8006ec0:	6030      	str	r0, [r6, #0]
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 fd89 	bl	80079dc <_sbrk_r>
 8006eca:	1c43      	adds	r3, r0, #1
 8006ecc:	d00a      	beq.n	8006ee4 <sbrk_aligned+0x34>
 8006ece:	1cc4      	adds	r4, r0, #3
 8006ed0:	f024 0403 	bic.w	r4, r4, #3
 8006ed4:	42a0      	cmp	r0, r4
 8006ed6:	d007      	beq.n	8006ee8 <sbrk_aligned+0x38>
 8006ed8:	1a21      	subs	r1, r4, r0
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 fd7e 	bl	80079dc <_sbrk_r>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d101      	bne.n	8006ee8 <sbrk_aligned+0x38>
 8006ee4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ee8:	4620      	mov	r0, r4
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	200004dc 	.word	0x200004dc

08006ef0 <_malloc_r>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	1ccd      	adds	r5, r1, #3
 8006ef6:	f025 0503 	bic.w	r5, r5, #3
 8006efa:	3508      	adds	r5, #8
 8006efc:	2d0c      	cmp	r5, #12
 8006efe:	bf38      	it	cc
 8006f00:	250c      	movcc	r5, #12
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	4607      	mov	r7, r0
 8006f06:	db01      	blt.n	8006f0c <_malloc_r+0x1c>
 8006f08:	42a9      	cmp	r1, r5
 8006f0a:	d905      	bls.n	8006f18 <_malloc_r+0x28>
 8006f0c:	230c      	movs	r3, #12
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	2600      	movs	r6, #0
 8006f12:	4630      	mov	r0, r6
 8006f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fec <_malloc_r+0xfc>
 8006f1c:	f000 f916 	bl	800714c <__malloc_lock>
 8006f20:	f8d8 3000 	ldr.w	r3, [r8]
 8006f24:	461c      	mov	r4, r3
 8006f26:	bb5c      	cbnz	r4, 8006f80 <_malloc_r+0x90>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f7ff ffc0 	bl	8006eb0 <sbrk_aligned>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	4604      	mov	r4, r0
 8006f34:	d155      	bne.n	8006fe2 <_malloc_r+0xf2>
 8006f36:	f8d8 4000 	ldr.w	r4, [r8]
 8006f3a:	4626      	mov	r6, r4
 8006f3c:	2e00      	cmp	r6, #0
 8006f3e:	d145      	bne.n	8006fcc <_malloc_r+0xdc>
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d048      	beq.n	8006fd6 <_malloc_r+0xe6>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	4631      	mov	r1, r6
 8006f48:	4638      	mov	r0, r7
 8006f4a:	eb04 0903 	add.w	r9, r4, r3
 8006f4e:	f000 fd45 	bl	80079dc <_sbrk_r>
 8006f52:	4581      	cmp	r9, r0
 8006f54:	d13f      	bne.n	8006fd6 <_malloc_r+0xe6>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	1a6d      	subs	r5, r5, r1
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7ff ffa7 	bl	8006eb0 <sbrk_aligned>
 8006f62:	3001      	adds	r0, #1
 8006f64:	d037      	beq.n	8006fd6 <_malloc_r+0xe6>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	442b      	add	r3, r5
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d038      	beq.n	8006fe6 <_malloc_r+0xf6>
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	42a2      	cmp	r2, r4
 8006f78:	d12b      	bne.n	8006fd2 <_malloc_r+0xe2>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e00f      	b.n	8006fa0 <_malloc_r+0xb0>
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	1b52      	subs	r2, r2, r5
 8006f84:	d41f      	bmi.n	8006fc6 <_malloc_r+0xd6>
 8006f86:	2a0b      	cmp	r2, #11
 8006f88:	d917      	bls.n	8006fba <_malloc_r+0xca>
 8006f8a:	1961      	adds	r1, r4, r5
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	6025      	str	r5, [r4, #0]
 8006f90:	bf18      	it	ne
 8006f92:	6059      	strne	r1, [r3, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	bf08      	it	eq
 8006f98:	f8c8 1000 	streq.w	r1, [r8]
 8006f9c:	5162      	str	r2, [r4, r5]
 8006f9e:	604b      	str	r3, [r1, #4]
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f104 060b 	add.w	r6, r4, #11
 8006fa6:	f000 f8d7 	bl	8007158 <__malloc_unlock>
 8006faa:	f026 0607 	bic.w	r6, r6, #7
 8006fae:	1d23      	adds	r3, r4, #4
 8006fb0:	1af2      	subs	r2, r6, r3
 8006fb2:	d0ae      	beq.n	8006f12 <_malloc_r+0x22>
 8006fb4:	1b9b      	subs	r3, r3, r6
 8006fb6:	50a3      	str	r3, [r4, r2]
 8006fb8:	e7ab      	b.n	8006f12 <_malloc_r+0x22>
 8006fba:	42a3      	cmp	r3, r4
 8006fbc:	6862      	ldr	r2, [r4, #4]
 8006fbe:	d1dd      	bne.n	8006f7c <_malloc_r+0x8c>
 8006fc0:	f8c8 2000 	str.w	r2, [r8]
 8006fc4:	e7ec      	b.n	8006fa0 <_malloc_r+0xb0>
 8006fc6:	4623      	mov	r3, r4
 8006fc8:	6864      	ldr	r4, [r4, #4]
 8006fca:	e7ac      	b.n	8006f26 <_malloc_r+0x36>
 8006fcc:	4634      	mov	r4, r6
 8006fce:	6876      	ldr	r6, [r6, #4]
 8006fd0:	e7b4      	b.n	8006f3c <_malloc_r+0x4c>
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	e7cc      	b.n	8006f70 <_malloc_r+0x80>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f000 f8bc 	bl	8007158 <__malloc_unlock>
 8006fe0:	e797      	b.n	8006f12 <_malloc_r+0x22>
 8006fe2:	6025      	str	r5, [r4, #0]
 8006fe4:	e7dc      	b.n	8006fa0 <_malloc_r+0xb0>
 8006fe6:	605b      	str	r3, [r3, #4]
 8006fe8:	deff      	udf	#255	; 0xff
 8006fea:	bf00      	nop
 8006fec:	200004d8 	.word	0x200004d8

08006ff0 <__sflush_r>:
 8006ff0:	898a      	ldrh	r2, [r1, #12]
 8006ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	0710      	lsls	r0, r2, #28
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	d458      	bmi.n	80070b0 <__sflush_r+0xc0>
 8006ffe:	684b      	ldr	r3, [r1, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc05      	bgt.n	8007010 <__sflush_r+0x20>
 8007004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	dc02      	bgt.n	8007010 <__sflush_r+0x20>
 800700a:	2000      	movs	r0, #0
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007012:	2e00      	cmp	r6, #0
 8007014:	d0f9      	beq.n	800700a <__sflush_r+0x1a>
 8007016:	2300      	movs	r3, #0
 8007018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800701c:	682f      	ldr	r7, [r5, #0]
 800701e:	6a21      	ldr	r1, [r4, #32]
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	d032      	beq.n	800708a <__sflush_r+0x9a>
 8007024:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	075a      	lsls	r2, r3, #29
 800702a:	d505      	bpl.n	8007038 <__sflush_r+0x48>
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	1ac0      	subs	r0, r0, r3
 8007030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007032:	b10b      	cbz	r3, 8007038 <__sflush_r+0x48>
 8007034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007036:	1ac0      	subs	r0, r0, r3
 8007038:	2300      	movs	r3, #0
 800703a:	4602      	mov	r2, r0
 800703c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703e:	6a21      	ldr	r1, [r4, #32]
 8007040:	4628      	mov	r0, r5
 8007042:	47b0      	blx	r6
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	d106      	bne.n	8007058 <__sflush_r+0x68>
 800704a:	6829      	ldr	r1, [r5, #0]
 800704c:	291d      	cmp	r1, #29
 800704e:	d82b      	bhi.n	80070a8 <__sflush_r+0xb8>
 8007050:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <__sflush_r+0x108>)
 8007052:	410a      	asrs	r2, r1
 8007054:	07d6      	lsls	r6, r2, #31
 8007056:	d427      	bmi.n	80070a8 <__sflush_r+0xb8>
 8007058:	2200      	movs	r2, #0
 800705a:	6062      	str	r2, [r4, #4]
 800705c:	04d9      	lsls	r1, r3, #19
 800705e:	6922      	ldr	r2, [r4, #16]
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	d504      	bpl.n	800706e <__sflush_r+0x7e>
 8007064:	1c42      	adds	r2, r0, #1
 8007066:	d101      	bne.n	800706c <__sflush_r+0x7c>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b903      	cbnz	r3, 800706e <__sflush_r+0x7e>
 800706c:	6560      	str	r0, [r4, #84]	; 0x54
 800706e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007070:	602f      	str	r7, [r5, #0]
 8007072:	2900      	cmp	r1, #0
 8007074:	d0c9      	beq.n	800700a <__sflush_r+0x1a>
 8007076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800707a:	4299      	cmp	r1, r3
 800707c:	d002      	beq.n	8007084 <__sflush_r+0x94>
 800707e:	4628      	mov	r0, r5
 8007080:	f000 fd10 	bl	8007aa4 <_free_r>
 8007084:	2000      	movs	r0, #0
 8007086:	6360      	str	r0, [r4, #52]	; 0x34
 8007088:	e7c0      	b.n	800700c <__sflush_r+0x1c>
 800708a:	2301      	movs	r3, #1
 800708c:	4628      	mov	r0, r5
 800708e:	47b0      	blx	r6
 8007090:	1c41      	adds	r1, r0, #1
 8007092:	d1c8      	bne.n	8007026 <__sflush_r+0x36>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0c5      	beq.n	8007026 <__sflush_r+0x36>
 800709a:	2b1d      	cmp	r3, #29
 800709c:	d001      	beq.n	80070a2 <__sflush_r+0xb2>
 800709e:	2b16      	cmp	r3, #22
 80070a0:	d101      	bne.n	80070a6 <__sflush_r+0xb6>
 80070a2:	602f      	str	r7, [r5, #0]
 80070a4:	e7b1      	b.n	800700a <__sflush_r+0x1a>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7ad      	b.n	800700c <__sflush_r+0x1c>
 80070b0:	690f      	ldr	r7, [r1, #16]
 80070b2:	2f00      	cmp	r7, #0
 80070b4:	d0a9      	beq.n	800700a <__sflush_r+0x1a>
 80070b6:	0793      	lsls	r3, r2, #30
 80070b8:	680e      	ldr	r6, [r1, #0]
 80070ba:	bf08      	it	eq
 80070bc:	694b      	ldreq	r3, [r1, #20]
 80070be:	600f      	str	r7, [r1, #0]
 80070c0:	bf18      	it	ne
 80070c2:	2300      	movne	r3, #0
 80070c4:	eba6 0807 	sub.w	r8, r6, r7
 80070c8:	608b      	str	r3, [r1, #8]
 80070ca:	f1b8 0f00 	cmp.w	r8, #0
 80070ce:	dd9c      	ble.n	800700a <__sflush_r+0x1a>
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d4:	4643      	mov	r3, r8
 80070d6:	463a      	mov	r2, r7
 80070d8:	4628      	mov	r0, r5
 80070da:	47b0      	blx	r6
 80070dc:	2800      	cmp	r0, #0
 80070de:	dc06      	bgt.n	80070ee <__sflush_r+0xfe>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ec:	e78e      	b.n	800700c <__sflush_r+0x1c>
 80070ee:	4407      	add	r7, r0
 80070f0:	eba8 0800 	sub.w	r8, r8, r0
 80070f4:	e7e9      	b.n	80070ca <__sflush_r+0xda>
 80070f6:	bf00      	nop
 80070f8:	dfbffffe 	.word	0xdfbffffe

080070fc <_fflush_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	4605      	mov	r5, r0
 8007102:	460c      	mov	r4, r1
 8007104:	b913      	cbnz	r3, 800710c <_fflush_r+0x10>
 8007106:	2500      	movs	r5, #0
 8007108:	4628      	mov	r0, r5
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	b118      	cbz	r0, 8007116 <_fflush_r+0x1a>
 800710e:	6a03      	ldr	r3, [r0, #32]
 8007110:	b90b      	cbnz	r3, 8007116 <_fflush_r+0x1a>
 8007112:	f7fe ff09 	bl	8005f28 <__sinit>
 8007116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f3      	beq.n	8007106 <_fflush_r+0xa>
 800711e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007120:	07d0      	lsls	r0, r2, #31
 8007122:	d404      	bmi.n	800712e <_fflush_r+0x32>
 8007124:	0599      	lsls	r1, r3, #22
 8007126:	d402      	bmi.n	800712e <_fflush_r+0x32>
 8007128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800712a:	f7fe ff69 	bl	8006000 <__retarget_lock_acquire_recursive>
 800712e:	4628      	mov	r0, r5
 8007130:	4621      	mov	r1, r4
 8007132:	f7ff ff5d 	bl	8006ff0 <__sflush_r>
 8007136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007138:	07da      	lsls	r2, r3, #31
 800713a:	4605      	mov	r5, r0
 800713c:	d4e4      	bmi.n	8007108 <_fflush_r+0xc>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	059b      	lsls	r3, r3, #22
 8007142:	d4e1      	bmi.n	8007108 <_fflush_r+0xc>
 8007144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007146:	f7fe ff5c 	bl	8006002 <__retarget_lock_release_recursive>
 800714a:	e7dd      	b.n	8007108 <_fflush_r+0xc>

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	; (8007154 <__malloc_lock+0x8>)
 800714e:	f7fe bf57 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	200004d4 	.word	0x200004d4

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__malloc_unlock+0x8>)
 800715a:	f7fe bf52 	b.w	8006002 <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	200004d4 	.word	0x200004d4

08007164 <_Balloc>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	69c6      	ldr	r6, [r0, #28]
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	b976      	cbnz	r6, 800718c <_Balloc+0x28>
 800716e:	2010      	movs	r0, #16
 8007170:	f7ff fe96 	bl	8006ea0 <malloc>
 8007174:	4602      	mov	r2, r0
 8007176:	61e0      	str	r0, [r4, #28]
 8007178:	b920      	cbnz	r0, 8007184 <_Balloc+0x20>
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <_Balloc+0x78>)
 800717c:	4818      	ldr	r0, [pc, #96]	; (80071e0 <_Balloc+0x7c>)
 800717e:	216b      	movs	r1, #107	; 0x6b
 8007180:	f000 fc5c 	bl	8007a3c <__assert_func>
 8007184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007188:	6006      	str	r6, [r0, #0]
 800718a:	60c6      	str	r6, [r0, #12]
 800718c:	69e6      	ldr	r6, [r4, #28]
 800718e:	68f3      	ldr	r3, [r6, #12]
 8007190:	b183      	cbz	r3, 80071b4 <_Balloc+0x50>
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800719a:	b9b8      	cbnz	r0, 80071cc <_Balloc+0x68>
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f605 	lsl.w	r6, r1, r5
 80071a2:	1d72      	adds	r2, r6, #5
 80071a4:	0092      	lsls	r2, r2, #2
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fc66 	bl	8007a78 <_calloc_r>
 80071ac:	b160      	cbz	r0, 80071c8 <_Balloc+0x64>
 80071ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071b2:	e00e      	b.n	80071d2 <_Balloc+0x6e>
 80071b4:	2221      	movs	r2, #33	; 0x21
 80071b6:	2104      	movs	r1, #4
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fc5d 	bl	8007a78 <_calloc_r>
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	60f0      	str	r0, [r6, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e4      	bne.n	8007192 <_Balloc+0x2e>
 80071c8:	2000      	movs	r0, #0
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	6802      	ldr	r2, [r0, #0]
 80071ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071d2:	2300      	movs	r3, #0
 80071d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071d8:	e7f7      	b.n	80071ca <_Balloc+0x66>
 80071da:	bf00      	nop
 80071dc:	08008241 	.word	0x08008241
 80071e0:	080082d2 	.word	0x080082d2

080071e4 <_Bfree>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	69c6      	ldr	r6, [r0, #28]
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	b976      	cbnz	r6, 800720c <_Bfree+0x28>
 80071ee:	2010      	movs	r0, #16
 80071f0:	f7ff fe56 	bl	8006ea0 <malloc>
 80071f4:	4602      	mov	r2, r0
 80071f6:	61e8      	str	r0, [r5, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_Bfree+0x20>
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <_Bfree+0x3c>)
 80071fc:	4809      	ldr	r0, [pc, #36]	; (8007224 <_Bfree+0x40>)
 80071fe:	218f      	movs	r1, #143	; 0x8f
 8007200:	f000 fc1c 	bl	8007a3c <__assert_func>
 8007204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007208:	6006      	str	r6, [r0, #0]
 800720a:	60c6      	str	r6, [r0, #12]
 800720c:	b13c      	cbz	r4, 800721e <_Bfree+0x3a>
 800720e:	69eb      	ldr	r3, [r5, #28]
 8007210:	6862      	ldr	r2, [r4, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007218:	6021      	str	r1, [r4, #0]
 800721a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	08008241 	.word	0x08008241
 8007224:	080082d2 	.word	0x080082d2

08007228 <__multadd>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	690d      	ldr	r5, [r1, #16]
 800722e:	4607      	mov	r7, r0
 8007230:	460c      	mov	r4, r1
 8007232:	461e      	mov	r6, r3
 8007234:	f101 0c14 	add.w	ip, r1, #20
 8007238:	2000      	movs	r0, #0
 800723a:	f8dc 3000 	ldr.w	r3, [ip]
 800723e:	b299      	uxth	r1, r3
 8007240:	fb02 6101 	mla	r1, r2, r1, r6
 8007244:	0c1e      	lsrs	r6, r3, #16
 8007246:	0c0b      	lsrs	r3, r1, #16
 8007248:	fb02 3306 	mla	r3, r2, r6, r3
 800724c:	b289      	uxth	r1, r1
 800724e:	3001      	adds	r0, #1
 8007250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007254:	4285      	cmp	r5, r0
 8007256:	f84c 1b04 	str.w	r1, [ip], #4
 800725a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800725e:	dcec      	bgt.n	800723a <__multadd+0x12>
 8007260:	b30e      	cbz	r6, 80072a6 <__multadd+0x7e>
 8007262:	68a3      	ldr	r3, [r4, #8]
 8007264:	42ab      	cmp	r3, r5
 8007266:	dc19      	bgt.n	800729c <__multadd+0x74>
 8007268:	6861      	ldr	r1, [r4, #4]
 800726a:	4638      	mov	r0, r7
 800726c:	3101      	adds	r1, #1
 800726e:	f7ff ff79 	bl	8007164 <_Balloc>
 8007272:	4680      	mov	r8, r0
 8007274:	b928      	cbnz	r0, 8007282 <__multadd+0x5a>
 8007276:	4602      	mov	r2, r0
 8007278:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <__multadd+0x84>)
 800727a:	480d      	ldr	r0, [pc, #52]	; (80072b0 <__multadd+0x88>)
 800727c:	21ba      	movs	r1, #186	; 0xba
 800727e:	f000 fbdd 	bl	8007a3c <__assert_func>
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	3202      	adds	r2, #2
 8007286:	f104 010c 	add.w	r1, r4, #12
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	300c      	adds	r0, #12
 800728e:	f000 fbc7 	bl	8007a20 <memcpy>
 8007292:	4621      	mov	r1, r4
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ffa5 	bl	80071e4 <_Bfree>
 800729a:	4644      	mov	r4, r8
 800729c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072a0:	3501      	adds	r5, #1
 80072a2:	615e      	str	r6, [r3, #20]
 80072a4:	6125      	str	r5, [r4, #16]
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ac:	080082b0 	.word	0x080082b0
 80072b0:	080082d2 	.word	0x080082d2

080072b4 <__hi0bits>:
 80072b4:	0c03      	lsrs	r3, r0, #16
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	b9d3      	cbnz	r3, 80072f0 <__hi0bits+0x3c>
 80072ba:	0400      	lsls	r0, r0, #16
 80072bc:	2310      	movs	r3, #16
 80072be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072c2:	bf04      	itt	eq
 80072c4:	0200      	lsleq	r0, r0, #8
 80072c6:	3308      	addeq	r3, #8
 80072c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072cc:	bf04      	itt	eq
 80072ce:	0100      	lsleq	r0, r0, #4
 80072d0:	3304      	addeq	r3, #4
 80072d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072d6:	bf04      	itt	eq
 80072d8:	0080      	lsleq	r0, r0, #2
 80072da:	3302      	addeq	r3, #2
 80072dc:	2800      	cmp	r0, #0
 80072de:	db05      	blt.n	80072ec <__hi0bits+0x38>
 80072e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072e4:	f103 0301 	add.w	r3, r3, #1
 80072e8:	bf08      	it	eq
 80072ea:	2320      	moveq	r3, #32
 80072ec:	4618      	mov	r0, r3
 80072ee:	4770      	bx	lr
 80072f0:	2300      	movs	r3, #0
 80072f2:	e7e4      	b.n	80072be <__hi0bits+0xa>

080072f4 <__lo0bits>:
 80072f4:	6803      	ldr	r3, [r0, #0]
 80072f6:	f013 0207 	ands.w	r2, r3, #7
 80072fa:	d00c      	beq.n	8007316 <__lo0bits+0x22>
 80072fc:	07d9      	lsls	r1, r3, #31
 80072fe:	d422      	bmi.n	8007346 <__lo0bits+0x52>
 8007300:	079a      	lsls	r2, r3, #30
 8007302:	bf49      	itett	mi
 8007304:	085b      	lsrmi	r3, r3, #1
 8007306:	089b      	lsrpl	r3, r3, #2
 8007308:	6003      	strmi	r3, [r0, #0]
 800730a:	2201      	movmi	r2, #1
 800730c:	bf5c      	itt	pl
 800730e:	6003      	strpl	r3, [r0, #0]
 8007310:	2202      	movpl	r2, #2
 8007312:	4610      	mov	r0, r2
 8007314:	4770      	bx	lr
 8007316:	b299      	uxth	r1, r3
 8007318:	b909      	cbnz	r1, 800731e <__lo0bits+0x2a>
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	2210      	movs	r2, #16
 800731e:	b2d9      	uxtb	r1, r3
 8007320:	b909      	cbnz	r1, 8007326 <__lo0bits+0x32>
 8007322:	3208      	adds	r2, #8
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	0719      	lsls	r1, r3, #28
 8007328:	bf04      	itt	eq
 800732a:	091b      	lsreq	r3, r3, #4
 800732c:	3204      	addeq	r2, #4
 800732e:	0799      	lsls	r1, r3, #30
 8007330:	bf04      	itt	eq
 8007332:	089b      	lsreq	r3, r3, #2
 8007334:	3202      	addeq	r2, #2
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d403      	bmi.n	8007342 <__lo0bits+0x4e>
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	f102 0201 	add.w	r2, r2, #1
 8007340:	d003      	beq.n	800734a <__lo0bits+0x56>
 8007342:	6003      	str	r3, [r0, #0]
 8007344:	e7e5      	b.n	8007312 <__lo0bits+0x1e>
 8007346:	2200      	movs	r2, #0
 8007348:	e7e3      	b.n	8007312 <__lo0bits+0x1e>
 800734a:	2220      	movs	r2, #32
 800734c:	e7e1      	b.n	8007312 <__lo0bits+0x1e>
	...

08007350 <__i2b>:
 8007350:	b510      	push	{r4, lr}
 8007352:	460c      	mov	r4, r1
 8007354:	2101      	movs	r1, #1
 8007356:	f7ff ff05 	bl	8007164 <_Balloc>
 800735a:	4602      	mov	r2, r0
 800735c:	b928      	cbnz	r0, 800736a <__i2b+0x1a>
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <__i2b+0x24>)
 8007360:	4805      	ldr	r0, [pc, #20]	; (8007378 <__i2b+0x28>)
 8007362:	f240 1145 	movw	r1, #325	; 0x145
 8007366:	f000 fb69 	bl	8007a3c <__assert_func>
 800736a:	2301      	movs	r3, #1
 800736c:	6144      	str	r4, [r0, #20]
 800736e:	6103      	str	r3, [r0, #16]
 8007370:	bd10      	pop	{r4, pc}
 8007372:	bf00      	nop
 8007374:	080082b0 	.word	0x080082b0
 8007378:	080082d2 	.word	0x080082d2

0800737c <__multiply>:
 800737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007380:	4691      	mov	r9, r2
 8007382:	690a      	ldr	r2, [r1, #16]
 8007384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	bfb8      	it	lt
 800738c:	460b      	movlt	r3, r1
 800738e:	460c      	mov	r4, r1
 8007390:	bfbc      	itt	lt
 8007392:	464c      	movlt	r4, r9
 8007394:	4699      	movlt	r9, r3
 8007396:	6927      	ldr	r7, [r4, #16]
 8007398:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	eb07 060a 	add.w	r6, r7, sl
 80073a4:	42b3      	cmp	r3, r6
 80073a6:	b085      	sub	sp, #20
 80073a8:	bfb8      	it	lt
 80073aa:	3101      	addlt	r1, #1
 80073ac:	f7ff feda 	bl	8007164 <_Balloc>
 80073b0:	b930      	cbnz	r0, 80073c0 <__multiply+0x44>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <__multiply+0x14c>)
 80073b6:	4845      	ldr	r0, [pc, #276]	; (80074cc <__multiply+0x150>)
 80073b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80073bc:	f000 fb3e 	bl	8007a3c <__assert_func>
 80073c0:	f100 0514 	add.w	r5, r0, #20
 80073c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073c8:	462b      	mov	r3, r5
 80073ca:	2200      	movs	r2, #0
 80073cc:	4543      	cmp	r3, r8
 80073ce:	d321      	bcc.n	8007414 <__multiply+0x98>
 80073d0:	f104 0314 	add.w	r3, r4, #20
 80073d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073d8:	f109 0314 	add.w	r3, r9, #20
 80073dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073e0:	9202      	str	r2, [sp, #8]
 80073e2:	1b3a      	subs	r2, r7, r4
 80073e4:	3a15      	subs	r2, #21
 80073e6:	f022 0203 	bic.w	r2, r2, #3
 80073ea:	3204      	adds	r2, #4
 80073ec:	f104 0115 	add.w	r1, r4, #21
 80073f0:	428f      	cmp	r7, r1
 80073f2:	bf38      	it	cc
 80073f4:	2204      	movcc	r2, #4
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9a02      	ldr	r2, [sp, #8]
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d80c      	bhi.n	800741a <__multiply+0x9e>
 8007400:	2e00      	cmp	r6, #0
 8007402:	dd03      	ble.n	800740c <__multiply+0x90>
 8007404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05b      	beq.n	80074c4 <__multiply+0x148>
 800740c:	6106      	str	r6, [r0, #16]
 800740e:	b005      	add	sp, #20
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	f843 2b04 	str.w	r2, [r3], #4
 8007418:	e7d8      	b.n	80073cc <__multiply+0x50>
 800741a:	f8b3 a000 	ldrh.w	sl, [r3]
 800741e:	f1ba 0f00 	cmp.w	sl, #0
 8007422:	d024      	beq.n	800746e <__multiply+0xf2>
 8007424:	f104 0e14 	add.w	lr, r4, #20
 8007428:	46a9      	mov	r9, r5
 800742a:	f04f 0c00 	mov.w	ip, #0
 800742e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007432:	f8d9 1000 	ldr.w	r1, [r9]
 8007436:	fa1f fb82 	uxth.w	fp, r2
 800743a:	b289      	uxth	r1, r1
 800743c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007444:	f8d9 2000 	ldr.w	r2, [r9]
 8007448:	4461      	add	r1, ip
 800744a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800744e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007456:	b289      	uxth	r1, r1
 8007458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800745c:	4577      	cmp	r7, lr
 800745e:	f849 1b04 	str.w	r1, [r9], #4
 8007462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007466:	d8e2      	bhi.n	800742e <__multiply+0xb2>
 8007468:	9a01      	ldr	r2, [sp, #4]
 800746a:	f845 c002 	str.w	ip, [r5, r2]
 800746e:	9a03      	ldr	r2, [sp, #12]
 8007470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007474:	3304      	adds	r3, #4
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d021      	beq.n	80074c0 <__multiply+0x144>
 800747c:	6829      	ldr	r1, [r5, #0]
 800747e:	f104 0c14 	add.w	ip, r4, #20
 8007482:	46ae      	mov	lr, r5
 8007484:	f04f 0a00 	mov.w	sl, #0
 8007488:	f8bc b000 	ldrh.w	fp, [ip]
 800748c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007490:	fb09 220b 	mla	r2, r9, fp, r2
 8007494:	4452      	add	r2, sl
 8007496:	b289      	uxth	r1, r1
 8007498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800749c:	f84e 1b04 	str.w	r1, [lr], #4
 80074a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80074a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074a8:	f8be 1000 	ldrh.w	r1, [lr]
 80074ac:	fb09 110a 	mla	r1, r9, sl, r1
 80074b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80074b4:	4567      	cmp	r7, ip
 80074b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074ba:	d8e5      	bhi.n	8007488 <__multiply+0x10c>
 80074bc:	9a01      	ldr	r2, [sp, #4]
 80074be:	50a9      	str	r1, [r5, r2]
 80074c0:	3504      	adds	r5, #4
 80074c2:	e799      	b.n	80073f8 <__multiply+0x7c>
 80074c4:	3e01      	subs	r6, #1
 80074c6:	e79b      	b.n	8007400 <__multiply+0x84>
 80074c8:	080082b0 	.word	0x080082b0
 80074cc:	080082d2 	.word	0x080082d2

080074d0 <__pow5mult>:
 80074d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d4:	4615      	mov	r5, r2
 80074d6:	f012 0203 	ands.w	r2, r2, #3
 80074da:	4606      	mov	r6, r0
 80074dc:	460f      	mov	r7, r1
 80074de:	d007      	beq.n	80074f0 <__pow5mult+0x20>
 80074e0:	4c25      	ldr	r4, [pc, #148]	; (8007578 <__pow5mult+0xa8>)
 80074e2:	3a01      	subs	r2, #1
 80074e4:	2300      	movs	r3, #0
 80074e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ea:	f7ff fe9d 	bl	8007228 <__multadd>
 80074ee:	4607      	mov	r7, r0
 80074f0:	10ad      	asrs	r5, r5, #2
 80074f2:	d03d      	beq.n	8007570 <__pow5mult+0xa0>
 80074f4:	69f4      	ldr	r4, [r6, #28]
 80074f6:	b97c      	cbnz	r4, 8007518 <__pow5mult+0x48>
 80074f8:	2010      	movs	r0, #16
 80074fa:	f7ff fcd1 	bl	8006ea0 <malloc>
 80074fe:	4602      	mov	r2, r0
 8007500:	61f0      	str	r0, [r6, #28]
 8007502:	b928      	cbnz	r0, 8007510 <__pow5mult+0x40>
 8007504:	4b1d      	ldr	r3, [pc, #116]	; (800757c <__pow5mult+0xac>)
 8007506:	481e      	ldr	r0, [pc, #120]	; (8007580 <__pow5mult+0xb0>)
 8007508:	f240 11b3 	movw	r1, #435	; 0x1b3
 800750c:	f000 fa96 	bl	8007a3c <__assert_func>
 8007510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007514:	6004      	str	r4, [r0, #0]
 8007516:	60c4      	str	r4, [r0, #12]
 8007518:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800751c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007520:	b94c      	cbnz	r4, 8007536 <__pow5mult+0x66>
 8007522:	f240 2171 	movw	r1, #625	; 0x271
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff12 	bl	8007350 <__i2b>
 800752c:	2300      	movs	r3, #0
 800752e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007532:	4604      	mov	r4, r0
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	f04f 0900 	mov.w	r9, #0
 800753a:	07eb      	lsls	r3, r5, #31
 800753c:	d50a      	bpl.n	8007554 <__pow5mult+0x84>
 800753e:	4639      	mov	r1, r7
 8007540:	4622      	mov	r2, r4
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ff1a 	bl	800737c <__multiply>
 8007548:	4639      	mov	r1, r7
 800754a:	4680      	mov	r8, r0
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff fe49 	bl	80071e4 <_Bfree>
 8007552:	4647      	mov	r7, r8
 8007554:	106d      	asrs	r5, r5, #1
 8007556:	d00b      	beq.n	8007570 <__pow5mult+0xa0>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	b938      	cbnz	r0, 800756c <__pow5mult+0x9c>
 800755c:	4622      	mov	r2, r4
 800755e:	4621      	mov	r1, r4
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff ff0b 	bl	800737c <__multiply>
 8007566:	6020      	str	r0, [r4, #0]
 8007568:	f8c0 9000 	str.w	r9, [r0]
 800756c:	4604      	mov	r4, r0
 800756e:	e7e4      	b.n	800753a <__pow5mult+0x6a>
 8007570:	4638      	mov	r0, r7
 8007572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007576:	bf00      	nop
 8007578:	08008420 	.word	0x08008420
 800757c:	08008241 	.word	0x08008241
 8007580:	080082d2 	.word	0x080082d2

08007584 <__lshift>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	460c      	mov	r4, r1
 800758a:	6849      	ldr	r1, [r1, #4]
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	4607      	mov	r7, r0
 8007596:	4691      	mov	r9, r2
 8007598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800759c:	f108 0601 	add.w	r6, r8, #1
 80075a0:	42b3      	cmp	r3, r6
 80075a2:	db0b      	blt.n	80075bc <__lshift+0x38>
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff fddd 	bl	8007164 <_Balloc>
 80075aa:	4605      	mov	r5, r0
 80075ac:	b948      	cbnz	r0, 80075c2 <__lshift+0x3e>
 80075ae:	4602      	mov	r2, r0
 80075b0:	4b28      	ldr	r3, [pc, #160]	; (8007654 <__lshift+0xd0>)
 80075b2:	4829      	ldr	r0, [pc, #164]	; (8007658 <__lshift+0xd4>)
 80075b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80075b8:	f000 fa40 	bl	8007a3c <__assert_func>
 80075bc:	3101      	adds	r1, #1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	e7ee      	b.n	80075a0 <__lshift+0x1c>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f100 0114 	add.w	r1, r0, #20
 80075c8:	f100 0210 	add.w	r2, r0, #16
 80075cc:	4618      	mov	r0, r3
 80075ce:	4553      	cmp	r3, sl
 80075d0:	db33      	blt.n	800763a <__lshift+0xb6>
 80075d2:	6920      	ldr	r0, [r4, #16]
 80075d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075d8:	f104 0314 	add.w	r3, r4, #20
 80075dc:	f019 091f 	ands.w	r9, r9, #31
 80075e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075e8:	d02b      	beq.n	8007642 <__lshift+0xbe>
 80075ea:	f1c9 0e20 	rsb	lr, r9, #32
 80075ee:	468a      	mov	sl, r1
 80075f0:	2200      	movs	r2, #0
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	fa00 f009 	lsl.w	r0, r0, r9
 80075f8:	4310      	orrs	r0, r2
 80075fa:	f84a 0b04 	str.w	r0, [sl], #4
 80075fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007602:	459c      	cmp	ip, r3
 8007604:	fa22 f20e 	lsr.w	r2, r2, lr
 8007608:	d8f3      	bhi.n	80075f2 <__lshift+0x6e>
 800760a:	ebac 0304 	sub.w	r3, ip, r4
 800760e:	3b15      	subs	r3, #21
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	3304      	adds	r3, #4
 8007616:	f104 0015 	add.w	r0, r4, #21
 800761a:	4584      	cmp	ip, r0
 800761c:	bf38      	it	cc
 800761e:	2304      	movcc	r3, #4
 8007620:	50ca      	str	r2, [r1, r3]
 8007622:	b10a      	cbz	r2, 8007628 <__lshift+0xa4>
 8007624:	f108 0602 	add.w	r6, r8, #2
 8007628:	3e01      	subs	r6, #1
 800762a:	4638      	mov	r0, r7
 800762c:	612e      	str	r6, [r5, #16]
 800762e:	4621      	mov	r1, r4
 8007630:	f7ff fdd8 	bl	80071e4 <_Bfree>
 8007634:	4628      	mov	r0, r5
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	f842 0f04 	str.w	r0, [r2, #4]!
 800763e:	3301      	adds	r3, #1
 8007640:	e7c5      	b.n	80075ce <__lshift+0x4a>
 8007642:	3904      	subs	r1, #4
 8007644:	f853 2b04 	ldr.w	r2, [r3], #4
 8007648:	f841 2f04 	str.w	r2, [r1, #4]!
 800764c:	459c      	cmp	ip, r3
 800764e:	d8f9      	bhi.n	8007644 <__lshift+0xc0>
 8007650:	e7ea      	b.n	8007628 <__lshift+0xa4>
 8007652:	bf00      	nop
 8007654:	080082b0 	.word	0x080082b0
 8007658:	080082d2 	.word	0x080082d2

0800765c <__mcmp>:
 800765c:	b530      	push	{r4, r5, lr}
 800765e:	6902      	ldr	r2, [r0, #16]
 8007660:	690c      	ldr	r4, [r1, #16]
 8007662:	1b12      	subs	r2, r2, r4
 8007664:	d10e      	bne.n	8007684 <__mcmp+0x28>
 8007666:	f100 0314 	add.w	r3, r0, #20
 800766a:	3114      	adds	r1, #20
 800766c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800767c:	42a5      	cmp	r5, r4
 800767e:	d003      	beq.n	8007688 <__mcmp+0x2c>
 8007680:	d305      	bcc.n	800768e <__mcmp+0x32>
 8007682:	2201      	movs	r2, #1
 8007684:	4610      	mov	r0, r2
 8007686:	bd30      	pop	{r4, r5, pc}
 8007688:	4283      	cmp	r3, r0
 800768a:	d3f3      	bcc.n	8007674 <__mcmp+0x18>
 800768c:	e7fa      	b.n	8007684 <__mcmp+0x28>
 800768e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007692:	e7f7      	b.n	8007684 <__mcmp+0x28>

08007694 <__mdiff>:
 8007694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	460c      	mov	r4, r1
 800769a:	4606      	mov	r6, r0
 800769c:	4611      	mov	r1, r2
 800769e:	4620      	mov	r0, r4
 80076a0:	4690      	mov	r8, r2
 80076a2:	f7ff ffdb 	bl	800765c <__mcmp>
 80076a6:	1e05      	subs	r5, r0, #0
 80076a8:	d110      	bne.n	80076cc <__mdiff+0x38>
 80076aa:	4629      	mov	r1, r5
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff fd59 	bl	8007164 <_Balloc>
 80076b2:	b930      	cbnz	r0, 80076c2 <__mdiff+0x2e>
 80076b4:	4b3a      	ldr	r3, [pc, #232]	; (80077a0 <__mdiff+0x10c>)
 80076b6:	4602      	mov	r2, r0
 80076b8:	f240 2137 	movw	r1, #567	; 0x237
 80076bc:	4839      	ldr	r0, [pc, #228]	; (80077a4 <__mdiff+0x110>)
 80076be:	f000 f9bd 	bl	8007a3c <__assert_func>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	bfa4      	itt	ge
 80076ce:	4643      	movge	r3, r8
 80076d0:	46a0      	movge	r8, r4
 80076d2:	4630      	mov	r0, r6
 80076d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076d8:	bfa6      	itte	ge
 80076da:	461c      	movge	r4, r3
 80076dc:	2500      	movge	r5, #0
 80076de:	2501      	movlt	r5, #1
 80076e0:	f7ff fd40 	bl	8007164 <_Balloc>
 80076e4:	b920      	cbnz	r0, 80076f0 <__mdiff+0x5c>
 80076e6:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <__mdiff+0x10c>)
 80076e8:	4602      	mov	r2, r0
 80076ea:	f240 2145 	movw	r1, #581	; 0x245
 80076ee:	e7e5      	b.n	80076bc <__mdiff+0x28>
 80076f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076f4:	6926      	ldr	r6, [r4, #16]
 80076f6:	60c5      	str	r5, [r0, #12]
 80076f8:	f104 0914 	add.w	r9, r4, #20
 80076fc:	f108 0514 	add.w	r5, r8, #20
 8007700:	f100 0e14 	add.w	lr, r0, #20
 8007704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800770c:	f108 0210 	add.w	r2, r8, #16
 8007710:	46f2      	mov	sl, lr
 8007712:	2100      	movs	r1, #0
 8007714:	f859 3b04 	ldr.w	r3, [r9], #4
 8007718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800771c:	fa11 f88b 	uxtah	r8, r1, fp
 8007720:	b299      	uxth	r1, r3
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	eba8 0801 	sub.w	r8, r8, r1
 8007728:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800772c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007730:	fa1f f888 	uxth.w	r8, r8
 8007734:	1419      	asrs	r1, r3, #16
 8007736:	454e      	cmp	r6, r9
 8007738:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800773c:	f84a 3b04 	str.w	r3, [sl], #4
 8007740:	d8e8      	bhi.n	8007714 <__mdiff+0x80>
 8007742:	1b33      	subs	r3, r6, r4
 8007744:	3b15      	subs	r3, #21
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	3304      	adds	r3, #4
 800774c:	3415      	adds	r4, #21
 800774e:	42a6      	cmp	r6, r4
 8007750:	bf38      	it	cc
 8007752:	2304      	movcc	r3, #4
 8007754:	441d      	add	r5, r3
 8007756:	4473      	add	r3, lr
 8007758:	469e      	mov	lr, r3
 800775a:	462e      	mov	r6, r5
 800775c:	4566      	cmp	r6, ip
 800775e:	d30e      	bcc.n	800777e <__mdiff+0xea>
 8007760:	f10c 0203 	add.w	r2, ip, #3
 8007764:	1b52      	subs	r2, r2, r5
 8007766:	f022 0203 	bic.w	r2, r2, #3
 800776a:	3d03      	subs	r5, #3
 800776c:	45ac      	cmp	ip, r5
 800776e:	bf38      	it	cc
 8007770:	2200      	movcc	r2, #0
 8007772:	4413      	add	r3, r2
 8007774:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007778:	b17a      	cbz	r2, 800779a <__mdiff+0x106>
 800777a:	6107      	str	r7, [r0, #16]
 800777c:	e7a4      	b.n	80076c8 <__mdiff+0x34>
 800777e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007782:	fa11 f288 	uxtah	r2, r1, r8
 8007786:	1414      	asrs	r4, r2, #16
 8007788:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800778c:	b292      	uxth	r2, r2
 800778e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007792:	f84e 2b04 	str.w	r2, [lr], #4
 8007796:	1421      	asrs	r1, r4, #16
 8007798:	e7e0      	b.n	800775c <__mdiff+0xc8>
 800779a:	3f01      	subs	r7, #1
 800779c:	e7ea      	b.n	8007774 <__mdiff+0xe0>
 800779e:	bf00      	nop
 80077a0:	080082b0 	.word	0x080082b0
 80077a4:	080082d2 	.word	0x080082d2

080077a8 <__d2b>:
 80077a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077ac:	460f      	mov	r7, r1
 80077ae:	2101      	movs	r1, #1
 80077b0:	ec59 8b10 	vmov	r8, r9, d0
 80077b4:	4616      	mov	r6, r2
 80077b6:	f7ff fcd5 	bl	8007164 <_Balloc>
 80077ba:	4604      	mov	r4, r0
 80077bc:	b930      	cbnz	r0, 80077cc <__d2b+0x24>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b24      	ldr	r3, [pc, #144]	; (8007854 <__d2b+0xac>)
 80077c2:	4825      	ldr	r0, [pc, #148]	; (8007858 <__d2b+0xb0>)
 80077c4:	f240 310f 	movw	r1, #783	; 0x30f
 80077c8:	f000 f938 	bl	8007a3c <__assert_func>
 80077cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077d4:	bb2d      	cbnz	r5, 8007822 <__d2b+0x7a>
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f1b8 0300 	subs.w	r3, r8, #0
 80077dc:	d026      	beq.n	800782c <__d2b+0x84>
 80077de:	4668      	mov	r0, sp
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	f7ff fd87 	bl	80072f4 <__lo0bits>
 80077e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ea:	b1e8      	cbz	r0, 8007828 <__d2b+0x80>
 80077ec:	f1c0 0320 	rsb	r3, r0, #32
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	430b      	orrs	r3, r1
 80077f6:	40c2      	lsrs	r2, r0
 80077f8:	6163      	str	r3, [r4, #20]
 80077fa:	9201      	str	r2, [sp, #4]
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	61a3      	str	r3, [r4, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf14      	ite	ne
 8007804:	2202      	movne	r2, #2
 8007806:	2201      	moveq	r2, #1
 8007808:	6122      	str	r2, [r4, #16]
 800780a:	b1bd      	cbz	r5, 800783c <__d2b+0x94>
 800780c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007810:	4405      	add	r5, r0
 8007812:	603d      	str	r5, [r7, #0]
 8007814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4620      	mov	r0, r4
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007826:	e7d6      	b.n	80077d6 <__d2b+0x2e>
 8007828:	6161      	str	r1, [r4, #20]
 800782a:	e7e7      	b.n	80077fc <__d2b+0x54>
 800782c:	a801      	add	r0, sp, #4
 800782e:	f7ff fd61 	bl	80072f4 <__lo0bits>
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	3020      	adds	r0, #32
 8007838:	2201      	movs	r2, #1
 800783a:	e7e5      	b.n	8007808 <__d2b+0x60>
 800783c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007844:	6038      	str	r0, [r7, #0]
 8007846:	6918      	ldr	r0, [r3, #16]
 8007848:	f7ff fd34 	bl	80072b4 <__hi0bits>
 800784c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007850:	e7e2      	b.n	8007818 <__d2b+0x70>
 8007852:	bf00      	nop
 8007854:	080082b0 	.word	0x080082b0
 8007858:	080082d2 	.word	0x080082d2

0800785c <__sread>:
 800785c:	b510      	push	{r4, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f8a8 	bl	80079b8 <_read_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	bfab      	itete	ge
 800786c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800786e:	89a3      	ldrhlt	r3, [r4, #12]
 8007870:	181b      	addge	r3, r3, r0
 8007872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007876:	bfac      	ite	ge
 8007878:	6563      	strge	r3, [r4, #84]	; 0x54
 800787a:	81a3      	strhlt	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__swrite>:
 800787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	461f      	mov	r7, r3
 8007884:	898b      	ldrh	r3, [r1, #12]
 8007886:	05db      	lsls	r3, r3, #23
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	4616      	mov	r6, r2
 800788e:	d505      	bpl.n	800789c <__swrite+0x1e>
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2302      	movs	r3, #2
 8007896:	2200      	movs	r2, #0
 8007898:	f000 f87c 	bl	8007994 <_lseek_r>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	4628      	mov	r0, r5
 80078ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	f000 b8a3 	b.w	80079fc <_write_r>

080078b6 <__sseek>:
 80078b6:	b510      	push	{r4, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 f869 	bl	8007994 <_lseek_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	bf15      	itete	ne
 80078c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078d2:	81a3      	strheq	r3, [r4, #12]
 80078d4:	bf18      	it	ne
 80078d6:	81a3      	strhne	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__sclose>:
 80078da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078de:	f000 b849 	b.w	8007974 <_close_r>

080078e2 <_realloc_r>:
 80078e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	4680      	mov	r8, r0
 80078e8:	4614      	mov	r4, r2
 80078ea:	460e      	mov	r6, r1
 80078ec:	b921      	cbnz	r1, 80078f8 <_realloc_r+0x16>
 80078ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	4611      	mov	r1, r2
 80078f4:	f7ff bafc 	b.w	8006ef0 <_malloc_r>
 80078f8:	b92a      	cbnz	r2, 8007906 <_realloc_r+0x24>
 80078fa:	f000 f8d3 	bl	8007aa4 <_free_r>
 80078fe:	4625      	mov	r5, r4
 8007900:	4628      	mov	r0, r5
 8007902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007906:	f000 f92b 	bl	8007b60 <_malloc_usable_size_r>
 800790a:	4284      	cmp	r4, r0
 800790c:	4607      	mov	r7, r0
 800790e:	d802      	bhi.n	8007916 <_realloc_r+0x34>
 8007910:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007914:	d812      	bhi.n	800793c <_realloc_r+0x5a>
 8007916:	4621      	mov	r1, r4
 8007918:	4640      	mov	r0, r8
 800791a:	f7ff fae9 	bl	8006ef0 <_malloc_r>
 800791e:	4605      	mov	r5, r0
 8007920:	2800      	cmp	r0, #0
 8007922:	d0ed      	beq.n	8007900 <_realloc_r+0x1e>
 8007924:	42bc      	cmp	r4, r7
 8007926:	4622      	mov	r2, r4
 8007928:	4631      	mov	r1, r6
 800792a:	bf28      	it	cs
 800792c:	463a      	movcs	r2, r7
 800792e:	f000 f877 	bl	8007a20 <memcpy>
 8007932:	4631      	mov	r1, r6
 8007934:	4640      	mov	r0, r8
 8007936:	f000 f8b5 	bl	8007aa4 <_free_r>
 800793a:	e7e1      	b.n	8007900 <_realloc_r+0x1e>
 800793c:	4635      	mov	r5, r6
 800793e:	e7df      	b.n	8007900 <_realloc_r+0x1e>

08007940 <memmove>:
 8007940:	4288      	cmp	r0, r1
 8007942:	b510      	push	{r4, lr}
 8007944:	eb01 0402 	add.w	r4, r1, r2
 8007948:	d902      	bls.n	8007950 <memmove+0x10>
 800794a:	4284      	cmp	r4, r0
 800794c:	4623      	mov	r3, r4
 800794e:	d807      	bhi.n	8007960 <memmove+0x20>
 8007950:	1e43      	subs	r3, r0, #1
 8007952:	42a1      	cmp	r1, r4
 8007954:	d008      	beq.n	8007968 <memmove+0x28>
 8007956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795e:	e7f8      	b.n	8007952 <memmove+0x12>
 8007960:	4402      	add	r2, r0
 8007962:	4601      	mov	r1, r0
 8007964:	428a      	cmp	r2, r1
 8007966:	d100      	bne.n	800796a <memmove+0x2a>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007972:	e7f7      	b.n	8007964 <memmove+0x24>

08007974 <_close_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	; (8007990 <_close_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7f9 fcef 	bl	8001362 <_close>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_close_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_close_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	200004e0 	.word	0x200004e0

08007994 <_lseek_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	; (80079b4 <_lseek_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f7f9 fd04 	bl	80013b0 <_lseek>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_lseek_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_lseek_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	200004e0 	.word	0x200004e0

080079b8 <_read_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	; (80079d8 <_read_r+0x20>)
 80079bc:	4604      	mov	r4, r0
 80079be:	4608      	mov	r0, r1
 80079c0:	4611      	mov	r1, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	f7f9 fc92 	bl	80012f0 <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_read_r+0x1e>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_read_r+0x1e>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	200004e0 	.word	0x200004e0

080079dc <_sbrk_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d06      	ldr	r5, [pc, #24]	; (80079f8 <_sbrk_r+0x1c>)
 80079e0:	2300      	movs	r3, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	f7f9 fcf0 	bl	80013cc <_sbrk>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_sbrk_r+0x1a>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_sbrk_r+0x1a>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	200004e0 	.word	0x200004e0

080079fc <_write_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d07      	ldr	r5, [pc, #28]	; (8007a1c <_write_r+0x20>)
 8007a00:	4604      	mov	r4, r0
 8007a02:	4608      	mov	r0, r1
 8007a04:	4611      	mov	r1, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	602a      	str	r2, [r5, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f7f9 fc8d 	bl	800132a <_write>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_write_r+0x1e>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_write_r+0x1e>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200004e0 	.word	0x200004e0

08007a20 <memcpy>:
 8007a20:	440a      	add	r2, r1
 8007a22:	4291      	cmp	r1, r2
 8007a24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	4770      	bx	lr
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a36:	4291      	cmp	r1, r2
 8007a38:	d1f9      	bne.n	8007a2e <memcpy+0xe>
 8007a3a:	bd10      	pop	{r4, pc}

08007a3c <__assert_func>:
 8007a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3e:	4614      	mov	r4, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <__assert_func+0x2c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4605      	mov	r5, r0
 8007a48:	68d8      	ldr	r0, [r3, #12]
 8007a4a:	b14c      	cbz	r4, 8007a60 <__assert_func+0x24>
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <__assert_func+0x30>)
 8007a4e:	9100      	str	r1, [sp, #0]
 8007a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a54:	4906      	ldr	r1, [pc, #24]	; (8007a70 <__assert_func+0x34>)
 8007a56:	462b      	mov	r3, r5
 8007a58:	f000 f88a 	bl	8007b70 <fiprintf>
 8007a5c:	f000 f8a7 	bl	8007bae <abort>
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <__assert_func+0x38>)
 8007a62:	461c      	mov	r4, r3
 8007a64:	e7f3      	b.n	8007a4e <__assert_func+0x12>
 8007a66:	bf00      	nop
 8007a68:	20000064 	.word	0x20000064
 8007a6c:	08008537 	.word	0x08008537
 8007a70:	08008544 	.word	0x08008544
 8007a74:	08008572 	.word	0x08008572

08007a78 <_calloc_r>:
 8007a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a7a:	fba1 2402 	umull	r2, r4, r1, r2
 8007a7e:	b94c      	cbnz	r4, 8007a94 <_calloc_r+0x1c>
 8007a80:	4611      	mov	r1, r2
 8007a82:	9201      	str	r2, [sp, #4]
 8007a84:	f7ff fa34 	bl	8006ef0 <_malloc_r>
 8007a88:	9a01      	ldr	r2, [sp, #4]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	b930      	cbnz	r0, 8007a9c <_calloc_r+0x24>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	b003      	add	sp, #12
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	220c      	movs	r2, #12
 8007a96:	6002      	str	r2, [r0, #0]
 8007a98:	2500      	movs	r5, #0
 8007a9a:	e7f8      	b.n	8007a8e <_calloc_r+0x16>
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	f7fe fa79 	bl	8005f94 <memset>
 8007aa2:	e7f4      	b.n	8007a8e <_calloc_r+0x16>

08007aa4 <_free_r>:
 8007aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	d044      	beq.n	8007b34 <_free_r+0x90>
 8007aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aae:	9001      	str	r0, [sp, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ab6:	bfb8      	it	lt
 8007ab8:	18e4      	addlt	r4, r4, r3
 8007aba:	f7ff fb47 	bl	800714c <__malloc_lock>
 8007abe:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <_free_r+0x94>)
 8007ac0:	9801      	ldr	r0, [sp, #4]
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	b933      	cbnz	r3, 8007ad4 <_free_r+0x30>
 8007ac6:	6063      	str	r3, [r4, #4]
 8007ac8:	6014      	str	r4, [r2, #0]
 8007aca:	b003      	add	sp, #12
 8007acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad0:	f7ff bb42 	b.w	8007158 <__malloc_unlock>
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d908      	bls.n	8007aea <_free_r+0x46>
 8007ad8:	6825      	ldr	r5, [r4, #0]
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	428b      	cmp	r3, r1
 8007ade:	bf01      	itttt	eq
 8007ae0:	6819      	ldreq	r1, [r3, #0]
 8007ae2:	685b      	ldreq	r3, [r3, #4]
 8007ae4:	1949      	addeq	r1, r1, r5
 8007ae6:	6021      	streq	r1, [r4, #0]
 8007ae8:	e7ed      	b.n	8007ac6 <_free_r+0x22>
 8007aea:	461a      	mov	r2, r3
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	b10b      	cbz	r3, 8007af4 <_free_r+0x50>
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	d9fa      	bls.n	8007aea <_free_r+0x46>
 8007af4:	6811      	ldr	r1, [r2, #0]
 8007af6:	1855      	adds	r5, r2, r1
 8007af8:	42a5      	cmp	r5, r4
 8007afa:	d10b      	bne.n	8007b14 <_free_r+0x70>
 8007afc:	6824      	ldr	r4, [r4, #0]
 8007afe:	4421      	add	r1, r4
 8007b00:	1854      	adds	r4, r2, r1
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	6011      	str	r1, [r2, #0]
 8007b06:	d1e0      	bne.n	8007aca <_free_r+0x26>
 8007b08:	681c      	ldr	r4, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	6053      	str	r3, [r2, #4]
 8007b0e:	440c      	add	r4, r1
 8007b10:	6014      	str	r4, [r2, #0]
 8007b12:	e7da      	b.n	8007aca <_free_r+0x26>
 8007b14:	d902      	bls.n	8007b1c <_free_r+0x78>
 8007b16:	230c      	movs	r3, #12
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	e7d6      	b.n	8007aca <_free_r+0x26>
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	1961      	adds	r1, r4, r5
 8007b20:	428b      	cmp	r3, r1
 8007b22:	bf04      	itt	eq
 8007b24:	6819      	ldreq	r1, [r3, #0]
 8007b26:	685b      	ldreq	r3, [r3, #4]
 8007b28:	6063      	str	r3, [r4, #4]
 8007b2a:	bf04      	itt	eq
 8007b2c:	1949      	addeq	r1, r1, r5
 8007b2e:	6021      	streq	r1, [r4, #0]
 8007b30:	6054      	str	r4, [r2, #4]
 8007b32:	e7ca      	b.n	8007aca <_free_r+0x26>
 8007b34:	b003      	add	sp, #12
 8007b36:	bd30      	pop	{r4, r5, pc}
 8007b38:	200004d8 	.word	0x200004d8

08007b3c <__ascii_mbtowc>:
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	b901      	cbnz	r1, 8007b42 <__ascii_mbtowc+0x6>
 8007b40:	a901      	add	r1, sp, #4
 8007b42:	b142      	cbz	r2, 8007b56 <__ascii_mbtowc+0x1a>
 8007b44:	b14b      	cbz	r3, 8007b5a <__ascii_mbtowc+0x1e>
 8007b46:	7813      	ldrb	r3, [r2, #0]
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	1e10      	subs	r0, r2, #0
 8007b4e:	bf18      	it	ne
 8007b50:	2001      	movne	r0, #1
 8007b52:	b002      	add	sp, #8
 8007b54:	4770      	bx	lr
 8007b56:	4610      	mov	r0, r2
 8007b58:	e7fb      	b.n	8007b52 <__ascii_mbtowc+0x16>
 8007b5a:	f06f 0001 	mvn.w	r0, #1
 8007b5e:	e7f8      	b.n	8007b52 <__ascii_mbtowc+0x16>

08007b60 <_malloc_usable_size_r>:
 8007b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b64:	1f18      	subs	r0, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfbc      	itt	lt
 8007b6a:	580b      	ldrlt	r3, [r1, r0]
 8007b6c:	18c0      	addlt	r0, r0, r3
 8007b6e:	4770      	bx	lr

08007b70 <fiprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b503      	push	{r0, r1, lr}
 8007b74:	4601      	mov	r1, r0
 8007b76:	ab03      	add	r3, sp, #12
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <fiprintf+0x20>)
 8007b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7e:	6800      	ldr	r0, [r0, #0]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f000 f845 	bl	8007c10 <_vfiprintf_r>
 8007b86:	b002      	add	sp, #8
 8007b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b8c:	b003      	add	sp, #12
 8007b8e:	4770      	bx	lr
 8007b90:	20000064 	.word	0x20000064

08007b94 <__ascii_wctomb>:
 8007b94:	b149      	cbz	r1, 8007baa <__ascii_wctomb+0x16>
 8007b96:	2aff      	cmp	r2, #255	; 0xff
 8007b98:	bf85      	ittet	hi
 8007b9a:	238a      	movhi	r3, #138	; 0x8a
 8007b9c:	6003      	strhi	r3, [r0, #0]
 8007b9e:	700a      	strbls	r2, [r1, #0]
 8007ba0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ba4:	bf98      	it	ls
 8007ba6:	2001      	movls	r0, #1
 8007ba8:	4770      	bx	lr
 8007baa:	4608      	mov	r0, r1
 8007bac:	4770      	bx	lr

08007bae <abort>:
 8007bae:	b508      	push	{r3, lr}
 8007bb0:	2006      	movs	r0, #6
 8007bb2:	f000 fa89 	bl	80080c8 <raise>
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f7f9 fb90 	bl	80012dc <_exit>

08007bbc <__sfputc_r>:
 8007bbc:	6893      	ldr	r3, [r2, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	b410      	push	{r4}
 8007bc4:	6093      	str	r3, [r2, #8]
 8007bc6:	da08      	bge.n	8007bda <__sfputc_r+0x1e>
 8007bc8:	6994      	ldr	r4, [r2, #24]
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	db01      	blt.n	8007bd2 <__sfputc_r+0x16>
 8007bce:	290a      	cmp	r1, #10
 8007bd0:	d103      	bne.n	8007bda <__sfputc_r+0x1e>
 8007bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd6:	f000 b935 	b.w	8007e44 <__swbuf_r>
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	1c58      	adds	r0, r3, #1
 8007bde:	6010      	str	r0, [r2, #0]
 8007be0:	7019      	strb	r1, [r3, #0]
 8007be2:	4608      	mov	r0, r1
 8007be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <__sfputs_r>:
 8007bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	18d5      	adds	r5, r2, r3
 8007bf4:	42ac      	cmp	r4, r5
 8007bf6:	d101      	bne.n	8007bfc <__sfputs_r+0x12>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	e007      	b.n	8007c0c <__sfputs_r+0x22>
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	463a      	mov	r2, r7
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff ffda 	bl	8007bbc <__sfputc_r>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d1f3      	bne.n	8007bf4 <__sfputs_r+0xa>
 8007c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c10 <_vfiprintf_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	460d      	mov	r5, r1
 8007c16:	b09d      	sub	sp, #116	; 0x74
 8007c18:	4614      	mov	r4, r2
 8007c1a:	4698      	mov	r8, r3
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	b118      	cbz	r0, 8007c28 <_vfiprintf_r+0x18>
 8007c20:	6a03      	ldr	r3, [r0, #32]
 8007c22:	b90b      	cbnz	r3, 8007c28 <_vfiprintf_r+0x18>
 8007c24:	f7fe f980 	bl	8005f28 <__sinit>
 8007c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d405      	bmi.n	8007c3a <_vfiprintf_r+0x2a>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	059a      	lsls	r2, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_vfiprintf_r+0x2a>
 8007c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c36:	f7fe f9e3 	bl	8006000 <__retarget_lock_acquire_recursive>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	071b      	lsls	r3, r3, #28
 8007c3e:	d501      	bpl.n	8007c44 <_vfiprintf_r+0x34>
 8007c40:	692b      	ldr	r3, [r5, #16]
 8007c42:	b99b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x5c>
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 f93a 	bl	8007ec0 <__swsetup_r>
 8007c4c:	b170      	cbz	r0, 8007c6c <_vfiprintf_r+0x5c>
 8007c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c50:	07dc      	lsls	r4, r3, #31
 8007c52:	d504      	bpl.n	8007c5e <_vfiprintf_r+0x4e>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c58:	b01d      	add	sp, #116	; 0x74
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	0598      	lsls	r0, r3, #22
 8007c62:	d4f7      	bmi.n	8007c54 <_vfiprintf_r+0x44>
 8007c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c66:	f7fe f9cc 	bl	8006002 <__retarget_lock_release_recursive>
 8007c6a:	e7f3      	b.n	8007c54 <_vfiprintf_r+0x44>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c70:	2320      	movs	r3, #32
 8007c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7a:	2330      	movs	r3, #48	; 0x30
 8007c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e30 <_vfiprintf_r+0x220>
 8007c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c84:	f04f 0901 	mov.w	r9, #1
 8007c88:	4623      	mov	r3, r4
 8007c8a:	469a      	mov	sl, r3
 8007c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c90:	b10a      	cbz	r2, 8007c96 <_vfiprintf_r+0x86>
 8007c92:	2a25      	cmp	r2, #37	; 0x25
 8007c94:	d1f9      	bne.n	8007c8a <_vfiprintf_r+0x7a>
 8007c96:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9a:	d00b      	beq.n	8007cb4 <_vfiprintf_r+0xa4>
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ffa1 	bl	8007bea <__sfputs_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f000 80a9 	beq.w	8007e00 <_vfiprintf_r+0x1f0>
 8007cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb0:	445a      	add	r2, fp
 8007cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80a1 	beq.w	8007e00 <_vfiprintf_r+0x1f0>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc8:	f10a 0a01 	add.w	sl, sl, #1
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd6:	4654      	mov	r4, sl
 8007cd8:	2205      	movs	r2, #5
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	4854      	ldr	r0, [pc, #336]	; (8007e30 <_vfiprintf_r+0x220>)
 8007ce0:	f7f8 faae 	bl	8000240 <memchr>
 8007ce4:	9a04      	ldr	r2, [sp, #16]
 8007ce6:	b9d8      	cbnz	r0, 8007d20 <_vfiprintf_r+0x110>
 8007ce8:	06d1      	lsls	r1, r2, #27
 8007cea:	bf44      	itt	mi
 8007cec:	2320      	movmi	r3, #32
 8007cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf2:	0713      	lsls	r3, r2, #28
 8007cf4:	bf44      	itt	mi
 8007cf6:	232b      	movmi	r3, #43	; 0x2b
 8007cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007d00:	2b2a      	cmp	r3, #42	; 0x2a
 8007d02:	d015      	beq.n	8007d30 <_vfiprintf_r+0x120>
 8007d04:	9a07      	ldr	r2, [sp, #28]
 8007d06:	4654      	mov	r4, sl
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f04f 0c0a 	mov.w	ip, #10
 8007d0e:	4621      	mov	r1, r4
 8007d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d14:	3b30      	subs	r3, #48	; 0x30
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d94d      	bls.n	8007db6 <_vfiprintf_r+0x1a6>
 8007d1a:	b1b0      	cbz	r0, 8007d4a <_vfiprintf_r+0x13a>
 8007d1c:	9207      	str	r2, [sp, #28]
 8007d1e:	e014      	b.n	8007d4a <_vfiprintf_r+0x13a>
 8007d20:	eba0 0308 	sub.w	r3, r0, r8
 8007d24:	fa09 f303 	lsl.w	r3, r9, r3
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	46a2      	mov	sl, r4
 8007d2e:	e7d2      	b.n	8007cd6 <_vfiprintf_r+0xc6>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	1d19      	adds	r1, r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	9103      	str	r1, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfbb      	ittet	lt
 8007d3c:	425b      	neglt	r3, r3
 8007d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d42:	9307      	strge	r3, [sp, #28]
 8007d44:	9307      	strlt	r3, [sp, #28]
 8007d46:	bfb8      	it	lt
 8007d48:	9204      	strlt	r2, [sp, #16]
 8007d4a:	7823      	ldrb	r3, [r4, #0]
 8007d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4e:	d10c      	bne.n	8007d6a <_vfiprintf_r+0x15a>
 8007d50:	7863      	ldrb	r3, [r4, #1]
 8007d52:	2b2a      	cmp	r3, #42	; 0x2a
 8007d54:	d134      	bne.n	8007dc0 <_vfiprintf_r+0x1b0>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	1d1a      	adds	r2, r3, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	9203      	str	r2, [sp, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfb8      	it	lt
 8007d62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d66:	3402      	adds	r4, #2
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e40 <_vfiprintf_r+0x230>
 8007d6e:	7821      	ldrb	r1, [r4, #0]
 8007d70:	2203      	movs	r2, #3
 8007d72:	4650      	mov	r0, sl
 8007d74:	f7f8 fa64 	bl	8000240 <memchr>
 8007d78:	b138      	cbz	r0, 8007d8a <_vfiprintf_r+0x17a>
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	eba0 000a 	sub.w	r0, r0, sl
 8007d80:	2240      	movs	r2, #64	; 0x40
 8007d82:	4082      	lsls	r2, r0
 8007d84:	4313      	orrs	r3, r2
 8007d86:	3401      	adds	r4, #1
 8007d88:	9304      	str	r3, [sp, #16]
 8007d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8e:	4829      	ldr	r0, [pc, #164]	; (8007e34 <_vfiprintf_r+0x224>)
 8007d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d94:	2206      	movs	r2, #6
 8007d96:	f7f8 fa53 	bl	8000240 <memchr>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d03f      	beq.n	8007e1e <_vfiprintf_r+0x20e>
 8007d9e:	4b26      	ldr	r3, [pc, #152]	; (8007e38 <_vfiprintf_r+0x228>)
 8007da0:	bb1b      	cbnz	r3, 8007dea <_vfiprintf_r+0x1da>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	3307      	adds	r3, #7
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	3308      	adds	r3, #8
 8007dac:	9303      	str	r3, [sp, #12]
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	443b      	add	r3, r7
 8007db2:	9309      	str	r3, [sp, #36]	; 0x24
 8007db4:	e768      	b.n	8007c88 <_vfiprintf_r+0x78>
 8007db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dba:	460c      	mov	r4, r1
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	e7a6      	b.n	8007d0e <_vfiprintf_r+0xfe>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	3401      	adds	r4, #1
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	f04f 0c0a 	mov.w	ip, #10
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd2:	3a30      	subs	r2, #48	; 0x30
 8007dd4:	2a09      	cmp	r2, #9
 8007dd6:	d903      	bls.n	8007de0 <_vfiprintf_r+0x1d0>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0c6      	beq.n	8007d6a <_vfiprintf_r+0x15a>
 8007ddc:	9105      	str	r1, [sp, #20]
 8007dde:	e7c4      	b.n	8007d6a <_vfiprintf_r+0x15a>
 8007de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de4:	4604      	mov	r4, r0
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7f0      	b.n	8007dcc <_vfiprintf_r+0x1bc>
 8007dea:	ab03      	add	r3, sp, #12
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <_vfiprintf_r+0x22c>)
 8007df2:	a904      	add	r1, sp, #16
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7fd fc53 	bl	80056a0 <_printf_float>
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	1c78      	adds	r0, r7, #1
 8007dfe:	d1d6      	bne.n	8007dae <_vfiprintf_r+0x19e>
 8007e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e02:	07d9      	lsls	r1, r3, #31
 8007e04:	d405      	bmi.n	8007e12 <_vfiprintf_r+0x202>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	059a      	lsls	r2, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_vfiprintf_r+0x202>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0e:	f7fe f8f8 	bl	8006002 <__retarget_lock_release_recursive>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	065b      	lsls	r3, r3, #25
 8007e16:	f53f af1d 	bmi.w	8007c54 <_vfiprintf_r+0x44>
 8007e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1c:	e71c      	b.n	8007c58 <_vfiprintf_r+0x48>
 8007e1e:	ab03      	add	r3, sp, #12
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	462a      	mov	r2, r5
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <_vfiprintf_r+0x22c>)
 8007e26:	a904      	add	r1, sp, #16
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7fd fec1 	bl	8005bb0 <_printf_i>
 8007e2e:	e7e4      	b.n	8007dfa <_vfiprintf_r+0x1ea>
 8007e30:	080082c1 	.word	0x080082c1
 8007e34:	080082cb 	.word	0x080082cb
 8007e38:	080056a1 	.word	0x080056a1
 8007e3c:	08007beb 	.word	0x08007beb
 8007e40:	080082c7 	.word	0x080082c7

08007e44 <__swbuf_r>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	460e      	mov	r6, r1
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	b118      	cbz	r0, 8007e56 <__swbuf_r+0x12>
 8007e4e:	6a03      	ldr	r3, [r0, #32]
 8007e50:	b90b      	cbnz	r3, 8007e56 <__swbuf_r+0x12>
 8007e52:	f7fe f869 	bl	8005f28 <__sinit>
 8007e56:	69a3      	ldr	r3, [r4, #24]
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	071a      	lsls	r2, r3, #28
 8007e5e:	d525      	bpl.n	8007eac <__swbuf_r+0x68>
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	b31b      	cbz	r3, 8007eac <__swbuf_r+0x68>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	6922      	ldr	r2, [r4, #16]
 8007e68:	1a98      	subs	r0, r3, r2
 8007e6a:	6963      	ldr	r3, [r4, #20]
 8007e6c:	b2f6      	uxtb	r6, r6
 8007e6e:	4283      	cmp	r3, r0
 8007e70:	4637      	mov	r7, r6
 8007e72:	dc04      	bgt.n	8007e7e <__swbuf_r+0x3a>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7ff f940 	bl	80070fc <_fflush_r>
 8007e7c:	b9e0      	cbnz	r0, 8007eb8 <__swbuf_r+0x74>
 8007e7e:	68a3      	ldr	r3, [r4, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	60a3      	str	r3, [r4, #8]
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	6022      	str	r2, [r4, #0]
 8007e8a:	701e      	strb	r6, [r3, #0]
 8007e8c:	6962      	ldr	r2, [r4, #20]
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d004      	beq.n	8007e9e <__swbuf_r+0x5a>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	07db      	lsls	r3, r3, #31
 8007e98:	d506      	bpl.n	8007ea8 <__swbuf_r+0x64>
 8007e9a:	2e0a      	cmp	r6, #10
 8007e9c:	d104      	bne.n	8007ea8 <__swbuf_r+0x64>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7ff f92b 	bl	80070fc <_fflush_r>
 8007ea6:	b938      	cbnz	r0, 8007eb8 <__swbuf_r+0x74>
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f806 	bl	8007ec0 <__swsetup_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0d5      	beq.n	8007e64 <__swbuf_r+0x20>
 8007eb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ebc:	e7f4      	b.n	8007ea8 <__swbuf_r+0x64>
	...

08007ec0 <__swsetup_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4b2a      	ldr	r3, [pc, #168]	; (8007f6c <__swsetup_r+0xac>)
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	460c      	mov	r4, r1
 8007eca:	b118      	cbz	r0, 8007ed4 <__swsetup_r+0x14>
 8007ecc:	6a03      	ldr	r3, [r0, #32]
 8007ece:	b90b      	cbnz	r3, 8007ed4 <__swsetup_r+0x14>
 8007ed0:	f7fe f82a 	bl	8005f28 <__sinit>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007eda:	0718      	lsls	r0, r3, #28
 8007edc:	d422      	bmi.n	8007f24 <__swsetup_r+0x64>
 8007ede:	06d9      	lsls	r1, r3, #27
 8007ee0:	d407      	bmi.n	8007ef2 <__swsetup_r+0x32>
 8007ee2:	2309      	movs	r3, #9
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef0:	e034      	b.n	8007f5c <__swsetup_r+0x9c>
 8007ef2:	0758      	lsls	r0, r3, #29
 8007ef4:	d512      	bpl.n	8007f1c <__swsetup_r+0x5c>
 8007ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef8:	b141      	cbz	r1, 8007f0c <__swsetup_r+0x4c>
 8007efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d002      	beq.n	8007f08 <__swsetup_r+0x48>
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7ff fdce 	bl	8007aa4 <_free_r>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6063      	str	r3, [r4, #4]
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f043 0308 	orr.w	r3, r3, #8
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	b94b      	cbnz	r3, 8007f3c <__swsetup_r+0x7c>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f32:	d003      	beq.n	8007f3c <__swsetup_r+0x7c>
 8007f34:	4621      	mov	r1, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f840 	bl	8007fbc <__smakebuf_r>
 8007f3c:	89a0      	ldrh	r0, [r4, #12]
 8007f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f42:	f010 0301 	ands.w	r3, r0, #1
 8007f46:	d00a      	beq.n	8007f5e <__swsetup_r+0x9e>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60a3      	str	r3, [r4, #8]
 8007f4c:	6963      	ldr	r3, [r4, #20]
 8007f4e:	425b      	negs	r3, r3
 8007f50:	61a3      	str	r3, [r4, #24]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	b943      	cbnz	r3, 8007f68 <__swsetup_r+0xa8>
 8007f56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f5a:	d1c4      	bne.n	8007ee6 <__swsetup_r+0x26>
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	0781      	lsls	r1, r0, #30
 8007f60:	bf58      	it	pl
 8007f62:	6963      	ldrpl	r3, [r4, #20]
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	e7f4      	b.n	8007f52 <__swsetup_r+0x92>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e7f7      	b.n	8007f5c <__swsetup_r+0x9c>
 8007f6c:	20000064 	.word	0x20000064

08007f70 <__swhatbuf_r>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	460c      	mov	r4, r1
 8007f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	b096      	sub	sp, #88	; 0x58
 8007f7c:	4615      	mov	r5, r2
 8007f7e:	461e      	mov	r6, r3
 8007f80:	da0d      	bge.n	8007f9e <__swhatbuf_r+0x2e>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f88:	f04f 0100 	mov.w	r1, #0
 8007f8c:	bf0c      	ite	eq
 8007f8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f92:	2340      	movne	r3, #64	; 0x40
 8007f94:	2000      	movs	r0, #0
 8007f96:	6031      	str	r1, [r6, #0]
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	b016      	add	sp, #88	; 0x58
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
 8007f9e:	466a      	mov	r2, sp
 8007fa0:	f000 f848 	bl	8008034 <_fstat_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	dbec      	blt.n	8007f82 <__swhatbuf_r+0x12>
 8007fa8:	9901      	ldr	r1, [sp, #4]
 8007faa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fb2:	4259      	negs	r1, r3
 8007fb4:	4159      	adcs	r1, r3
 8007fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fba:	e7eb      	b.n	8007f94 <__swhatbuf_r+0x24>

08007fbc <__smakebuf_r>:
 8007fbc:	898b      	ldrh	r3, [r1, #12]
 8007fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fc0:	079d      	lsls	r5, r3, #30
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	d507      	bpl.n	8007fd8 <__smakebuf_r+0x1c>
 8007fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	6123      	str	r3, [r4, #16]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	6163      	str	r3, [r4, #20]
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	ab01      	add	r3, sp, #4
 8007fda:	466a      	mov	r2, sp
 8007fdc:	f7ff ffc8 	bl	8007f70 <__swhatbuf_r>
 8007fe0:	9900      	ldr	r1, [sp, #0]
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7fe ff83 	bl	8006ef0 <_malloc_r>
 8007fea:	b948      	cbnz	r0, 8008000 <__smakebuf_r+0x44>
 8007fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d4ef      	bmi.n	8007fd4 <__smakebuf_r+0x18>
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	f043 0302 	orr.w	r3, r3, #2
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	e7e3      	b.n	8007fc8 <__smakebuf_r+0xc>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	6020      	str	r0, [r4, #0]
 8008004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	6163      	str	r3, [r4, #20]
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	6120      	str	r0, [r4, #16]
 8008012:	b15b      	cbz	r3, 800802c <__smakebuf_r+0x70>
 8008014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f81d 	bl	8008058 <_isatty_r>
 800801e:	b128      	cbz	r0, 800802c <__smakebuf_r+0x70>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	431d      	orrs	r5, r3
 8008030:	81a5      	strh	r5, [r4, #12]
 8008032:	e7cf      	b.n	8007fd4 <__smakebuf_r+0x18>

08008034 <_fstat_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d07      	ldr	r5, [pc, #28]	; (8008054 <_fstat_r+0x20>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	f7f9 f99a 	bl	800137a <_fstat>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d102      	bne.n	8008050 <_fstat_r+0x1c>
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	b103      	cbz	r3, 8008050 <_fstat_r+0x1c>
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	bf00      	nop
 8008054:	200004e0 	.word	0x200004e0

08008058 <_isatty_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d06      	ldr	r5, [pc, #24]	; (8008074 <_isatty_r+0x1c>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	f7f9 f999 	bl	800139a <_isatty>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_isatty_r+0x1a>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_isatty_r+0x1a>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	200004e0 	.word	0x200004e0

08008078 <_raise_r>:
 8008078:	291f      	cmp	r1, #31
 800807a:	b538      	push	{r3, r4, r5, lr}
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	d904      	bls.n	800808c <_raise_r+0x14>
 8008082:	2316      	movs	r3, #22
 8008084:	6003      	str	r3, [r0, #0]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800808e:	b112      	cbz	r2, 8008096 <_raise_r+0x1e>
 8008090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008094:	b94b      	cbnz	r3, 80080aa <_raise_r+0x32>
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f830 	bl	80080fc <_getpid_r>
 800809c:	462a      	mov	r2, r5
 800809e:	4601      	mov	r1, r0
 80080a0:	4620      	mov	r0, r4
 80080a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a6:	f000 b817 	b.w	80080d8 <_kill_r>
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d00a      	beq.n	80080c4 <_raise_r+0x4c>
 80080ae:	1c59      	adds	r1, r3, #1
 80080b0:	d103      	bne.n	80080ba <_raise_r+0x42>
 80080b2:	2316      	movs	r3, #22
 80080b4:	6003      	str	r3, [r0, #0]
 80080b6:	2001      	movs	r0, #1
 80080b8:	e7e7      	b.n	800808a <_raise_r+0x12>
 80080ba:	2400      	movs	r4, #0
 80080bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080c0:	4628      	mov	r0, r5
 80080c2:	4798      	blx	r3
 80080c4:	2000      	movs	r0, #0
 80080c6:	e7e0      	b.n	800808a <_raise_r+0x12>

080080c8 <raise>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <raise+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f7ff bfd3 	b.w	8008078 <_raise_r>
 80080d2:	bf00      	nop
 80080d4:	20000064 	.word	0x20000064

080080d8 <_kill_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_kill_r+0x20>)
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f7f9 f8e9 	bl	80012bc <_kill>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d102      	bne.n	80080f4 <_kill_r+0x1c>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b103      	cbz	r3, 80080f4 <_kill_r+0x1c>
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	200004e0 	.word	0x200004e0

080080fc <_getpid_r>:
 80080fc:	f7f9 b8d6 	b.w	80012ac <_getpid>

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
